commit 27a3616136b362491bb6264a72cdae26a9bbafdc
Author: brandondoray01 <117381471+brandondoray01@users.noreply.github.com>
Date:   Mon Dec 11 16:45:56 2023 -0500

    add manipulations directory to V3

diff --git a/V3/manipulation/PM-Notes-Brandon-Doray.docx b/V3/manipulation/PM-Notes-Brandon-Doray.docx
new file mode 100644
index 0000000..109cf12
--- /dev/null
+++ b/V3/manipulation/PM-Notes-Brandon-Doray.docx
@@ -0,0 +1,36 @@
+
+Manipulation Module
+
+//V1
+
+This module concatenates 2 strings sized to a defined macro.
+
+Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
+
+An input of `q' was tested to ensure it would result in ending the program.
+
+A string that is greater than the initialized memory was tested to ensure it would not crash the program.
+
+//V2
+
+V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
+
+This function will only compare strings up until it hits a NULL or a char that does not match.
+
+If it hits a char that does not match, anything after that will not be considered in the comparison.
+
+The chars are evaluated using their ASCII value.
+
+The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
+
+//V3
+
+V3 of this program will compare if string2 is found in string1 and return the index of where it was found. 
+
+Edge cases tested the result if a string was found at the 0, or last index, and the result if string2 was larger than the string being searched.
+
+An input of `q' was tested to ensure it would quit the program.
+
+A string that is greater than the initialized memory was tested to ensure it would not crash the program.
+
+
diff --git a/V3/manipulation/manipulatemain.c b/V3/manipulation/manipulatemain.c
new file mode 100644
index 0000000..1bcc78d
--- /dev/null
+++ b/V3/manipulation/manipulatemain.c
@@ -0,0 +1,5 @@
+int main(void) {
+
+	manipulating();
+	return 0;
+}
\ No newline at end of file
diff --git a/V3/manipulation/manipulating.c b/V3/manipulation/manipulating.c
new file mode 100644
index 0000000..e0ee3a9
--- /dev/null
+++ b/V3/manipulation/manipulating.c
@@ -0,0 +1,88 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "manipulating.h"
+
+// V1
+
+void manipulating(void) {
+	printf("*** Start of Concatenating Strings Demo ***\n");
+	char string1[BUFFER_SIZE];
+	char string2[BUFFER_SIZE];
+	do {
+		//Prompt for first string
+		printf("Type the 1st string (q - to quit):\n");
+		fgets(string1, BUFFER_SIZE, stdin);
+		string1[strlen(string1) - 1] = '\0';
+		//if q was entered quit program
+		if ((strcmp(string1, "q") != 0)) {
+			printf("Type the 2nd string:\n");
+			//promt for 2nd string
+			fgets(string2, BUFFER_SIZE, stdin);
+			string2[strlen(string2) - 1] = '\0';
+			//concatenate string
+			strcat(string1, string2);
+			printf("Concatenated string is \'%s\'\n", string1);
+		}
+	} while (strcmp(string1, "q") != 0);
+	printf("*** End of Concatenating Strings Demo ***\n\n");
+
+	//V2
+	printf("***Start of Comparing Strings Demon***\n");
+	char compare1[BUFFER_SIZE];
+	char compare2[BUFFER_SIZE];
+	int result;
+	do {
+		//Receive user input for the 1st string
+		printf("Type the 1st string to compare (q - to quit):\n");
+		fgets(compare1, BUFFER_SIZE, stdin);
+		//Add an ending NULL to the 1st string
+		compare1[strlen(compare1) - 1] = '\0';
+		//Check that the user did not input 'q' to quit
+		if (strcmp(compare1, "q") != 0) {
+			//Receive user input for the 2nd string
+			printf("Type the 2nd string to compare:\n");
+			fgets(compare2, BUFFER_SIZE, stdin);
+			//Add an ending NULL to the 2nd string
+			compare2[strlen(compare2) - 1] = '\0';
+			result = strcmp(compare1, compare2);
+			//Check if the 1st string < than the 2nd string
+			if (result < 0)
+				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
+			//Check if the strings are equal
+			else if (result == 0)
+				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
+			//Check if the first string is greater than the 2nd string
+			else
+				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
+
+		}
+	} while (strcmp(compare1, "q") != 0);
+	printf("*** End of Comparing Strings Demon ***\n\n");
+
+	// V3
+	printf("*** Start of Searching Strings Demo ***\n");
+	char haystack[BUFFER_SIZE];
+	char needle[BUFFER_SIZE];
+	char* occurence = NULL;
+	do {
+		printf("Type the string (q - to quit):\n");
+		//Receive user input for first string
+		fgets(haystack, BUFFER_SIZE, stdin);
+		haystack[strlen(haystack) - 1] = '\0';
+		if (strcmp(haystack, "q") != 0) {
+			printf("Type the substring:\n");
+			//receive user input for 2nd string
+			fgets(needle, BUFFER_SIZE, stdin);
+			needle[strlen(needle) - 1] = '\0';
+			//check if string2 occurs in string1
+			occurence = strstr(haystack, needle);
+			//print result
+			if (occurence)
+				printf("\'%s\' found at %d position\n", needle,
+					(int)(occurence - haystack));
+			else
+				printf("Not found\n");
+		}
+	} while (strcmp(haystack, "q") != 0);
+	printf("*** End of Searching Strings Demo ***\n\n");
+}
\ No newline at end of file
diff --git a/V3/manipulation/manipulating.h b/V3/manipulation/manipulating.h
new file mode 100644
index 0000000..434f748
--- /dev/null
+++ b/V3/manipulation/manipulating.h
@@ -0,0 +1,6 @@
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+#include <stdio.h>
+#include <string.h>
+void manipulating(void);
+#endif
\ No newline at end of file
diff --git a/V3/manipulation/manipulation-test-cases.xlsx b/V3/manipulation/manipulation-test-cases.xlsx
new file mode 100644
index 0000000..126a5e3
Binary files /dev/null and b/V3/manipulation/manipulation-test-cases.xlsx differ
diff --git a/V3/manipulation/manipulations-tests.txt b/V3/manipulation/manipulations-tests.txt
new file mode 100644
index 0000000..4577348
--- /dev/null
+++ b/V3/manipulation/manipulations-tests.txt
@@ -0,0 +1,90 @@
+ï»¿*** Start of Concatenating Strings Demo ***
+Type the 1st string (q - to quit):
+a
+Type the 2nd string:
+1
+Concatenated string is 'a1'
+Type the 1st string (q - to quit):
+abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde
+Type the 2nd string:
+abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcd
+Concatenated string is 'abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcd'
+Type the 1st string (q - to quit):
+hello this is a larger string hopefullly it will still work
+Type the 2nd string:
+Let's see if it acctually worked
+Concatenated string is 'hello this is a larger string hopefullly it will still workLet's see if it acctually worked'
+Type the 1st string (q - to quit):
+
+
+Type the 2nd string:
+
+
+Concatenated string is ''
+Type the 1st string (q - to quit):
+1122334455667788990011223344556677889900112233445566778899001122334455667788990011223344556677889900
+Type the 2nd string:
+Concatenated string is '112233445566778899001122334455667788990011223344556677889900112233445566778899011223344556677889900'
+Type the 1st string (q - to quit):
+q
+*** End of Concatenating Strings Demo ***
+
+
+***Start of Comparing Strings Demon***
+Type the 1st string to compare (q - to quit):
+same string
+Type the 2nd string to compare:
+same string
+'same string' string is equal to 'same string'
+Type the 1st string to compare (q - to quit):
+a1b2c3d4
+Type the 2nd string to compare:
+a1b2c3
+'a1b2c3d4' string is greater than 'a1b2c3'
+Type the 1st string to compare (q - to quit):
+a1b2c3
+Type the 2nd string to compare:
+a1b2c3d4
+'a1b2c3' string is less than 'a1b2c3d4'
+Type the 1st string to compare (q - to quit):
+hello
+Type the 2nd string to compare:
+hi
+'hello' string is less than 'hi'
+Type the 1st string to compare (q - to quit):
+1122334455667788990011223344556677889900112233445566778899001122334455667788990011223344556677889900
+Type the 2nd string to compare:
+'112233445566778899001122334455667788990011223344556677889900112233445566778899' string is greater than '011223344556677889900'
+Type the 1st string to compare (q - to quit):
+q
+*** End of Comparing Strings Demon ***
+
+
+*** Start of Searching Strings Demo ***
+Type the string (q - to quit):
+hello
+Type the substring:
+he
+'he' found at 0 position
+Type the string (q - to quit):
+hello
+Type the substring:
+o
+'o' found at 4 position
+Type the string (q - to quit):
+hello
+Type the substring:
+hi
+Not found
+Type the string (q - to quit):
+hello
+Type the substring:
+helloo
+Not found
+Type the string (q - to quit):
+1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
+Type the substring:
+'012345678901234567890' found at 9 position
+Type the string (q - to quit):
+q
+*** End of Searching Strings Demo ***
\ No newline at end of file

commit 7c39670b07219c223390ad53a19dec946493a827
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Sun Dec 10 21:13:34 2023 -0500

    Add conversions-git-log.txt

diff --git a/V3/conversions/conversions-git-log.txt b/V3/conversions/conversions-git-log.txt
new file mode 100644
index 0000000..5b7e39a
--- /dev/null
+++ b/V3/conversions/conversions-git-log.txt
@@ -0,0 +1,12248 @@
+commit b40220fceed3014cb0e5078870c2638b9f68d9f4
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Sun Dec 10 21:10:36 2023 -0500
+
+    Add comments to conversions.c
+
+diff --git a/V3/conversions/converting.c b/V3/conversions/converting.c
+index 1e8dbcb..5389ecc 100644
+--- a/V3/conversions/converting.c
++++ b/V3/conversions/converting.c
+@@ -23,6 +23,7 @@ void converting() {
+ 	while (strcmp(intString, "q") != 0);
+ 	printf("*** End of Converting Strings to int Demo ***\n\n");
+ 
++// Converts user's input into a double value
+ /* Version 2 */
+ 	printf("*** Start of Converting Strings to double Demo ***\n");
+ 	char doubleString[BUFFER_SIZE];
+@@ -40,6 +41,7 @@ void converting() {
+ 	} while (strcmp(doubleString, "q") != 0);
+ 	printf("*** End of Converting Strings to double Demo ***\n\n");
+ 
++// Converts user's input into a long value
+ /* Version 3 */
+ 	printf("*** Start of Converting Strings to long Demo ***\n");
+ 	char longString[BUFFER_SIZE];
+
+commit 1a305aea1bd6c2989d35858cb5429759f1a77deb
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Sun Dec 10 21:08:35 2023 -0500
+
+    Add conversions module to V3
+
+diff --git a/V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/7d43fdad-b143-4ff4-8ea2-3eaae6810440.vsidx
+similarity index 85%
+rename from V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/7d43fdad-b143-4ff4-8ea2-3eaae6810440.vsidx
+index 2b75f1d..4f4a1a9 100644
+Binary files a/V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx and b/V1/conversions/code/.vs/v1/FileContentIndex/7d43fdad-b143-4ff4-8ea2-3eaae6810440.vsidx differ
+diff --git a/V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/8d856348-68c9-4962-9074-de8c6ea7e840.vsidx
+similarity index 100%
+rename from V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/8d856348-68c9-4962-9074-de8c6ea7e840.vsidx
+diff --git a/V1/conversions/code/.vs/v1/v17/.suo b/V1/conversions/code/.vs/v1/v17/.suo
+index 218f706..767238f 100644
+Binary files a/V1/conversions/code/.vs/v1/v17/.suo and b/V1/conversions/code/.vs/v1/v17/.suo differ
+diff --git a/V1/conversions/code/.vs/v1/v17/Browse.VC.db b/V1/conversions/code/.vs/v1/v17/Browse.VC.db
+index 086de7c..71094dd 100644
+Binary files a/V1/conversions/code/.vs/v1/v17/Browse.VC.db and b/V1/conversions/code/.vs/v1/v17/Browse.VC.db differ
+diff --git a/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/57999e78823ee053/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/57999e78823ee053/CONVERTING.ipch
+new file mode 100644
+index 0000000..a9b54bb
+Binary files /dev/null and b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/57999e78823ee053/CONVERTING.ipch differ
+diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
+new file mode 100644
+index 0000000..b26bd94
+Binary files /dev/null and b/V2/Final-Project-Plan.xlsx differ
+diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
+new file mode 100644
+index 0000000..d7fe3d1
+Binary files /dev/null and b/V2/Final-Project-Test-Cases.xlsx differ
+diff --git a/V2/conversions/PM-Notes-AxtonSmith.docx b/V2/conversions/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..e204a90
+--- /dev/null
++++ b/V2/conversions/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,5 @@
++Conversion Module
++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
++Version 2 of this module will convert the input into double values.
+diff --git a/V2/conversions/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
+new file mode 100644
+index 0000000..179e6ea
+Binary files /dev/null and b/V2/conversions/conversions-test-cases.xlsx differ
+diff --git a/V2/conversions/converting.c b/V2/conversions/converting.c
+new file mode 100644
+index 0000000..9f0d0ac
+--- /dev/null
++++ b/V2/conversions/converting.c
+@@ -0,0 +1,47 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++	printf("*** Start of Converting Strings to double Demo ***\n");
++	char doubleString[BUFFER_SIZE];
++	double doubleNumber;
++	do
++	{
++		printf("Type the double numeric string (q - to quit):\n");
++		fgets(doubleString, BUFFER_SIZE, stdin);
++		doubleString[strlen(doubleString) - 1] = '\0';
++		if ((strcmp(doubleString, "q") != 0))
++		{
++			doubleNumber = atof(doubleString);
++			printf("Converted number is %f\n", doubleNumber);
++		}
++	} while (strcmp(doubleString, "q") != 0);
++	printf("*** End of Converting Strings to double Demo ***\n\n");
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/V2/conversions/converting.h b/V2/conversions/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/V2/conversions/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/conversions/main.c b/V2/conversions/main.c
+new file mode 100644
+index 0000000..6a8e436
+--- /dev/null
++++ b/V2/conversions/main.c
+@@ -0,0 +1,7 @@
++#include "converting.h"
++
++int main(void)
++{
++	converting();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/fundamentals/Fundamentals Module V2.docx b/V2/fundamentals/Fundamentals Module V2.docx
+new file mode 100644
+index 0000000..f98ecba
+--- /dev/null
++++ b/V2/fundamentals/Fundamentals Module V2.docx	
+@@ -0,0 +1,3 @@
++Fundamentals Module V2
++This module tells you the length of an input string.
++Testing: To test the module, I will use varying lengths of string with and without spaces, as well as an empty string.
+diff --git a/V2/fundamentals/fundamentals-test-cases.xlsx b/V2/fundamentals/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..5ee1fc1
+Binary files /dev/null and b/V2/fundamentals/fundamentals-test-cases.xlsx differ
+diff --git a/V2/fundamentals/fundamentals.c b/V2/fundamentals/fundamentals.c
+new file mode 100644
+index 0000000..4596c8d
+--- /dev/null
++++ b/V2/fundamentals/fundamentals.c
+@@ -0,0 +1,49 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	printf("*** Start of Measuring Strings Demo ***\n");
++	char buffer2[BUFFER_SIZE];
++	do {
++		printf("Type a string (q - to quit):\n");
++		fgets(buffer2, BUFFER_SIZE, stdin);
++		buffer2[strlen(buffer2) - 1] = '\0';
++		if (strcmp(buffer2, "q") != 0)
++			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
++	} while (strcmp(buffer2, "q") != 0);
++	printf("*** End of Measuring Strings Demo ***\n\n");
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/V2/fundamentals/fundamentals.h b/V2/fundamentals/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/V2/fundamentals/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/fundamentals/main.c b/V2/fundamentals/main.c
+new file mode 100644
+index 0000000..1225e71
+--- /dev/null
++++ b/V2/fundamentals/main.c
+@@ -0,0 +1,7 @@
++#include "fundamentals.h"
++
++int main(void)
++{
++	fundamentals();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/main/converting.c b/V2/main/converting.c
+new file mode 100644
+index 0000000..9f0d0ac
+--- /dev/null
++++ b/V2/main/converting.c
+@@ -0,0 +1,47 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++	printf("*** Start of Converting Strings to double Demo ***\n");
++	char doubleString[BUFFER_SIZE];
++	double doubleNumber;
++	do
++	{
++		printf("Type the double numeric string (q - to quit):\n");
++		fgets(doubleString, BUFFER_SIZE, stdin);
++		doubleString[strlen(doubleString) - 1] = '\0';
++		if ((strcmp(doubleString, "q") != 0))
++		{
++			doubleNumber = atof(doubleString);
++			printf("Converted number is %f\n", doubleNumber);
++		}
++	} while (strcmp(doubleString, "q") != 0);
++	printf("*** End of Converting Strings to double Demo ***\n\n");
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/V2/main/converting.h b/V2/main/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/V2/main/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/main/fundamentals.c b/V2/main/fundamentals.c
+new file mode 100644
+index 0000000..4596c8d
+--- /dev/null
++++ b/V2/main/fundamentals.c
+@@ -0,0 +1,49 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	printf("*** Start of Measuring Strings Demo ***\n");
++	char buffer2[BUFFER_SIZE];
++	do {
++		printf("Type a string (q - to quit):\n");
++		fgets(buffer2, BUFFER_SIZE, stdin);
++		buffer2[strlen(buffer2) - 1] = '\0';
++		if (strcmp(buffer2, "q") != 0)
++			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
++	} while (strcmp(buffer2, "q") != 0);
++	printf("*** End of Measuring Strings Demo ***\n\n");
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/V2/main/fundamentals.h b/V2/main/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/V2/main/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/main/main.c b/V2/main/main.c
+new file mode 100644
+index 0000000..5062fbb
+--- /dev/null
++++ b/V2/main/main.c
+@@ -0,0 +1,12 @@
++#include "fundamentals.h"
++#include "manipulating.h"
++#include "tokenizing.h"
++#include "converting.h"
++
++int main(void)
++{
++	fundamentals();
++	manipulating();
++	tokenizing();
++	converting();
++}
+diff --git a/V2/main/manipulating.c b/V2/main/manipulating.c
+new file mode 100644
+index 0000000..7ba26cd
+--- /dev/null
++++ b/V2/main/manipulating.c
+@@ -0,0 +1,61 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// V1
++
++void manipulating(void) {
++	printf("*** Start of Concatenating Strings Demo ***\n");
++	char string1[BUFFER_SIZE];
++	char string2[BUFFER_SIZE];
++	do {
++		//Prompt for first string
++		printf("Type the 1st string (q - to quit):\n");
++		fgets(string1, BUFFER_SIZE, stdin);
++		string1[strlen(string1) - 1] = '\0';
++		//if q was entered quit program
++		if ((strcmp(string1, "q") != 0)) {
++			printf("Type the 2nd string:\n");
++			//promt for 2nd string
++			fgets(string2, BUFFER_SIZE, stdin);
++			string2[strlen(string2) - 1] = '\0';
++			//concatenate string
++			strcat(string1, string2);
++			printf("Concatenated string is \'%s\'\n", string1);
++		}
++	} while (strcmp(string1, "q") != 0);
++	printf("*** End of Concatenating Strings Demo ***\n\n");
++
++	//V2
++	printf("***Start of Comparing Strings Demon***\n");
++	char compare1[BUFFER_SIZE];
++	char compare2[BUFFER_SIZE];
++	int result;
++	do {
++		//Receive user input for the 1st string
++		printf("Type the 1st string to compare (q - to quit):\n");
++		fgets(compare1, BUFFER_SIZE, stdin);
++		//Add an ending NULL to the 1st string
++		compare1[strlen(compare1) - 1] = '\0';
++		//Check that the user did not input 'q' to quit
++		if (strcmp(compare1, "q") != 0) {
++			//Receive user input for the 2nd string
++			printf("Type the 2nd string to compare:\n");
++			fgets(compare2, BUFFER_SIZE, stdin);
++			//Add an ending NULL to the 2nd string
++			compare2[strlen(compare2) - 1] = '\0';
++			result = strcmp(compare1, compare2);
++			//Check if the 1st string < than the 2nd string
++			if (result < 0)
++				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
++			//Check if the strings are equal
++			else if (result == 0)
++				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
++			//Check if the first string is greater than the 2nd string
++			else
++				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
++
++		}
++	} while (strcmp(compare1, "q") != 0);
++	printf("*** End of Comparing Strings Demon ***\n\n");
++}
+\ No newline at end of file
+diff --git a/V2/main/manipulating.h b/V2/main/manipulating.h
+new file mode 100644
+index 0000000..434f748
+--- /dev/null
++++ b/V2/main/manipulating.h
+@@ -0,0 +1,6 @@
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++#include <stdio.h>
++#include <string.h>
++void manipulating(void);
++#endif
+\ No newline at end of file
+diff --git a/V2/main/tokenizing.c b/V2/main/tokenizing.c
+new file mode 100644
+index 0000000..aa1e13a
+--- /dev/null
++++ b/V2/main/tokenizing.c
+@@ -0,0 +1,62 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "Tokenzing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	/*printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while (nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
++
++
++
++
++
++
++
++	/* Version 2 */
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char phrases[BUFFER_SIZE];
++	char* nextphrase = NULL;
++	int phrasesCounter;
++	do
++	{
++		printf("Type a few phrases seperated by space  (q - to quit):\n");
++		fgets(phrases, BUFFER_SIZE, stdin);
++		phrases[strlen(phrases) - 1] = '\0';
++		if (strcmp(phrases, "q") != 0)
++		{
++			nextphrase = strtok(phrases, " ");
++			phrasesCounter = 1;
++			while (nextphrase)
++			{
++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
++				nextphrase = strtok(NULL, " ");
++			}
++		}
++	} while (strcmp(phrases, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++	return 0;
++}
++
++
++
++	
+diff --git a/V2/main/tokenizing.h b/V2/main/tokenizing.h
+new file mode 100644
+index 0000000..d96fde1
+--- /dev/null
++++ b/V2/main/tokenizing.h
+@@ -0,0 +1,15 @@
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++int main() {
++    // Call your tokenizing function or include it in your main function
++    tokenizing();
++
++    return 0;
++}
++#endif 
+\ No newline at end of file
+diff --git a/V2/manipulations/PM-Notes-Brandon-Doray.docx b/V2/manipulations/PM-Notes-Brandon-Doray.docx
+new file mode 100644
+index 0000000..4d4609e
+--- /dev/null
++++ b/V2/manipulations/PM-Notes-Brandon-Doray.docx
+@@ -0,0 +1,25 @@
++Manipulation Module
++
++//V1
++
++This module concatenates 2 strings sized to a defined macro.
++
++Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
++
++An input of `q' was tested to ensure it would result in ending the program.
++
++A string that is greater than the initialized memory was tested to ensure it would not crash the program.
++
++//V2
++
++V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
++
++This function will only compare strings up until it hits a NULL or a char that does not match.
++
++If it hits a char that does not match, anything after that will not be considered in the comparison.
++
++The chars are evaluated using their ASCII value.
++
++The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
++
++
+diff --git a/V2/manipulations/manipulatemain.c b/V2/manipulations/manipulatemain.c
+new file mode 100644
+index 0000000..1bcc78d
+--- /dev/null
++++ b/V2/manipulations/manipulatemain.c
+@@ -0,0 +1,5 @@
++int main(void) {
++
++	manipulating();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulating.c b/V2/manipulations/manipulating.c
+new file mode 100644
+index 0000000..7ba26cd
+--- /dev/null
++++ b/V2/manipulations/manipulating.c
+@@ -0,0 +1,61 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// V1
++
++void manipulating(void) {
++	printf("*** Start of Concatenating Strings Demo ***\n");
++	char string1[BUFFER_SIZE];
++	char string2[BUFFER_SIZE];
++	do {
++		//Prompt for first string
++		printf("Type the 1st string (q - to quit):\n");
++		fgets(string1, BUFFER_SIZE, stdin);
++		string1[strlen(string1) - 1] = '\0';
++		//if q was entered quit program
++		if ((strcmp(string1, "q") != 0)) {
++			printf("Type the 2nd string:\n");
++			//promt for 2nd string
++			fgets(string2, BUFFER_SIZE, stdin);
++			string2[strlen(string2) - 1] = '\0';
++			//concatenate string
++			strcat(string1, string2);
++			printf("Concatenated string is \'%s\'\n", string1);
++		}
++	} while (strcmp(string1, "q") != 0);
++	printf("*** End of Concatenating Strings Demo ***\n\n");
++
++	//V2
++	printf("***Start of Comparing Strings Demon***\n");
++	char compare1[BUFFER_SIZE];
++	char compare2[BUFFER_SIZE];
++	int result;
++	do {
++		//Receive user input for the 1st string
++		printf("Type the 1st string to compare (q - to quit):\n");
++		fgets(compare1, BUFFER_SIZE, stdin);
++		//Add an ending NULL to the 1st string
++		compare1[strlen(compare1) - 1] = '\0';
++		//Check that the user did not input 'q' to quit
++		if (strcmp(compare1, "q") != 0) {
++			//Receive user input for the 2nd string
++			printf("Type the 2nd string to compare:\n");
++			fgets(compare2, BUFFER_SIZE, stdin);
++			//Add an ending NULL to the 2nd string
++			compare2[strlen(compare2) - 1] = '\0';
++			result = strcmp(compare1, compare2);
++			//Check if the 1st string < than the 2nd string
++			if (result < 0)
++				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
++			//Check if the strings are equal
++			else if (result == 0)
++				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
++			//Check if the first string is greater than the 2nd string
++			else
++				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
++
++		}
++	} while (strcmp(compare1, "q") != 0);
++	printf("*** End of Comparing Strings Demon ***\n\n");
++}
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulating.h b/V2/manipulations/manipulating.h
+new file mode 100644
+index 0000000..434f748
+--- /dev/null
++++ b/V2/manipulations/manipulating.h
+@@ -0,0 +1,6 @@
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++#include <stdio.h>
++#include <string.h>
++void manipulating(void);
++#endif
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
+new file mode 100644
+index 0000000..b5427b8
+Binary files /dev/null and b/V2/manipulations/manipulation-test-cases.xlsx differ
+diff --git a/V2/tokenizing/Tokenizing v2 PM-notes.docx b/V2/tokenizing/Tokenizing v2 PM-notes.docx
+new file mode 100644
+index 0000000..819aa1e
+--- /dev/null
++++ b/V2/tokenizing/Tokenizing v2 PM-notes.docx	
+@@ -0,0 +1,3 @@
++                            Tokenizing v2 PM-notes
++Basically this was the same process as v1 and even the code of the Tokenizing v2 was  basically exactly the same as v1 just changed to every phrase in the sentence instead of every word that's it 
++                                       
+diff --git a/V2/tokenizing/Tokenzing_v2_test-cases.xlsx b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx
+new file mode 100644
+index 0000000..6781d92
+Binary files /dev/null and b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx differ
+diff --git a/V2/tokenizing/tokenizing.c b/V2/tokenizing/tokenizing.c
+new file mode 100644
+index 0000000..aa1e13a
+--- /dev/null
++++ b/V2/tokenizing/tokenizing.c
+@@ -0,0 +1,62 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "Tokenzing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	/*printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while (nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
++
++
++
++
++
++
++
++	/* Version 2 */
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char phrases[BUFFER_SIZE];
++	char* nextphrase = NULL;
++	int phrasesCounter;
++	do
++	{
++		printf("Type a few phrases seperated by space  (q - to quit):\n");
++		fgets(phrases, BUFFER_SIZE, stdin);
++		phrases[strlen(phrases) - 1] = '\0';
++		if (strcmp(phrases, "q") != 0)
++		{
++			nextphrase = strtok(phrases, " ");
++			phrasesCounter = 1;
++			while (nextphrase)
++			{
++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
++				nextphrase = strtok(NULL, " ");
++			}
++		}
++	} while (strcmp(phrases, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++	return 0;
++}
++
++
++
++	
+diff --git a/V2/tokenizing/tokenizing.h b/V2/tokenizing/tokenizing.h
+new file mode 100644
+index 0000000..d96fde1
+--- /dev/null
++++ b/V2/tokenizing/tokenizing.h
+@@ -0,0 +1,15 @@
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++int main() {
++    // Call your tokenizing function or include it in your main function
++    tokenizing();
++
++    return 0;
++}
++#endif 
+\ No newline at end of file
+diff --git a/V3/conversions/PM-Notes-AxtonSmith.docx b/V3/conversions/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..65873f4
+--- /dev/null
++++ b/V3/conversions/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,6 @@
++Conversion Module
++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
++Version 2 of this module will convert the input into double values.
++Version 3 of this module will convert input into long values.
+diff --git a/V3/conversions/Screenshot 2023-12-10 210448.png b/V3/conversions/Screenshot 2023-12-10 210448.png
+new file mode 100644
+index 0000000..f569727
+Binary files /dev/null and b/V3/conversions/Screenshot 2023-12-10 210448.png differ
+diff --git a/V3/conversions/conversions-test-cases.xlsx b/V3/conversions/conversions-test-cases.xlsx
+new file mode 100644
+index 0000000..a9582f7
+Binary files /dev/null and b/V3/conversions/conversions-test-cases.xlsx differ
+diff --git a/V3/conversions/converting.c b/V3/conversions/converting.c
+new file mode 100644
+index 0000000..1e8dbcb
+--- /dev/null
++++ b/V3/conversions/converting.c
+@@ -0,0 +1,60 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++	printf("*** Start of Converting Strings to double Demo ***\n");
++	char doubleString[BUFFER_SIZE];
++	double doubleNumber;
++	do
++	{
++		printf("Type the double numeric string (q - to quit):\n");
++		fgets(doubleString, BUFFER_SIZE, stdin);
++		doubleString[strlen(doubleString) - 1] = '\0';
++		if ((strcmp(doubleString, "q") != 0))
++		{
++			doubleNumber = atof(doubleString);
++			printf("Converted number is %f\n", doubleNumber);
++		}
++	} while (strcmp(doubleString, "q") != 0);
++	printf("*** End of Converting Strings to double Demo ***\n\n");
++
++/* Version 3 */
++	printf("*** Start of Converting Strings to long Demo ***\n");
++	char longString[BUFFER_SIZE];
++	long longNumber;
++	do
++	{
++		printf("Type the long numeric string (q - to quit):\n");
++		fgets(longString, BUFFER_SIZE, stdin);
++		longString[strlen(longString) - 1] = '\0';
++		if ((strcmp(longString, "q") != 0))
++		{
++			longNumber = atol(longString);
++			printf("Converted number is %ld\n", longNumber);
++		}
++	} while (strcmp(longString, "q") != 0);
++	printf("*** End of Converting Strings to long Demo ***\n\n");
++
++}
+diff --git a/V3/conversions/converting.h b/V3/conversions/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/V3/conversions/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V3/conversions/main.c b/V3/conversions/main.c
+new file mode 100644
+index 0000000..6a8e436
+--- /dev/null
++++ b/V3/conversions/main.c
+@@ -0,0 +1,7 @@
++#include "converting.h"
++
++int main(void)
++{
++	converting();
++	return 0;
++}
+\ No newline at end of file
+
+commit 43b6172f001dc95e8ed5986d1069805484722023
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Sat Dec 9 12:12:41 2023 -0500
+
+    Add V3/main and copied excel sheets from V2
+
+diff --git a/V2/conversions/PM-Notes-AxtonSmith.docx b/V2/conversions/PM-Notes-AxtonSmith.docx
+deleted file mode 100644
+index eb38a98..0000000
+--- a/V2/conversions/PM-Notes-AxtonSmith.docx
++++ /dev/null
+@@ -1,5 +0,0 @@
+-Conversion Module
+-This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+-Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+-We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+-Version 2 of this module will convert the input into double values.
+diff --git a/V2/conversions/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
+deleted file mode 100644
+index f447878..0000000
+Binary files a/V2/conversions/conversions-test-cases.xlsx and /dev/null differ
+diff --git a/V2/conversions/main.c b/V2/conversions/main.c
+deleted file mode 100644
+index 6a8e436..0000000
+--- a/V2/conversions/main.c
++++ /dev/null
+@@ -1,7 +0,0 @@
+-#include "converting.h"
+-
+-int main(void)
+-{
+-	converting();
+-	return 0;
+-}
+\ No newline at end of file
+diff --git a/V2/fundamentals/Fundamentals Module V2.docx b/V2/fundamentals/Fundamentals Module V2.docx
+deleted file mode 100644
+index f98ecba..0000000
+--- a/V2/fundamentals/Fundamentals Module V2.docx	
++++ /dev/null
+@@ -1,3 +0,0 @@
+-Fundamentals Module V2
+-This module tells you the length of an input string.
+-Testing: To test the module, I will use varying lengths of string with and without spaces, as well as an empty string.
+diff --git a/V2/fundamentals/fundamentals-test-cases.xlsx b/V2/fundamentals/fundamentals-test-cases.xlsx
+deleted file mode 100644
+index 5ee1fc1..0000000
+Binary files a/V2/fundamentals/fundamentals-test-cases.xlsx and /dev/null differ
+diff --git a/V2/fundamentals/main.c b/V2/fundamentals/main.c
+deleted file mode 100644
+index 1225e71..0000000
+--- a/V2/fundamentals/main.c
++++ /dev/null
+@@ -1,7 +0,0 @@
+-#include "fundamentals.h"
+-
+-int main(void)
+-{
+-	fundamentals();
+-	return 0;
+-}
+\ No newline at end of file
+diff --git a/V2/main-git-log.txt b/V2/main-git-log.txt
+deleted file mode 100644
+index 9001aae..0000000
+--- a/V2/main-git-log.txt
++++ /dev/null
+@@ -1,3600 +0,0 @@
+-commit 01f89458ddc774511e45d502a67641a170760617
+-Author: Axton Smith <axtonsmith@gmail.com>
+-Date:   Sat Dec 9 00:03:26 2023 -0500
+-
+-    Add fundamentals module and add to main
+-
+-diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
+-index 814fb41..b26bd94 100644
+-Binary files a/V2/Final-Project-Plan.xlsx and b/V2/Final-Project-Plan.xlsx differ
+-diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
+-index 40e66b0..d7fe3d1 100644
+-Binary files a/V2/Final-Project-Test-Cases.xlsx and b/V2/Final-Project-Test-Cases.xlsx differ
+-diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
+-deleted file mode 100644
+-index 92459be..0000000
+-Binary files a/V2/Tokenizing.zip and /dev/null differ
+-diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
+-deleted file mode 100644
+-index 92459be..0000000
+-Binary files a/V2/Tokenzing/Tokenizing.zip and /dev/null differ
+-diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
+-deleted file mode 100644
+-index e69de29..0000000
+-diff --git a/V2/fundamentals/Fundamentals Module V2.docx b/V2/fundamentals/Fundamentals Module V2.docx
+-new file mode 100644
+-index 0000000..f98ecba
+---- /dev/null
+-+++ b/V2/fundamentals/Fundamentals Module V2.docx	
+-@@ -0,0 +1,3 @@
+-+Fundamentals Module V2
+-+This module tells you the length of an input string.
+-+Testing: To test the module, I will use varying lengths of string with and without spaces, as well as an empty string.
+-diff --git a/V2/fundamentals/fundamentals-test-cases.xlsx b/V2/fundamentals/fundamentals-test-cases.xlsx
+-new file mode 100644
+-index 0000000..5ee1fc1
+-Binary files /dev/null and b/V2/fundamentals/fundamentals-test-cases.xlsx differ
+-diff --git a/V2/fundamentals/fundamentals.c b/V2/fundamentals/fundamentals.c
+-new file mode 100644
+-index 0000000..4596c8d
+---- /dev/null
+-+++ b/V2/fundamentals/fundamentals.c
+-@@ -0,0 +1,49 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+#define NUM_INPUT_SIZE 10
+-+
+-+#include "fundamentals.h"
+-+
+-+// Takes a string input from user, then an index number and returns the character at that index of the string
+-+void fundamentals() {
+-+/* Version 1 */
+-+	printf("*** Start of Indexing Strings Demo ***\n");
+-+	char buffer1[BUFFER_SIZE];
+-+	char numInput[NUM_INPUT_SIZE];
+-+	size_t position;
+-+	do
+-+	{
+-+		printf("Type not empty string (q - to quit):\n");
+-+		fgets(buffer1, BUFFER_SIZE, stdin);
+-+		buffer1[strlen(buffer1) - 1] = '\0';
+-+		if (strcmp(buffer1, "q") != 0)
+-+		{
+-+			printf("Type the character position within the string:\n");
+-+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+-+			numInput[strlen(numInput) - 1] = '\0';
+-+			position = atoi(numInput);
+-+			if (position >= strlen(buffer1))
+-+			{
+-+				position = strlen(buffer1) - 1;
+-+				printf("Too big... Position reduced to max. available\n");
+-+			}
+-+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+-+		}
+-+	} while (strcmp(buffer1, "q") != 0);
+-+	printf("*** End of Indexing Strings Demo ***\n\n");
+-+
+-+	/* Version 2 */
+-+	printf("*** Start of Measuring Strings Demo ***\n");
+-+	char buffer2[BUFFER_SIZE];
+-+	do {
+-+		printf("Type a string (q - to quit):\n");
+-+		fgets(buffer2, BUFFER_SIZE, stdin);
+-+		buffer2[strlen(buffer2) - 1] = '\0';
+-+		if (strcmp(buffer2, "q") != 0)
+-+			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+-+	} while (strcmp(buffer2, "q") != 0);
+-+	printf("*** End of Measuring Strings Demo ***\n\n");
+-+
+-+	/* Version 3 */
+-+	//>> insert here
+-+}
+-\ No newline at end of file
+-diff --git a/V2/fundamentals/fundamentals.h b/V2/fundamentals/fundamentals.h
+-new file mode 100644
+-index 0000000..14a6f4f
+---- /dev/null
+-+++ b/V2/fundamentals/fundamentals.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _FUNDAMENTALS_H_
+-+#define _FUNDAMENTALS_H_
+-+
+-+#include <stdio.h>
+-+#include <stdlib.h>
+-+#include <string.h>
+-+
+-+// Takes a string input from user, then an index number and returns the character at that index of the string
+-+void fundamentals(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/V2/fundamentals/main.c b/V2/fundamentals/main.c
+-new file mode 100644
+-index 0000000..1225e71
+---- /dev/null
+-+++ b/V2/fundamentals/main.c
+-@@ -0,0 +1,7 @@
+-+#include "fundamentals.h"
+-+
+-+int main(void)
+-+{
+-+	fundamentals();
+-+	return 0;
+-+}
+-\ No newline at end of file
+-diff --git a/V2/main/fundamentals.c b/V2/main/fundamentals.c
+-new file mode 100644
+-index 0000000..4596c8d
+---- /dev/null
+-+++ b/V2/main/fundamentals.c
+-@@ -0,0 +1,49 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+#define NUM_INPUT_SIZE 10
+-+
+-+#include "fundamentals.h"
+-+
+-+// Takes a string input from user, then an index number and returns the character at that index of the string
+-+void fundamentals() {
+-+/* Version 1 */
+-+	printf("*** Start of Indexing Strings Demo ***\n");
+-+	char buffer1[BUFFER_SIZE];
+-+	char numInput[NUM_INPUT_SIZE];
+-+	size_t position;
+-+	do
+-+	{
+-+		printf("Type not empty string (q - to quit):\n");
+-+		fgets(buffer1, BUFFER_SIZE, stdin);
+-+		buffer1[strlen(buffer1) - 1] = '\0';
+-+		if (strcmp(buffer1, "q") != 0)
+-+		{
+-+			printf("Type the character position within the string:\n");
+-+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+-+			numInput[strlen(numInput) - 1] = '\0';
+-+			position = atoi(numInput);
+-+			if (position >= strlen(buffer1))
+-+			{
+-+				position = strlen(buffer1) - 1;
+-+				printf("Too big... Position reduced to max. available\n");
+-+			}
+-+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+-+		}
+-+	} while (strcmp(buffer1, "q") != 0);
+-+	printf("*** End of Indexing Strings Demo ***\n\n");
+-+
+-+	/* Version 2 */
+-+	printf("*** Start of Measuring Strings Demo ***\n");
+-+	char buffer2[BUFFER_SIZE];
+-+	do {
+-+		printf("Type a string (q - to quit):\n");
+-+		fgets(buffer2, BUFFER_SIZE, stdin);
+-+		buffer2[strlen(buffer2) - 1] = '\0';
+-+		if (strcmp(buffer2, "q") != 0)
+-+			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+-+	} while (strcmp(buffer2, "q") != 0);
+-+	printf("*** End of Measuring Strings Demo ***\n\n");
+-+
+-+	/* Version 3 */
+-+	//>> insert here
+-+}
+-\ No newline at end of file
+-diff --git a/V2/main/fundamentals.h b/V2/main/fundamentals.h
+-new file mode 100644
+-index 0000000..14a6f4f
+---- /dev/null
+-+++ b/V2/main/fundamentals.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _FUNDAMENTALS_H_
+-+#define _FUNDAMENTALS_H_
+-+
+-+#include <stdio.h>
+-+#include <stdlib.h>
+-+#include <string.h>
+-+
+-+// Takes a string input from user, then an index number and returns the character at that index of the string
+-+void fundamentals(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/V2/Tokenzing/Tokenzing.c b/V2/main/tokenizing.c
+-similarity index 95%
+-rename from V2/Tokenzing/Tokenzing.c
+-rename to V2/main/tokenizing.c
+-index 734c7c6..aa1e13a 100644
+---- a/V2/Tokenzing/Tokenzing.c
+-+++ b/V2/main/tokenizing.c
+-@@ -1,62 +1,62 @@
+--#define _CRT_SECURE_NO_WARNINGS
+--#define BUFFER_SIZE 300
+--#include "Tokenzing.h"
+--
+--/* Version 1 */
+--void tokenizing(void)
+--{
+--	/*printf("*** Start of Tokenizing Words Demo ***\n");
+--	char words[BUFFER_SIZE];
+--	char* nextWord = NULL;
+--	int wordsCounter;
+--	do {
+--		printf("Type a few words seperated by space  (q - to quit):\n");
+--		fgets(words, BUFFER_SIZE, stdin);
+--		words[strlen(words) - 1] = '\0';
+--		if (strcmp(words, "q") != 0) {
+--			nextWord = strtok(words, " ");
+--			wordsCounter = 1;
+--			while (nextWord) {
+--				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+--				nextWord = strtok(NULL, " ");
+--
+--			}
+--		}
+--	} while (strcmp(words, "q") != 0);
+--	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+--
+--
+--
+--
+--
+--
+--
+--	/* Version 2 */
+--	printf("*** Start of Tokenizing Words Demo ***\n");
+--	char phrases[BUFFER_SIZE];
+--	char* nextphrase = NULL;
+--	int phrasesCounter;
+--	do
+--	{
+--		printf("Type a few phrases seperated by space  (q - to quit):\n");
+--		fgets(phrases, BUFFER_SIZE, stdin);
+--		phrases[strlen(phrases) - 1] = '\0';
+--		if (strcmp(phrases, "q") != 0)
+--		{
+--			nextphrase = strtok(phrases, " ");
+--			phrasesCounter = 1;
+--			while (nextphrase)
+--			{
+--				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+--				nextphrase = strtok(NULL, " ");
+--			}
+--		}
+--	} while (strcmp(phrases, "q") != 0);
+--	printf("*** End of Tokenizing Words Demo ***\n\n");
+--
+--	return 0;
+--}
+--
+--
+--
+--	
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 300
+-+#include "Tokenzing.h"
+-+
+-+/* Version 1 */
+-+void tokenizing(void)
+-+{
+-+	/*printf("*** Start of Tokenizing Words Demo ***\n");
+-+	char words[BUFFER_SIZE];
+-+	char* nextWord = NULL;
+-+	int wordsCounter;
+-+	do {
+-+		printf("Type a few words seperated by space  (q - to quit):\n");
+-+		fgets(words, BUFFER_SIZE, stdin);
+-+		words[strlen(words) - 1] = '\0';
+-+		if (strcmp(words, "q") != 0) {
+-+			nextWord = strtok(words, " ");
+-+			wordsCounter = 1;
+-+			while (nextWord) {
+-+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+-+				nextWord = strtok(NULL, " ");
+-+
+-+			}
+-+		}
+-+	} while (strcmp(words, "q") != 0);
+-+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+-+
+-+
+-+
+-+
+-+
+-+
+-+
+-+	/* Version 2 */
+-+	printf("*** Start of Tokenizing Words Demo ***\n");
+-+	char phrases[BUFFER_SIZE];
+-+	char* nextphrase = NULL;
+-+	int phrasesCounter;
+-+	do
+-+	{
+-+		printf("Type a few phrases seperated by space  (q - to quit):\n");
+-+		fgets(phrases, BUFFER_SIZE, stdin);
+-+		phrases[strlen(phrases) - 1] = '\0';
+-+		if (strcmp(phrases, "q") != 0)
+-+		{
+-+			nextphrase = strtok(phrases, " ");
+-+			phrasesCounter = 1;
+-+			while (nextphrase)
+-+			{
+-+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+-+				nextphrase = strtok(NULL, " ");
+-+			}
+-+		}
+-+	} while (strcmp(phrases, "q") != 0);
+-+	printf("*** End of Tokenizing Words Demo ***\n\n");
+-+
+-+	return 0;
+-+}
+-+
+-+
+-+
+-+	
+-diff --git a/V2/Tokenzing/Tokenzing.h b/V2/main/tokenizing.h
+-similarity index 91%
+-rename from V2/Tokenzing/Tokenzing.h
+-rename to V2/main/tokenizing.h
+-index c8bfdb8..d96fde1 100644
+---- a/V2/Tokenzing/Tokenzing.h
+-+++ b/V2/main/tokenizing.h
+-@@ -1,15 +1,15 @@
+--#ifndef _TOKENIZING_H
+--#define _TOKENIZING_H
+--
+--#include <stdio.h>
+--#include <string.h>
+--
+--void tokenizing(void);
+--
+--int main() {
+--    // Call your tokenizing function or include it in your main function
+--    tokenizing();
+--
+--    return 0;
+--}
+-+#ifndef _TOKENIZING_H
+-+#define _TOKENIZING_H
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+
+-+void tokenizing(void);
+-+
+-+int main() {
+-+    // Call your tokenizing function or include it in your main function
+-+    tokenizing();
+-+
+-+    return 0;
+-+}
+- #endif 
+-\ No newline at end of file
+-diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/tokenizing/Tokenizing v2 PM-notes.docx
+-similarity index 100%
+-rename from V2/Tokenzing/Tokenizing v2 PM-notes.docx
+-rename to V2/tokenizing/Tokenizing v2 PM-notes.docx
+-diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx
+-similarity index 100%
+-rename from V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
+-rename to V2/tokenizing/Tokenzing_v2_test-cases.xlsx
+-diff --git a/V2/tokenizing/tokenizing.c b/V2/tokenizing/tokenizing.c
+-new file mode 100644
+-index 0000000..aa1e13a
+---- /dev/null
+-+++ b/V2/tokenizing/tokenizing.c
+-@@ -0,0 +1,62 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 300
+-+#include "Tokenzing.h"
+-+
+-+/* Version 1 */
+-+void tokenizing(void)
+-+{
+-+	/*printf("*** Start of Tokenizing Words Demo ***\n");
+-+	char words[BUFFER_SIZE];
+-+	char* nextWord = NULL;
+-+	int wordsCounter;
+-+	do {
+-+		printf("Type a few words seperated by space  (q - to quit):\n");
+-+		fgets(words, BUFFER_SIZE, stdin);
+-+		words[strlen(words) - 1] = '\0';
+-+		if (strcmp(words, "q") != 0) {
+-+			nextWord = strtok(words, " ");
+-+			wordsCounter = 1;
+-+			while (nextWord) {
+-+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+-+				nextWord = strtok(NULL, " ");
+-+
+-+			}
+-+		}
+-+	} while (strcmp(words, "q") != 0);
+-+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+-+
+-+
+-+
+-+
+-+
+-+
+-+
+-+	/* Version 2 */
+-+	printf("*** Start of Tokenizing Words Demo ***\n");
+-+	char phrases[BUFFER_SIZE];
+-+	char* nextphrase = NULL;
+-+	int phrasesCounter;
+-+	do
+-+	{
+-+		printf("Type a few phrases seperated by space  (q - to quit):\n");
+-+		fgets(phrases, BUFFER_SIZE, stdin);
+-+		phrases[strlen(phrases) - 1] = '\0';
+-+		if (strcmp(phrases, "q") != 0)
+-+		{
+-+			nextphrase = strtok(phrases, " ");
+-+			phrasesCounter = 1;
+-+			while (nextphrase)
+-+			{
+-+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+-+				nextphrase = strtok(NULL, " ");
+-+			}
+-+		}
+-+	} while (strcmp(phrases, "q") != 0);
+-+	printf("*** End of Tokenizing Words Demo ***\n\n");
+-+
+-+	return 0;
+-+}
+-+
+-+
+-+
+-+	
+-diff --git a/V2/tokenizing/tokenizing.h b/V2/tokenizing/tokenizing.h
+-new file mode 100644
+-index 0000000..d96fde1
+---- /dev/null
+-+++ b/V2/tokenizing/tokenizing.h
+-@@ -0,0 +1,15 @@
+-+#ifndef _TOKENIZING_H
+-+#define _TOKENIZING_H
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+
+-+void tokenizing(void);
+-+
+-+int main() {
+-+    // Call your tokenizing function or include it in your main function
+-+    tokenizing();
+-+
+-+    return 0;
+-+}
+-+#endif 
+-\ No newline at end of file
+-
+-commit b3a93cc2072faf105ab22552011b51ace61475d4
+-Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
+-Date:   Fri Dec 8 23:48:26 2023 -0500
+-
+-    Add files via upload
+-
+-diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/Tokenzing/Tokenizing v2 PM-notes.docx
+-new file mode 100644
+-index 0000000..a9a5ded
+---- /dev/null
+-+++ b/V2/Tokenzing/Tokenizing v2 PM-notes.docx	
+-@@ -0,0 +1,3 @@
+-+                            Tokenizing v2 PM-notes
+-+Basically this was the same process as v1 and even the code of the Tokenizing v2 was  basically exactly the same as v1 just changed to every phrase in the sentence instead of every word that's it 
+-+                                       
+-diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
+-new file mode 100644
+-index 0000000..92459be
+-Binary files /dev/null and b/V2/Tokenzing/Tokenizing.zip differ
+-diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
+-new file mode 100644
+-index 0000000..e69de29
+-diff --git a/V2/Tokenzing/Tokenzing.c b/V2/Tokenzing/Tokenzing.c
+-new file mode 100644
+-index 0000000..734c7c6
+---- /dev/null
+-+++ b/V2/Tokenzing/Tokenzing.c
+-@@ -0,0 +1,62 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 300
+-+#include "Tokenzing.h"
+-+
+-+/* Version 1 */
+-+void tokenizing(void)
+-+{
+-+	/*printf("*** Start of Tokenizing Words Demo ***\n");
+-+	char words[BUFFER_SIZE];
+-+	char* nextWord = NULL;
+-+	int wordsCounter;
+-+	do {
+-+		printf("Type a few words seperated by space  (q - to quit):\n");
+-+		fgets(words, BUFFER_SIZE, stdin);
+-+		words[strlen(words) - 1] = '\0';
+-+		if (strcmp(words, "q") != 0) {
+-+			nextWord = strtok(words, " ");
+-+			wordsCounter = 1;
+-+			while (nextWord) {
+-+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+-+				nextWord = strtok(NULL, " ");
+-+
+-+			}
+-+		}
+-+	} while (strcmp(words, "q") != 0);
+-+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+-+
+-+
+-+
+-+
+-+
+-+
+-+
+-+	/* Version 2 */
+-+	printf("*** Start of Tokenizing Words Demo ***\n");
+-+	char phrases[BUFFER_SIZE];
+-+	char* nextphrase = NULL;
+-+	int phrasesCounter;
+-+	do
+-+	{
+-+		printf("Type a few phrases seperated by space  (q - to quit):\n");
+-+		fgets(phrases, BUFFER_SIZE, stdin);
+-+		phrases[strlen(phrases) - 1] = '\0';
+-+		if (strcmp(phrases, "q") != 0)
+-+		{
+-+			nextphrase = strtok(phrases, " ");
+-+			phrasesCounter = 1;
+-+			while (nextphrase)
+-+			{
+-+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+-+				nextphrase = strtok(NULL, " ");
+-+			}
+-+		}
+-+	} while (strcmp(phrases, "q") != 0);
+-+	printf("*** End of Tokenizing Words Demo ***\n\n");
+-+
+-+	return 0;
+-+}
+-+
+-+
+-+
+-+	
+-diff --git a/V2/Tokenzing/Tokenzing.h b/V2/Tokenzing/Tokenzing.h
+-new file mode 100644
+-index 0000000..c8bfdb8
+---- /dev/null
+-+++ b/V2/Tokenzing/Tokenzing.h
+-@@ -0,0 +1,15 @@
+-+#ifndef _TOKENIZING_H
+-+#define _TOKENIZING_H
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+
+-+void tokenizing(void);
+-+
+-+int main() {
+-+    // Call your tokenizing function or include it in your main function
+-+    tokenizing();
+-+
+-+    return 0;
+-+}
+-+#endif 
+-\ No newline at end of file
+-diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
+-new file mode 100644
+-index 0000000..cb18ef6
+-Binary files /dev/null and b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx differ
+-
+-commit a59e9df43a0eb5e8a9a56bf396fa2e938c3698ad
+-Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
+-Date:   Fri Dec 8 23:47:17 2023 -0500
+-
+-    Add files via upload
+-
+-diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
+-new file mode 100644
+-index 0000000..92459be
+-Binary files /dev/null and b/V2/Tokenizing.zip differ
+-
+-commit 91039924c420b1f4e2573bfb2371b23dc5645a4e
+-Author: Axton Smith <axtonsmith@gmail.com>
+-Date:   Fri Dec 8 22:22:30 2023 -0500
+-
+-    Add manipulations and conversions test cases to Final-Project-Test-Cases.xlsx
+-
+-diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
+-new file mode 100644
+-index 0000000..814fb41
+-Binary files /dev/null and b/V2/Final-Project-Plan.xlsx differ
+-diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
+-new file mode 100644
+-index 0000000..40e66b0
+-Binary files /dev/null and b/V2/Final-Project-Test-Cases.xlsx differ
+-diff --git a/V2/conversions/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
+-index 43a8d2a..f447878 100644
+-Binary files a/V2/conversions/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
+-diff --git a/V2/main/converting.c b/V2/main/converting.c
+-new file mode 100644
+-index 0000000..9f0d0ac
+---- /dev/null
+-+++ b/V2/main/converting.c
+-@@ -0,0 +1,47 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+
+-+#include "converting.h"
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting() {
+-+/* Version 1 */
+-+	printf("*** Start of Converting Strings to int Demo ***\n");
+-+	char intString[BUFFER_SIZE];
+-+	int intNumber;
+-+	do
+-+	{
+-+		printf("Type an int numeric string (q - to quit):\n");
+-+		fgets(intString, BUFFER_SIZE, stdin);
+-+		intString[strlen(intString) - 1] = '\0';
+-+		if (strcmp(intString, "q") != 0)
+-+		{
+-+			intNumber = atoi(intString);
+-+			printf("Converted number is %d\n", intNumber);
+-+		}
+-+	}
+-+	while (strcmp(intString, "q") != 0);
+-+	printf("*** End of Converting Strings to int Demo ***\n\n");
+-+
+-+/* Version 2 */
+-+	printf("*** Start of Converting Strings to double Demo ***\n");
+-+	char doubleString[BUFFER_SIZE];
+-+	double doubleNumber;
+-+	do
+-+	{
+-+		printf("Type the double numeric string (q - to quit):\n");
+-+		fgets(doubleString, BUFFER_SIZE, stdin);
+-+		doubleString[strlen(doubleString) - 1] = '\0';
+-+		if ((strcmp(doubleString, "q") != 0))
+-+		{
+-+			doubleNumber = atof(doubleString);
+-+			printf("Converted number is %f\n", doubleNumber);
+-+		}
+-+	} while (strcmp(doubleString, "q") != 0);
+-+	printf("*** End of Converting Strings to double Demo ***\n\n");
+-+
+-+/* Version 3 */
+-+//>> insert here
+-+
+-+
+-+}
+-diff --git a/V2/main/converting.h b/V2/main/converting.h
+-new file mode 100644
+-index 0000000..94e86ab
+---- /dev/null
+-+++ b/V2/main/converting.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _CONVERTING_H_
+-+#define _CONVERTING_H_
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+#include <stdlib.h>
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/V2/main/manipulating.c b/V2/main/manipulating.c
+-new file mode 100644
+-index 0000000..7ba26cd
+---- /dev/null
+-+++ b/V2/main/manipulating.c
+-@@ -0,0 +1,61 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+#include "manipulating.h"
+-+
+-+// V1
+-+
+-+void manipulating(void) {
+-+	printf("*** Start of Concatenating Strings Demo ***\n");
+-+	char string1[BUFFER_SIZE];
+-+	char string2[BUFFER_SIZE];
+-+	do {
+-+		//Prompt for first string
+-+		printf("Type the 1st string (q - to quit):\n");
+-+		fgets(string1, BUFFER_SIZE, stdin);
+-+		string1[strlen(string1) - 1] = '\0';
+-+		//if q was entered quit program
+-+		if ((strcmp(string1, "q") != 0)) {
+-+			printf("Type the 2nd string:\n");
+-+			//promt for 2nd string
+-+			fgets(string2, BUFFER_SIZE, stdin);
+-+			string2[strlen(string2) - 1] = '\0';
+-+			//concatenate string
+-+			strcat(string1, string2);
+-+			printf("Concatenated string is \'%s\'\n", string1);
+-+		}
+-+	} while (strcmp(string1, "q") != 0);
+-+	printf("*** End of Concatenating Strings Demo ***\n\n");
+-+
+-+	//V2
+-+	printf("***Start of Comparing Strings Demon***\n");
+-+	char compare1[BUFFER_SIZE];
+-+	char compare2[BUFFER_SIZE];
+-+	int result;
+-+	do {
+-+		//Receive user input for the 1st string
+-+		printf("Type the 1st string to compare (q - to quit):\n");
+-+		fgets(compare1, BUFFER_SIZE, stdin);
+-+		//Add an ending NULL to the 1st string
+-+		compare1[strlen(compare1) - 1] = '\0';
+-+		//Check that the user did not input 'q' to quit
+-+		if (strcmp(compare1, "q") != 0) {
+-+			//Receive user input for the 2nd string
+-+			printf("Type the 2nd string to compare:\n");
+-+			fgets(compare2, BUFFER_SIZE, stdin);
+-+			//Add an ending NULL to the 2nd string
+-+			compare2[strlen(compare2) - 1] = '\0';
+-+			result = strcmp(compare1, compare2);
+-+			//Check if the 1st string < than the 2nd string
+-+			if (result < 0)
+-+				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
+-+			//Check if the strings are equal
+-+			else if (result == 0)
+-+				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
+-+			//Check if the first string is greater than the 2nd string
+-+			else
+-+				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
+-+
+-+		}
+-+	} while (strcmp(compare1, "q") != 0);
+-+	printf("*** End of Comparing Strings Demon ***\n\n");
+-+}
+-\ No newline at end of file
+-diff --git a/V2/main/manipulating.h b/V2/main/manipulating.h
+-new file mode 100644
+-index 0000000..434f748
+---- /dev/null
+-+++ b/V2/main/manipulating.h
+-@@ -0,0 +1,6 @@
+-+#ifndef _MANIPULATING_H_
+-+#define _MANIPULATING_H_
+-+#include <stdio.h>
+-+#include <string.h>
+-+void manipulating(void);
+-+#endif
+-\ No newline at end of file
+-diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
+-index 323e377..dc49fc2 100644
+-Binary files a/V2/manipulations/manipulation-test-cases.xlsx and b/V2/manipulations/manipulation-test-cases.xlsx differ
+-
+-commit a43fbc4a9b1fb232cd9c5c46d4bbff26133c5afb
+-Author: Axton Smith <axtonsmith@gmail.com>
+-Date:   Fri Dec 8 22:05:42 2023 -0500
+-
+-    Add conversions module to V2
+-
+-diff --git a/V1/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
+-deleted file mode 100644
+-index ea57e7e..0000000
+-Binary files a/V1/conversions/conversionsV1.zip and /dev/null differ
+-diff --git a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+-deleted file mode 100644
+-index dc61b8f..0000000
+---- a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+-+++ /dev/null
+-@@ -1,4 +0,0 @@
+--Conversion Module
+--This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+--Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+--We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+-diff --git a/V1/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
+-deleted file mode 100644
+-index a2cffb9..0000000
+-Binary files a/V1/conversions/conversionsV1/conversions-test-cases.xlsx and /dev/null differ
+-diff --git a/V1/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
+-deleted file mode 100644
+-index dc92171..0000000
+---- a/V1/conversions/conversionsV1/converting.c
+-+++ /dev/null
+-@@ -1,34 +0,0 @@
+--#define _CRT_SECURE_NO_WARNINGS
+--#define BUFFER_SIZE 80
+--
+--#include "converting.h"
+--
+--// User inputs a number as a string, then it is returned as an int
+--void converting() {
+--/* Version 1 */
+--	printf("*** Start of Converting Strings to int Demo ***\n");
+--	char intString[BUFFER_SIZE];
+--	int intNumber;
+--	do
+--	{
+--		printf("Type an int numeric string (q - to quit):\n");
+--		fgets(intString, BUFFER_SIZE, stdin);
+--		intString[strlen(intString) - 1] = '\0';
+--		if (strcmp(intString, "q") != 0)
+--		{
+--			intNumber = atoi(intString);
+--			printf("Converted number is %d\n", intNumber);
+--		}
+--	}
+--	while (strcmp(intString, "q") != 0);
+--	printf("*** End of Converting Strings to int Demo ***\n\n");
+--
+--/* Version 2 */
+--//>> insert here
+--
+--
+--/* Version 3 */
+--//>> insert here
+--
+--
+--}
+-diff --git a/V1/conversions/converting.c b/V1/conversions/templates/converting.c
+-similarity index 100%
+-rename from V1/conversions/converting.c
+-rename to V1/conversions/templates/converting.c
+-diff --git a/V1/conversions/converting_header.png b/V1/conversions/templates/converting_header.png
+-similarity index 100%
+-rename from V1/conversions/converting_header.png
+-rename to V1/conversions/templates/converting_header.png
+-diff --git a/V1/conversions/converting_v1.png b/V1/conversions/templates/converting_v1.png
+-similarity index 100%
+-rename from V1/conversions/converting_v1.png
+-rename to V1/conversions/templates/converting_v1.png
+-diff --git a/V1/conversions/converting_v2.png b/V1/conversions/templates/converting_v2.png
+-similarity index 100%
+-rename from V1/conversions/converting_v2.png
+-rename to V1/conversions/templates/converting_v2.png
+-diff --git a/V1/conversions/converting_v3.png b/V1/conversions/templates/converting_v3.png
+-similarity index 100%
+-rename from V1/conversions/converting_v3.png
+-rename to V1/conversions/templates/converting_v3.png
+-diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/PM-Notes-AxtonSmith.docx
+-similarity index 60%
+-rename from V2/conversions/V1/PM-Notes-AxtonSmith.docx
+-rename to V2/conversions/PM-Notes-AxtonSmith.docx
+-index dc61b8f..eb38a98 100644
+---- a/V2/conversions/V1/PM-Notes-AxtonSmith.docx
+-+++ b/V2/conversions/PM-Notes-AxtonSmith.docx
+-@@ -2,3 +2,4 @@ Conversion Module
+- This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+- Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+- We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+-+Version 2 of this module will convert the input into double values.
+-diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
+-deleted file mode 100644
+-index 94e86ab..0000000
+---- a/V2/conversions/V1/converting.h
+-+++ /dev/null
+-@@ -1,11 +0,0 @@
+--#ifndef _CONVERTING_H_
+--#define _CONVERTING_H_
+--
+--#include <stdio.h>
+--#include <string.h>
+--#include <stdlib.h>
+--
+--// User inputs a number as a string, then it is returned as an int
+--void converting(void);
+--
+--#endif
+-\ No newline at end of file
+-diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
+-deleted file mode 100644
+-index 6a8e436..0000000
+---- a/V2/conversions/V1/main.c
+-+++ /dev/null
+-@@ -1,7 +0,0 @@
+--#include "converting.h"
+--
+--int main(void)
+--{
+--	converting();
+--	return 0;
+--}
+-\ No newline at end of file
+-diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+-deleted file mode 100644
+-index dc61b8f..0000000
+---- a/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+-+++ /dev/null
+-@@ -1,4 +0,0 @@
+--Conversion Module
+--This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+--Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+--We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+-diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
+-deleted file mode 100644
+-index a2cffb9..0000000
+-Binary files a/V2/conversions/V2/conversions-test-cases.xlsx and /dev/null differ
+-diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
+-deleted file mode 100644
+-index dc92171..0000000
+---- a/V2/conversions/V2/converting.c
+-+++ /dev/null
+-@@ -1,34 +0,0 @@
+--#define _CRT_SECURE_NO_WARNINGS
+--#define BUFFER_SIZE 80
+--
+--#include "converting.h"
+--
+--// User inputs a number as a string, then it is returned as an int
+--void converting() {
+--/* Version 1 */
+--	printf("*** Start of Converting Strings to int Demo ***\n");
+--	char intString[BUFFER_SIZE];
+--	int intNumber;
+--	do
+--	{
+--		printf("Type an int numeric string (q - to quit):\n");
+--		fgets(intString, BUFFER_SIZE, stdin);
+--		intString[strlen(intString) - 1] = '\0';
+--		if (strcmp(intString, "q") != 0)
+--		{
+--			intNumber = atoi(intString);
+--			printf("Converted number is %d\n", intNumber);
+--		}
+--	}
+--	while (strcmp(intString, "q") != 0);
+--	printf("*** End of Converting Strings to int Demo ***\n\n");
+--
+--/* Version 2 */
+--//>> insert here
+--
+--
+--/* Version 3 */
+--//>> insert here
+--
+--
+--}
+-diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
+-deleted file mode 100644
+-index 94e86ab..0000000
+---- a/V2/conversions/V2/converting.h
+-+++ /dev/null
+-@@ -1,11 +0,0 @@
+--#ifndef _CONVERTING_H_
+--#define _CONVERTING_H_
+--
+--#include <stdio.h>
+--#include <string.h>
+--#include <stdlib.h>
+--
+--// User inputs a number as a string, then it is returned as an int
+--void converting(void);
+--
+--#endif
+-\ No newline at end of file
+-diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
+-deleted file mode 100644
+-index 6a8e436..0000000
+---- a/V2/conversions/V2/main.c
+-+++ /dev/null
+-@@ -1,7 +0,0 @@
+--#include "converting.h"
+--
+--int main(void)
+--{
+--	converting();
+--	return 0;
+--}
+-\ No newline at end of file
+-diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
+-similarity index 53%
+-rename from V2/conversions/V1/conversions-test-cases.xlsx
+-rename to V2/conversions/conversions-test-cases.xlsx
+-index a2cffb9..43a8d2a 100644
+-Binary files a/V2/conversions/V1/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
+-diff --git a/V2/conversions/V1/converting.c b/V2/conversions/converting.c
+-similarity index 57%
+-rename from V2/conversions/V1/converting.c
+-rename to V2/conversions/converting.c
+-index dc92171..9f0d0ac 100644
+---- a/V2/conversions/V1/converting.c
+-+++ b/V2/conversions/converting.c
+-@@ -24,8 +24,21 @@ void converting() {
+- 	printf("*** End of Converting Strings to int Demo ***\n\n");
+- 
+- /* Version 2 */
+--//>> insert here
+--
+-+	printf("*** Start of Converting Strings to double Demo ***\n");
+-+	char doubleString[BUFFER_SIZE];
+-+	double doubleNumber;
+-+	do
+-+	{
+-+		printf("Type the double numeric string (q - to quit):\n");
+-+		fgets(doubleString, BUFFER_SIZE, stdin);
+-+		doubleString[strlen(doubleString) - 1] = '\0';
+-+		if ((strcmp(doubleString, "q") != 0))
+-+		{
+-+			doubleNumber = atof(doubleString);
+-+			printf("Converted number is %f\n", doubleNumber);
+-+		}
+-+	} while (strcmp(doubleString, "q") != 0);
+-+	printf("*** End of Converting Strings to double Demo ***\n\n");
+- 
+- /* Version 3 */
+- //>> insert here
+-diff --git a/V1/conversions/conversionsV1/converting.h b/V2/conversions/converting.h
+-similarity index 100%
+-rename from V1/conversions/conversionsV1/converting.h
+-rename to V2/conversions/converting.h
+-diff --git a/V1/conversions/conversionsV1/main.c b/V2/conversions/main.c
+-similarity index 100%
+-rename from V1/conversions/conversionsV1/main.c
+-rename to V2/conversions/main.c
+-diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
+-deleted file mode 100644
+-index 88b340e..0000000
+---- a/V2/conversions/templates/converting.c
+-+++ /dev/null
+-@@ -1,16 +0,0 @@
+--#include "converting.h"
+--
+--void converting() {
+--/* Version 1 */
+-->> insert here
+--
+--
+--/* Version 2 */
+-->> insert here
+--
+--
+--/* Version 3 */
+-->> insert here
+--
+--
+--}
+-diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
+-deleted file mode 100644
+-index 4ffb3a8..0000000
+-Binary files a/V2/conversions/templates/converting_header.png and /dev/null differ
+-diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
+-deleted file mode 100644
+-index 50f5734..0000000
+-Binary files a/V2/conversions/templates/converting_v1.png and /dev/null differ
+-diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
+-deleted file mode 100644
+-index edcdf1e..0000000
+-Binary files a/V2/conversions/templates/converting_v2.png and /dev/null differ
+-diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
+-deleted file mode 100644
+-index 146285f..0000000
+-Binary files a/V2/conversions/templates/converting_v3.png and /dev/null differ
+-
+-commit d381ca2bc9cb411356a214dcb09764517b1b8dba
+-Author: brandondoray01 <117381471+brandondoray01@users.noreply.github.com>
+-Date:   Fri Dec 8 18:43:36 2023 -0500
+-
+-    Add manipulations module to V2
+-
+-diff --git a/V2/manipulations/PM-Notes-Brandon-Doray.docx b/V2/manipulations/PM-Notes-Brandon-Doray.docx
+-new file mode 100644
+-index 0000000..f3443e8
+---- /dev/null
+-+++ b/V2/manipulations/PM-Notes-Brandon-Doray.docx
+-@@ -0,0 +1,25 @@
+-+Manipulation Module
+-+
+-+//V1
+-+
+-+This module concatenates 2 strings sized to a defined macro.
+-+
+-+Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
+-+
+-+An input of `q' was tested to ensure it would result in ending the program.
+-+
+-+A string that is greater than the initialized memory was tested to ensure it would not crash the program.
+-+
+-+//V2
+-+
+-+V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
+-+
+-+This function will only compare strings up until it hits a NULL or a char that does not match.
+-+
+-+If it hits a char that does not match, anything after that will not be considered in the comparison.
+-+
+-+The chars are evaluated using their ASCII value.
+-+
+-+The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
+-+
+-+
+-diff --git a/V2/manipulations/manipulatemain.c b/V2/manipulations/manipulatemain.c
+-new file mode 100644
+-index 0000000..1bcc78d
+---- /dev/null
+-+++ b/V2/manipulations/manipulatemain.c
+-@@ -0,0 +1,5 @@
+-+int main(void) {
+-+
+-+	manipulating();
+-+	return 0;
+-+}
+-\ No newline at end of file
+-diff --git a/V2/manipulations/manipulating.c b/V2/manipulations/manipulating.c
+-new file mode 100644
+-index 0000000..7ba26cd
+---- /dev/null
+-+++ b/V2/manipulations/manipulating.c
+-@@ -0,0 +1,61 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+#include "manipulating.h"
+-+
+-+// V1
+-+
+-+void manipulating(void) {
+-+	printf("*** Start of Concatenating Strings Demo ***\n");
+-+	char string1[BUFFER_SIZE];
+-+	char string2[BUFFER_SIZE];
+-+	do {
+-+		//Prompt for first string
+-+		printf("Type the 1st string (q - to quit):\n");
+-+		fgets(string1, BUFFER_SIZE, stdin);
+-+		string1[strlen(string1) - 1] = '\0';
+-+		//if q was entered quit program
+-+		if ((strcmp(string1, "q") != 0)) {
+-+			printf("Type the 2nd string:\n");
+-+			//promt for 2nd string
+-+			fgets(string2, BUFFER_SIZE, stdin);
+-+			string2[strlen(string2) - 1] = '\0';
+-+			//concatenate string
+-+			strcat(string1, string2);
+-+			printf("Concatenated string is \'%s\'\n", string1);
+-+		}
+-+	} while (strcmp(string1, "q") != 0);
+-+	printf("*** End of Concatenating Strings Demo ***\n\n");
+-+
+-+	//V2
+-+	printf("***Start of Comparing Strings Demon***\n");
+-+	char compare1[BUFFER_SIZE];
+-+	char compare2[BUFFER_SIZE];
+-+	int result;
+-+	do {
+-+		//Receive user input for the 1st string
+-+		printf("Type the 1st string to compare (q - to quit):\n");
+-+		fgets(compare1, BUFFER_SIZE, stdin);
+-+		//Add an ending NULL to the 1st string
+-+		compare1[strlen(compare1) - 1] = '\0';
+-+		//Check that the user did not input 'q' to quit
+-+		if (strcmp(compare1, "q") != 0) {
+-+			//Receive user input for the 2nd string
+-+			printf("Type the 2nd string to compare:\n");
+-+			fgets(compare2, BUFFER_SIZE, stdin);
+-+			//Add an ending NULL to the 2nd string
+-+			compare2[strlen(compare2) - 1] = '\0';
+-+			result = strcmp(compare1, compare2);
+-+			//Check if the 1st string < than the 2nd string
+-+			if (result < 0)
+-+				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
+-+			//Check if the strings are equal
+-+			else if (result == 0)
+-+				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
+-+			//Check if the first string is greater than the 2nd string
+-+			else
+-+				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
+-+
+-+		}
+-+	} while (strcmp(compare1, "q") != 0);
+-+	printf("*** End of Comparing Strings Demon ***\n\n");
+-+}
+-\ No newline at end of file
+-diff --git a/V2/manipulations/manipulating.h b/V2/manipulations/manipulating.h
+-new file mode 100644
+-index 0000000..434f748
+---- /dev/null
+-+++ b/V2/manipulations/manipulating.h
+-@@ -0,0 +1,6 @@
+-+#ifndef _MANIPULATING_H_
+-+#define _MANIPULATING_H_
+-+#include <stdio.h>
+-+#include <string.h>
+-+void manipulating(void);
+-+#endif
+-\ No newline at end of file
+-diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
+-new file mode 100644
+-index 0000000..323e377
+-Binary files /dev/null and b/V2/manipulations/manipulation-test-cases.xlsx differ
+-
+-commit 762b012570748db01ca39e1b888a916f027f5c43
+-Author: Axton Smith <axtonsmith@gmail.com>
+-Date:   Fri Dec 8 18:02:18 2023 -0500
+-
+-    Added main and conversions directories to V2
+-
+-diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
+-new file mode 100644
+-index 0000000..dc61b8f
+---- /dev/null
+-+++ b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
+-@@ -0,0 +1,4 @@
+-+Conversion Module
+-+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+-+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+-+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+-diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/V1/conversions-test-cases.xlsx
+-new file mode 100644
+-index 0000000..a2cffb9
+-Binary files /dev/null and b/V2/conversions/V1/conversions-test-cases.xlsx differ
+-diff --git a/V2/conversions/V1/converting.c b/V2/conversions/V1/converting.c
+-new file mode 100644
+-index 0000000..dc92171
+---- /dev/null
+-+++ b/V2/conversions/V1/converting.c
+-@@ -0,0 +1,34 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+
+-+#include "converting.h"
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting() {
+-+/* Version 1 */
+-+	printf("*** Start of Converting Strings to int Demo ***\n");
+-+	char intString[BUFFER_SIZE];
+-+	int intNumber;
+-+	do
+-+	{
+-+		printf("Type an int numeric string (q - to quit):\n");
+-+		fgets(intString, BUFFER_SIZE, stdin);
+-+		intString[strlen(intString) - 1] = '\0';
+-+		if (strcmp(intString, "q") != 0)
+-+		{
+-+			intNumber = atoi(intString);
+-+			printf("Converted number is %d\n", intNumber);
+-+		}
+-+	}
+-+	while (strcmp(intString, "q") != 0);
+-+	printf("*** End of Converting Strings to int Demo ***\n\n");
+-+
+-+/* Version 2 */
+-+//>> insert here
+-+
+-+
+-+/* Version 3 */
+-+//>> insert here
+-+
+-+
+-+}
+-diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
+-new file mode 100644
+-index 0000000..94e86ab
+---- /dev/null
+-+++ b/V2/conversions/V1/converting.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _CONVERTING_H_
+-+#define _CONVERTING_H_
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+#include <stdlib.h>
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
+-new file mode 100644
+-index 0000000..6a8e436
+---- /dev/null
+-+++ b/V2/conversions/V1/main.c
+-@@ -0,0 +1,7 @@
+-+#include "converting.h"
+-+
+-+int main(void)
+-+{
+-+	converting();
+-+	return 0;
+-+}
+-\ No newline at end of file
+-diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+-new file mode 100644
+-index 0000000..dc61b8f
+---- /dev/null
+-+++ b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+-@@ -0,0 +1,4 @@
+-+Conversion Module
+-+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+-+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+-+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+-diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
+-new file mode 100644
+-index 0000000..a2cffb9
+-Binary files /dev/null and b/V2/conversions/V2/conversions-test-cases.xlsx differ
+-diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
+-new file mode 100644
+-index 0000000..dc92171
+---- /dev/null
+-+++ b/V2/conversions/V2/converting.c
+-@@ -0,0 +1,34 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+
+-+#include "converting.h"
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting() {
+-+/* Version 1 */
+-+	printf("*** Start of Converting Strings to int Demo ***\n");
+-+	char intString[BUFFER_SIZE];
+-+	int intNumber;
+-+	do
+-+	{
+-+		printf("Type an int numeric string (q - to quit):\n");
+-+		fgets(intString, BUFFER_SIZE, stdin);
+-+		intString[strlen(intString) - 1] = '\0';
+-+		if (strcmp(intString, "q") != 0)
+-+		{
+-+			intNumber = atoi(intString);
+-+			printf("Converted number is %d\n", intNumber);
+-+		}
+-+	}
+-+	while (strcmp(intString, "q") != 0);
+-+	printf("*** End of Converting Strings to int Demo ***\n\n");
+-+
+-+/* Version 2 */
+-+//>> insert here
+-+
+-+
+-+/* Version 3 */
+-+//>> insert here
+-+
+-+
+-+}
+-diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
+-new file mode 100644
+-index 0000000..94e86ab
+---- /dev/null
+-+++ b/V2/conversions/V2/converting.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _CONVERTING_H_
+-+#define _CONVERTING_H_
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+#include <stdlib.h>
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
+-new file mode 100644
+-index 0000000..6a8e436
+---- /dev/null
+-+++ b/V2/conversions/V2/main.c
+-@@ -0,0 +1,7 @@
+-+#include "converting.h"
+-+
+-+int main(void)
+-+{
+-+	converting();
+-+	return 0;
+-+}
+-\ No newline at end of file
+-diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
+-new file mode 100644
+-index 0000000..88b340e
+---- /dev/null
+-+++ b/V2/conversions/templates/converting.c
+-@@ -0,0 +1,16 @@
+-+#include "converting.h"
+-+
+-+void converting() {
+-+/* Version 1 */
+-+>> insert here
+-+
+-+
+-+/* Version 2 */
+-+>> insert here
+-+
+-+
+-+/* Version 3 */
+-+>> insert here
+-+
+-+
+-+}
+-diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
+-new file mode 100644
+-index 0000000..4ffb3a8
+-Binary files /dev/null and b/V2/conversions/templates/converting_header.png differ
+-diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
+-new file mode 100644
+-index 0000000..50f5734
+-Binary files /dev/null and b/V2/conversions/templates/converting_v1.png differ
+-diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
+-new file mode 100644
+-index 0000000..edcdf1e
+-Binary files /dev/null and b/V2/conversions/templates/converting_v2.png differ
+-diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
+-new file mode 100644
+-index 0000000..146285f
+-Binary files /dev/null and b/V2/conversions/templates/converting_v3.png differ
+-diff --git a/V2/main/main.c b/V2/main/main.c
+-new file mode 100644
+-index 0000000..5062fbb
+---- /dev/null
+-+++ b/V2/main/main.c
+-@@ -0,0 +1,12 @@
+-+#include "fundamentals.h"
+-+#include "manipulating.h"
+-+#include "tokenizing.h"
+-+#include "converting.h"
+-+
+-+int main(void)
+-+{
+-+	fundamentals();
+-+	manipulating();
+-+	tokenizing();
+-+	converting();
+-+}
+-
+-commit 71381063066ca1afc0b8ae3b42200293548cf6bd
+-Author: Axton Smith <axtonsmith@gmail.com>
+-Date:   Fri Dec 8 17:55:59 2023 -0500
+-
+-    Moved all files to V1, Add V2 directory
+-
+-diff --git a/conversions/PM-Notes-AxtonSmith.docx b/V1/conversions/PM-Notes-AxtonSmith.docx
+-similarity index 100%
+-rename from conversions/PM-Notes-AxtonSmith.docx
+-rename to V1/conversions/PM-Notes-AxtonSmith.docx
+-diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+-similarity index 100%
+-rename from conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+-rename to V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+-diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+-similarity index 100%
+-rename from conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+-rename to V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+-diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+-similarity index 100%
+-rename from conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+-rename to V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+-diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+-similarity index 100%
+-rename from conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+-rename to V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+-diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+-similarity index 100%
+-rename from conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+-rename to V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+-diff --git a/conversions/code/.vs/v1/v17/.suo b/V1/conversions/code/.vs/v1/v17/.suo
+-similarity index 100%
+-rename from conversions/code/.vs/v1/v17/.suo
+-rename to V1/conversions/code/.vs/v1/v17/.suo
+-diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/V1/conversions/code/.vs/v1/v17/Browse.VC.db
+-similarity index 100%
+-rename from conversions/code/.vs/v1/v17/Browse.VC.db
+-rename to V1/conversions/code/.vs/v1/v17/Browse.VC.db
+-diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/V1/conversions/code/.vs/v1/v17/Solution.VC.db
+-similarity index 100%
+-rename from conversions/code/.vs/v1/v17/Solution.VC.db
+-rename to V1/conversions/code/.vs/v1/v17/Solution.VC.db
+-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+-similarity index 100%
+-rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+-rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+-similarity index 100%
+-rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+-rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+-similarity index 100%
+-rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+-rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+-similarity index 100%
+-rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+-rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+-diff --git a/conversions/code/converting.c b/V1/conversions/code/converting.c
+-similarity index 100%
+-rename from conversions/code/converting.c
+-rename to V1/conversions/code/converting.c
+-diff --git a/conversions/code/converting.h b/V1/conversions/code/converting.h
+-similarity index 100%
+-rename from conversions/code/converting.h
+-rename to V1/conversions/code/converting.h
+-diff --git a/conversions/code/main.c b/V1/conversions/code/main.c
+-similarity index 100%
+-rename from conversions/code/main.c
+-rename to V1/conversions/code/main.c
+-diff --git a/conversions/code/v1.sln b/V1/conversions/code/v1.sln
+-similarity index 100%
+-rename from conversions/code/v1.sln
+-rename to V1/conversions/code/v1.sln
+-diff --git a/conversions/code/v1.vcxproj b/V1/conversions/code/v1.vcxproj
+-similarity index 100%
+-rename from conversions/code/v1.vcxproj
+-rename to V1/conversions/code/v1.vcxproj
+-diff --git a/conversions/code/v1.vcxproj.filters b/V1/conversions/code/v1.vcxproj.filters
+-similarity index 100%
+-rename from conversions/code/v1.vcxproj.filters
+-rename to V1/conversions/code/v1.vcxproj.filters
+-diff --git a/conversions/code/v1.vcxproj.user b/V1/conversions/code/v1.vcxproj.user
+-similarity index 100%
+-rename from conversions/code/v1.vcxproj.user
+-rename to V1/conversions/code/v1.vcxproj.user
+-diff --git a/conversions/code/x64/Debug/converting.obj b/V1/conversions/code/x64/Debug/converting.obj
+-similarity index 100%
+-rename from conversions/code/x64/Debug/converting.obj
+-rename to V1/conversions/code/x64/Debug/converting.obj
+-diff --git a/conversions/code/x64/Debug/main.obj b/V1/conversions/code/x64/Debug/main.obj
+-similarity index 100%
+-rename from conversions/code/x64/Debug/main.obj
+-rename to V1/conversions/code/x64/Debug/main.obj
+-diff --git a/conversions/code/x64/Debug/v1.exe b/V1/conversions/code/x64/Debug/v1.exe
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.exe
+-rename to V1/conversions/code/x64/Debug/v1.exe
+-diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/V1/conversions/code/x64/Debug/v1.exe.recipe
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.exe.recipe
+-rename to V1/conversions/code/x64/Debug/v1.exe.recipe
+-diff --git a/conversions/code/x64/Debug/v1.ilk b/V1/conversions/code/x64/Debug/v1.ilk
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.ilk
+-rename to V1/conversions/code/x64/Debug/v1.ilk
+-diff --git a/conversions/code/x64/Debug/v1.log b/V1/conversions/code/x64/Debug/v1.log
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.log
+-rename to V1/conversions/code/x64/Debug/v1.log
+-diff --git a/conversions/code/x64/Debug/v1.pdb b/V1/conversions/code/x64/Debug/v1.pdb
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.pdb
+-rename to V1/conversions/code/x64/Debug/v1.pdb
+-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+-rename to V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+-rename to V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+-rename to V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+-diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+-rename to V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+-diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+-rename to V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+-diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+-rename to V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+-diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+-rename to V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+-diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+-rename to V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+-diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+-similarity index 100%
+-rename from conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+-rename to V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+-diff --git a/conversions/code/x64/Debug/vc143.idb b/V1/conversions/code/x64/Debug/vc143.idb
+-similarity index 100%
+-rename from conversions/code/x64/Debug/vc143.idb
+-rename to V1/conversions/code/x64/Debug/vc143.idb
+-diff --git a/conversions/code/x64/Debug/vc143.pdb b/V1/conversions/code/x64/Debug/vc143.pdb
+-similarity index 100%
+-rename from conversions/code/x64/Debug/vc143.pdb
+-rename to V1/conversions/code/x64/Debug/vc143.pdb
+-diff --git a/conversions/conversions-test-cases.xlsx b/V1/conversions/conversions-test-cases.xlsx
+-similarity index 100%
+-rename from conversions/conversions-test-cases.xlsx
+-rename to V1/conversions/conversions-test-cases.xlsx
+-diff --git a/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
+-similarity index 100%
+-rename from conversions/conversionsV1.zip
+-rename to V1/conversions/conversionsV1.zip
+-diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+-similarity index 100%
+-rename from conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+-rename to V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+-diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
+-similarity index 100%
+-rename from conversions/conversionsV1/conversions-test-cases.xlsx
+-rename to V1/conversions/conversionsV1/conversions-test-cases.xlsx
+-diff --git a/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
+-similarity index 100%
+-rename from conversions/conversionsV1/converting.c
+-rename to V1/conversions/conversionsV1/converting.c
+-diff --git a/conversions/conversionsV1/converting.h b/V1/conversions/conversionsV1/converting.h
+-similarity index 100%
+-rename from conversions/conversionsV1/converting.h
+-rename to V1/conversions/conversionsV1/converting.h
+-diff --git a/conversions/conversionsV1/main.c b/V1/conversions/conversionsV1/main.c
+-similarity index 100%
+-rename from conversions/conversionsV1/main.c
+-rename to V1/conversions/conversionsV1/main.c
+-diff --git a/conversions/converting.c b/V1/conversions/converting.c
+-similarity index 100%
+-rename from conversions/converting.c
+-rename to V1/conversions/converting.c
+-diff --git a/conversions/converting_header.png b/V1/conversions/converting_header.png
+-similarity index 100%
+-rename from conversions/converting_header.png
+-rename to V1/conversions/converting_header.png
+-diff --git a/conversions/converting_v1.png b/V1/conversions/converting_v1.png
+-similarity index 100%
+-rename from conversions/converting_v1.png
+-rename to V1/conversions/converting_v1.png
+-diff --git a/conversions/converting_v2.png b/V1/conversions/converting_v2.png
+-similarity index 100%
+-rename from conversions/converting_v2.png
+-rename to V1/conversions/converting_v2.png
+-diff --git a/conversions/converting_v3.png b/V1/conversions/converting_v3.png
+-similarity index 100%
+-rename from conversions/converting_v3.png
+-rename to V1/conversions/converting_v3.png
+-diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/V1/fundamentals/PM-Notes-AxtonSmith.docx
+-similarity index 100%
+-rename from fundamentals/PM-Notes-AxtonSmith.docx
+-rename to V1/fundamentals/PM-Notes-AxtonSmith.docx
+-diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+-similarity index 100%
+-rename from fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+-rename to V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+-diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+-similarity index 100%
+-rename from fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+-rename to V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+-diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+-similarity index 100%
+-rename from fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+-rename to V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+-diff --git a/fundamentals/code/.vs/project/v17/.suo b/V1/fundamentals/code/.vs/project/v17/.suo
+-similarity index 100%
+-rename from fundamentals/code/.vs/project/v17/.suo
+-rename to V1/fundamentals/code/.vs/project/v17/.suo
+-diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/V1/fundamentals/code/.vs/project/v17/Browse.VC.db
+-similarity index 100%
+-rename from fundamentals/code/.vs/project/v17/Browse.VC.db
+-rename to V1/fundamentals/code/.vs/project/v17/Browse.VC.db
+-diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/V1/fundamentals/code/.vs/project/v17/Solution.VC.db
+-similarity index 100%
+-rename from fundamentals/code/.vs/project/v17/Solution.VC.db
+-rename to V1/fundamentals/code/.vs/project/v17/Solution.VC.db
+-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+-similarity index 100%
+-rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+-rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+-similarity index 100%
+-rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+-rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+-similarity index 100%
+-rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+-rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+-diff --git a/fundamentals/code/fundamentals.c b/V1/fundamentals/code/fundamentals.c
+-similarity index 100%
+-rename from fundamentals/code/fundamentals.c
+-rename to V1/fundamentals/code/fundamentals.c
+-diff --git a/fundamentals/code/fundamentals.h b/V1/fundamentals/code/fundamentals.h
+-similarity index 100%
+-rename from fundamentals/code/fundamentals.h
+-rename to V1/fundamentals/code/fundamentals.h
+-diff --git a/fundamentals/code/main.c b/V1/fundamentals/code/main.c
+-similarity index 100%
+-rename from fundamentals/code/main.c
+-rename to V1/fundamentals/code/main.c
+-diff --git a/fundamentals/code/project.sln b/V1/fundamentals/code/project.sln
+-similarity index 100%
+-rename from fundamentals/code/project.sln
+-rename to V1/fundamentals/code/project.sln
+-diff --git a/fundamentals/code/project.vcxproj b/V1/fundamentals/code/project.vcxproj
+-similarity index 100%
+-rename from fundamentals/code/project.vcxproj
+-rename to V1/fundamentals/code/project.vcxproj
+-diff --git a/fundamentals/code/project.vcxproj.filters b/V1/fundamentals/code/project.vcxproj.filters
+-similarity index 100%
+-rename from fundamentals/code/project.vcxproj.filters
+-rename to V1/fundamentals/code/project.vcxproj.filters
+-diff --git a/fundamentals/code/project.vcxproj.user b/V1/fundamentals/code/project.vcxproj.user
+-similarity index 100%
+-rename from fundamentals/code/project.vcxproj.user
+-rename to V1/fundamentals/code/project.vcxproj.user
+-diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/V1/fundamentals/code/x64/Debug/fundamentals.obj
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/fundamentals.obj
+-rename to V1/fundamentals/code/x64/Debug/fundamentals.obj
+-diff --git a/fundamentals/code/x64/Debug/main.obj b/V1/fundamentals/code/x64/Debug/main.obj
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/main.obj
+-rename to V1/fundamentals/code/x64/Debug/main.obj
+-diff --git a/fundamentals/code/x64/Debug/project.exe b/V1/fundamentals/code/x64/Debug/project.exe
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.exe
+-rename to V1/fundamentals/code/x64/Debug/project.exe
+-diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/V1/fundamentals/code/x64/Debug/project.exe.recipe
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.exe.recipe
+-rename to V1/fundamentals/code/x64/Debug/project.exe.recipe
+-diff --git a/fundamentals/code/x64/Debug/project.ilk b/V1/fundamentals/code/x64/Debug/project.ilk
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.ilk
+-rename to V1/fundamentals/code/x64/Debug/project.ilk
+-diff --git a/fundamentals/code/x64/Debug/project.log b/V1/fundamentals/code/x64/Debug/project.log
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.log
+-rename to V1/fundamentals/code/x64/Debug/project.log
+-diff --git a/fundamentals/code/x64/Debug/project.pdb b/V1/fundamentals/code/x64/Debug/project.pdb
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.pdb
+-rename to V1/fundamentals/code/x64/Debug/project.pdb
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+-rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+-rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+-rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+-rename to V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+-rename to V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+-rename to V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+-rename to V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+-rename to V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+-diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+-rename to V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+-diff --git a/fundamentals/code/x64/Debug/vc143.idb b/V1/fundamentals/code/x64/Debug/vc143.idb
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/vc143.idb
+-rename to V1/fundamentals/code/x64/Debug/vc143.idb
+-diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/V1/fundamentals/code/x64/Debug/vc143.pdb
+-similarity index 100%
+-rename from fundamentals/code/x64/Debug/vc143.pdb
+-rename to V1/fundamentals/code/x64/Debug/vc143.pdb
+-diff --git a/fundamentals/fundamentals-test-cases.xlsx b/V1/fundamentals/fundamentals-test-cases.xlsx
+-similarity index 100%
+-rename from fundamentals/fundamentals-test-cases.xlsx
+-rename to V1/fundamentals/fundamentals-test-cases.xlsx
+-diff --git a/fundamentals/fundamentals.c b/V1/fundamentals/fundamentals.c
+-similarity index 100%
+-rename from fundamentals/fundamentals.c
+-rename to V1/fundamentals/fundamentals.c
+-diff --git a/fundamentals/fundamentals_header.png b/V1/fundamentals/fundamentals_header.png
+-similarity index 100%
+-rename from fundamentals/fundamentals_header.png
+-rename to V1/fundamentals/fundamentals_header.png
+-diff --git a/fundamentals/fundamentals_v1.png b/V1/fundamentals/fundamentals_v1.png
+-similarity index 100%
+-rename from fundamentals/fundamentals_v1.png
+-rename to V1/fundamentals/fundamentals_v1.png
+-diff --git a/fundamentals/fundamentals_v2.png b/V1/fundamentals/fundamentals_v2.png
+-similarity index 100%
+-rename from fundamentals/fundamentals_v2.png
+-rename to V1/fundamentals/fundamentals_v2.png
+-diff --git a/fundamentals/fundamentals_v3.png b/V1/fundamentals/fundamentals_v3.png
+-similarity index 100%
+-rename from fundamentals/fundamentals_v3.png
+-rename to V1/fundamentals/fundamentals_v3.png
+-diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
+-similarity index 100%
+-rename from fundamentals/v1/PM-Notes-AxtonSmith.docx
+-rename to V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
+-diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/V1/fundamentals/v1/fundamentals-test-cases.xlsx
+-similarity index 100%
+-rename from fundamentals/v1/fundamentals-test-cases.xlsx
+-rename to V1/fundamentals/v1/fundamentals-test-cases.xlsx
+-diff --git a/fundamentals/v1/fundamentals.c b/V1/fundamentals/v1/fundamentals.c
+-similarity index 100%
+-rename from fundamentals/v1/fundamentals.c
+-rename to V1/fundamentals/v1/fundamentals.c
+-diff --git a/fundamentals/v1/fundamentals.h b/V1/fundamentals/v1/fundamentals.h
+-similarity index 100%
+-rename from fundamentals/v1/fundamentals.h
+-rename to V1/fundamentals/v1/fundamentals.h
+-diff --git a/fundamentals/v1/main.c b/V1/fundamentals/v1/main.c
+-similarity index 100%
+-rename from fundamentals/v1/main.c
+-rename to V1/fundamentals/v1/main.c
+-diff --git a/main/converting.c b/V1/main/converting.c
+-similarity index 100%
+-rename from main/converting.c
+-rename to V1/main/converting.c
+-diff --git a/main/converting.h b/V1/main/converting.h
+-similarity index 100%
+-rename from main/converting.h
+-rename to V1/main/converting.h
+-diff --git a/main/fundamentals.c b/V1/main/fundamentals.c
+-similarity index 100%
+-rename from main/fundamentals.c
+-rename to V1/main/fundamentals.c
+-diff --git a/main/fundamentals.h b/V1/main/fundamentals.h
+-similarity index 100%
+-rename from main/fundamentals.h
+-rename to V1/main/fundamentals.h
+-diff --git a/main/main.c b/V1/main/main.c
+-similarity index 100%
+-rename from main/main.c
+-rename to V1/main/main.c
+-diff --git a/main/manipulating.c b/V1/main/manipulating.c
+-similarity index 100%
+-rename from main/manipulating.c
+-rename to V1/main/manipulating.c
+-diff --git a/main/manipulating.h b/V1/main/manipulating.h
+-similarity index 100%
+-rename from main/manipulating.h
+-rename to V1/main/manipulating.h
+-diff --git a/main/tokenizing.c b/V1/main/tokenizing.c
+-similarity index 100%
+-rename from main/tokenizing.c
+-rename to V1/main/tokenizing.c
+-diff --git a/main/tokenizing.h b/V1/main/tokenizing.h
+-similarity index 100%
+-rename from main/tokenizing.h
+-rename to V1/main/tokenizing.h
+-diff --git a/manipulation/PM-Notes-Brandon-Doray.docx b/V1/manipulation/PM-Notes-Brandon-Doray.docx
+-similarity index 100%
+-rename from manipulation/PM-Notes-Brandon-Doray.docx
+-rename to V1/manipulation/PM-Notes-Brandon-Doray.docx
+-diff --git a/manipulation/manipulatemain.c b/V1/manipulation/manipulatemain.c
+-similarity index 100%
+-rename from manipulation/manipulatemain.c
+-rename to V1/manipulation/manipulatemain.c
+-diff --git a/manipulation/manipulating.c b/V1/manipulation/manipulating.c
+-similarity index 100%
+-rename from manipulation/manipulating.c
+-rename to V1/manipulation/manipulating.c
+-diff --git a/manipulation/manipulating.h b/V1/manipulation/manipulating.h
+-similarity index 100%
+-rename from manipulation/manipulating.h
+-rename to V1/manipulation/manipulating.h
+-diff --git a/manipulation/manipulation-test-cases.xlsx b/V1/manipulation/manipulation-test-cases.xlsx
+-similarity index 100%
+-rename from manipulation/manipulation-test-cases.xlsx
+-rename to V1/manipulation/manipulation-test-cases.xlsx
+-diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/V1/tokenizing/PM-Notes-DarianGrijalba.docx
+-similarity index 100%
+-rename from tokenizing/PM-Notes-DarianGrijalba.docx
+-rename to V1/tokenizing/PM-Notes-DarianGrijalba.docx
+-diff --git a/tokenizing/tokenizing.c b/V1/tokenizing/tokenizing.c
+-similarity index 100%
+-rename from tokenizing/tokenizing.c
+-rename to V1/tokenizing/tokenizing.c
+-diff --git a/tokenizing/tokenizing.h b/V1/tokenizing/tokenizing.h
+-similarity index 100%
+-rename from tokenizing/tokenizing.h
+-rename to V1/tokenizing/tokenizing.h
+-
+-commit 0ec0097d57c6a5d87103780c4dc8f8e6d3cc45df
+-Author: Axton Smith <axtonsmith@gmail.com>
+-Date:   Fri Dec 8 17:52:55 2023 -0500
+-
+-    Fix file path in manipulation directory
+-
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
+-deleted file mode 100644
+-index ce82fd8..0000000
+-Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo and /dev/null differ
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
+-deleted file mode 100644
+-index 95cfcc7..0000000
+-Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db and /dev/null differ
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
+-deleted file mode 100644
+-index b2ba1dc..0000000
+-Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db and /dev/null differ
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/PM-Notes-Brandon-Doray.docx
+-similarity index 100%
+-rename from manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
+-rename to manipulation/PM-Notes-Brandon-Doray.docx
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/manipulatemain.c
+-similarity index 100%
+-rename from manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
+-rename to manipulation/manipulatemain.c
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/manipulating.c
+-similarity index 100%
+-rename from manipulation/Manipulation V1/Manipulation V1/manipulating.c
+-rename to manipulation/manipulating.c
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/manipulating.h
+-similarity index 100%
+-rename from manipulation/Manipulation V1/Manipulation V1/manipulating.h
+-rename to manipulation/manipulating.h
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/manipulation-test-cases.xlsx
+-similarity index 100%
+-rename from manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
+-rename to manipulation/manipulation-test-cases.xlsx
+-
+-commit e40dd3d033d7164d96f9fa0ffe2668ffeb2ccfed
+-Author: Axton Smith <axtonsmith@gmail.com>
+-Date:   Fri Dec 8 17:52:00 2023 -0500
+-
+-    Add V1 files
+-
+-diff --git a/conversions/PM-Notes-AxtonSmith.docx b/conversions/PM-Notes-AxtonSmith.docx
+-new file mode 100644
+-index 0000000..dc61b8f
+---- /dev/null
+-+++ b/conversions/PM-Notes-AxtonSmith.docx
+-@@ -0,0 +1,4 @@
+-+Conversion Module
+-+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+-+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+-+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+-diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+-new file mode 100644
+-index 0000000..70aef67
+-Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx differ
+-diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+-new file mode 100644
+-index 0000000..2b75f1d
+-Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx differ
+-diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+-new file mode 100644
+-index 0000000..70aef67
+-Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx differ
+-diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+-new file mode 100644
+-index 0000000..70aef67
+-Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx differ
+-diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+-new file mode 100644
+-index 0000000..70aef67
+-Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx differ
+-diff --git a/conversions/code/.vs/v1/v17/.suo b/conversions/code/.vs/v1/v17/.suo
+-new file mode 100644
+-index 0000000..218f706
+-Binary files /dev/null and b/conversions/code/.vs/v1/v17/.suo differ
+-diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/conversions/code/.vs/v1/v17/Browse.VC.db
+-new file mode 100644
+-index 0000000..086de7c
+-Binary files /dev/null and b/conversions/code/.vs/v1/v17/Browse.VC.db differ
+-diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/conversions/code/.vs/v1/v17/Solution.VC.db
+-new file mode 100644
+-index 0000000..da0fe73
+-Binary files /dev/null and b/conversions/code/.vs/v1/v17/Solution.VC.db differ
+-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+-new file mode 100644
+-index 0000000..137cd6f
+-Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch differ
+-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+-new file mode 100644
+-index 0000000..e7b304a
+-Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch differ
+-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+-new file mode 100644
+-index 0000000..934be31
+-Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch differ
+-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+-new file mode 100644
+-index 0000000..937325b
+-Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch differ
+-diff --git a/conversions/code/converting.c b/conversions/code/converting.c
+-new file mode 100644
+-index 0000000..dc92171
+---- /dev/null
+-+++ b/conversions/code/converting.c
+-@@ -0,0 +1,34 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+
+-+#include "converting.h"
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting() {
+-+/* Version 1 */
+-+	printf("*** Start of Converting Strings to int Demo ***\n");
+-+	char intString[BUFFER_SIZE];
+-+	int intNumber;
+-+	do
+-+	{
+-+		printf("Type an int numeric string (q - to quit):\n");
+-+		fgets(intString, BUFFER_SIZE, stdin);
+-+		intString[strlen(intString) - 1] = '\0';
+-+		if (strcmp(intString, "q") != 0)
+-+		{
+-+			intNumber = atoi(intString);
+-+			printf("Converted number is %d\n", intNumber);
+-+		}
+-+	}
+-+	while (strcmp(intString, "q") != 0);
+-+	printf("*** End of Converting Strings to int Demo ***\n\n");
+-+
+-+/* Version 2 */
+-+//>> insert here
+-+
+-+
+-+/* Version 3 */
+-+//>> insert here
+-+
+-+
+-+}
+-diff --git a/conversions/code/converting.h b/conversions/code/converting.h
+-new file mode 100644
+-index 0000000..94e86ab
+---- /dev/null
+-+++ b/conversions/code/converting.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _CONVERTING_H_
+-+#define _CONVERTING_H_
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+#include <stdlib.h>
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/conversions/code/main.c b/conversions/code/main.c
+-new file mode 100644
+-index 0000000..6a8e436
+---- /dev/null
+-+++ b/conversions/code/main.c
+-@@ -0,0 +1,7 @@
+-+#include "converting.h"
+-+
+-+int main(void)
+-+{
+-+	converting();
+-+	return 0;
+-+}
+-\ No newline at end of file
+-diff --git a/conversions/code/v1.sln b/conversions/code/v1.sln
+-new file mode 100644
+-index 0000000..57619b4
+---- /dev/null
+-+++ b/conversions/code/v1.sln
+-@@ -0,0 +1,31 @@
+-+ï»¿
+-+Microsoft Visual Studio Solution File, Format Version 12.00
+-+# Visual Studio Version 17
+-+VisualStudioVersion = 17.8.34322.80
+-+MinimumVisualStudioVersion = 10.0.40219.1
+-+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "v1", "v1.vcxproj", "{DFCFF08A-27BA-4895-81DE-69DA151B79DB}"
+-+EndProject
+-+Global
+-+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+-+		Debug|x64 = Debug|x64
+-+		Debug|x86 = Debug|x86
+-+		Release|x64 = Release|x64
+-+		Release|x86 = Release|x86
+-+	EndGlobalSection
+-+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.ActiveCfg = Debug|x64
+-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.Build.0 = Debug|x64
+-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.ActiveCfg = Debug|Win32
+-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.Build.0 = Debug|Win32
+-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.ActiveCfg = Release|x64
+-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.Build.0 = Release|x64
+-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.ActiveCfg = Release|Win32
+-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.Build.0 = Release|Win32
+-+	EndGlobalSection
+-+	GlobalSection(SolutionProperties) = preSolution
+-+		HideSolutionNode = FALSE
+-+	EndGlobalSection
+-+	GlobalSection(ExtensibilityGlobals) = postSolution
+-+		SolutionGuid = {FB5DDBE1-4B86-462E-8A71-FBB6C215BD41}
+-+	EndGlobalSection
+-+EndGlobal
+-diff --git a/conversions/code/v1.vcxproj b/conversions/code/v1.vcxproj
+-new file mode 100644
+-index 0000000..8a35f16
+---- /dev/null
+-+++ b/conversions/code/v1.vcxproj
+-@@ -0,0 +1,139 @@
+-+<?xml version="1.0" encoding="utf-8"?>
+-+<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+-+  <ItemGroup Label="ProjectConfigurations">
+-+    <ProjectConfiguration Include="Debug|Win32">
+-+      <Configuration>Debug</Configuration>
+-+      <Platform>Win32</Platform>
+-+    </ProjectConfiguration>
+-+    <ProjectConfiguration Include="Release|Win32">
+-+      <Configuration>Release</Configuration>
+-+      <Platform>Win32</Platform>
+-+    </ProjectConfiguration>
+-+    <ProjectConfiguration Include="Debug|x64">
+-+      <Configuration>Debug</Configuration>
+-+      <Platform>x64</Platform>
+-+    </ProjectConfiguration>
+-+    <ProjectConfiguration Include="Release|x64">
+-+      <Configuration>Release</Configuration>
+-+      <Platform>x64</Platform>
+-+    </ProjectConfiguration>
+-+  </ItemGroup>
+-+  <PropertyGroup Label="Globals">
+-+    <VCProjectVersion>17.0</VCProjectVersion>
+-+    <Keyword>Win32Proj</Keyword>
+-+    <ProjectGuid>{dfcff08a-27ba-4895-81de-69da151b79db}</ProjectGuid>
+-+    <RootNamespace>v1</RootNamespace>
+-+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
+-+  </PropertyGroup>
+-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
+-+    <ConfigurationType>Application</ConfigurationType>
+-+    <UseDebugLibraries>true</UseDebugLibraries>
+-+    <PlatformToolset>v143</PlatformToolset>
+-+    <CharacterSet>Unicode</CharacterSet>
+-+  </PropertyGroup>
+-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
+-+    <ConfigurationType>Application</ConfigurationType>
+-+    <UseDebugLibraries>false</UseDebugLibraries>
+-+    <PlatformToolset>v143</PlatformToolset>
+-+    <WholeProgramOptimization>true</WholeProgramOptimization>
+-+    <CharacterSet>Unicode</CharacterSet>
+-+  </PropertyGroup>
+-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+-+    <ConfigurationType>Application</ConfigurationType>
+-+    <UseDebugLibraries>true</UseDebugLibraries>
+-+    <PlatformToolset>v143</PlatformToolset>
+-+    <CharacterSet>Unicode</CharacterSet>
+-+  </PropertyGroup>
+-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+-+    <ConfigurationType>Application</ConfigurationType>
+-+    <UseDebugLibraries>false</UseDebugLibraries>
+-+    <PlatformToolset>v143</PlatformToolset>
+-+    <WholeProgramOptimization>true</WholeProgramOptimization>
+-+    <CharacterSet>Unicode</CharacterSet>
+-+  </PropertyGroup>
+-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+-+  <ImportGroup Label="ExtensionSettings">
+-+  </ImportGroup>
+-+  <ImportGroup Label="Shared">
+-+  </ImportGroup>
+-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+-+  </ImportGroup>
+-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+-+  </ImportGroup>
+-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+-+  </ImportGroup>
+-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+-+  </ImportGroup>
+-+  <PropertyGroup Label="UserMacros" />
+-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+-+    <ClCompile>
+-+      <WarningLevel>Level3</WarningLevel>
+-+      <SDLCheck>true</SDLCheck>
+-+      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+-+      <ConformanceMode>true</ConformanceMode>
+-+    </ClCompile>
+-+    <Link>
+-+      <SubSystem>Console</SubSystem>
+-+      <GenerateDebugInformation>true</GenerateDebugInformation>
+-+    </Link>
+-+  </ItemDefinitionGroup>
+-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+-+    <ClCompile>
+-+      <WarningLevel>Level3</WarningLevel>
+-+      <FunctionLevelLinking>true</FunctionLevelLinking>
+-+      <IntrinsicFunctions>true</IntrinsicFunctions>
+-+      <SDLCheck>true</SDLCheck>
+-+      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+-+      <ConformanceMode>true</ConformanceMode>
+-+    </ClCompile>
+-+    <Link>
+-+      <SubSystem>Console</SubSystem>
+-+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+-+      <OptimizeReferences>true</OptimizeReferences>
+-+      <GenerateDebugInformation>true</GenerateDebugInformation>
+-+    </Link>
+-+  </ItemDefinitionGroup>
+-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+-+    <ClCompile>
+-+      <WarningLevel>Level3</WarningLevel>
+-+      <SDLCheck>true</SDLCheck>
+-+      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+-+      <ConformanceMode>true</ConformanceMode>
+-+    </ClCompile>
+-+    <Link>
+-+      <SubSystem>Console</SubSystem>
+-+      <GenerateDebugInformation>true</GenerateDebugInformation>
+-+    </Link>
+-+  </ItemDefinitionGroup>
+-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+-+    <ClCompile>
+-+      <WarningLevel>Level3</WarningLevel>
+-+      <FunctionLevelLinking>true</FunctionLevelLinking>
+-+      <IntrinsicFunctions>true</IntrinsicFunctions>
+-+      <SDLCheck>true</SDLCheck>
+-+      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+-+      <ConformanceMode>true</ConformanceMode>
+-+    </ClCompile>
+-+    <Link>
+-+      <SubSystem>Console</SubSystem>
+-+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+-+      <OptimizeReferences>true</OptimizeReferences>
+-+      <GenerateDebugInformation>true</GenerateDebugInformation>
+-+    </Link>
+-+  </ItemDefinitionGroup>
+-+  <ItemGroup>
+-+    <ClCompile Include="converting.c" />
+-+    <ClCompile Include="main.c" />
+-+  </ItemGroup>
+-+  <ItemGroup>
+-+    <ClInclude Include="converting.h" />
+-+  </ItemGroup>
+-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+-+  <ImportGroup Label="ExtensionTargets">
+-+  </ImportGroup>
+-+</Project>
+-\ No newline at end of file
+-diff --git a/conversions/code/v1.vcxproj.filters b/conversions/code/v1.vcxproj.filters
+-new file mode 100644
+-index 0000000..7ba9ae0
+---- /dev/null
+-+++ b/conversions/code/v1.vcxproj.filters
+-@@ -0,0 +1,30 @@
+-+ï»¿<?xml version="1.0" encoding="utf-8"?>
+-+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+-+  <ItemGroup>
+-+    <Filter Include="Source Files">
+-+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+-+      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+-+    </Filter>
+-+    <Filter Include="Header Files">
+-+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+-+      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
+-+    </Filter>
+-+    <Filter Include="Resource Files">
+-+      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
+-+      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
+-+    </Filter>
+-+  </ItemGroup>
+-+  <ItemGroup>
+-+    <ClCompile Include="converting.c">
+-+      <Filter>Source Files</Filter>
+-+    </ClCompile>
+-+    <ClCompile Include="main.c">
+-+      <Filter>Source Files</Filter>
+-+    </ClCompile>
+-+  </ItemGroup>
+-+  <ItemGroup>
+-+    <ClInclude Include="converting.h">
+-+      <Filter>Header Files</Filter>
+-+    </ClInclude>
+-+  </ItemGroup>
+-+</Project>
+-\ No newline at end of file
+-diff --git a/conversions/code/v1.vcxproj.user b/conversions/code/v1.vcxproj.user
+-new file mode 100644
+-index 0000000..88a5509
+---- /dev/null
+-+++ b/conversions/code/v1.vcxproj.user
+-@@ -0,0 +1,4 @@
+-+ï»¿<?xml version="1.0" encoding="utf-8"?>
+-+<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+-+  <PropertyGroup />
+-+</Project>
+-\ No newline at end of file
+-diff --git a/conversions/code/x64/Debug/converting.obj b/conversions/code/x64/Debug/converting.obj
+-new file mode 100644
+-index 0000000..3c059c8
+-Binary files /dev/null and b/conversions/code/x64/Debug/converting.obj differ
+-diff --git a/conversions/code/x64/Debug/main.obj b/conversions/code/x64/Debug/main.obj
+-new file mode 100644
+-index 0000000..752fab6
+-Binary files /dev/null and b/conversions/code/x64/Debug/main.obj differ
+-diff --git a/conversions/code/x64/Debug/v1.exe b/conversions/code/x64/Debug/v1.exe
+-new file mode 100644
+-index 0000000..657c946
+-Binary files /dev/null and b/conversions/code/x64/Debug/v1.exe differ
+-diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/conversions/code/x64/Debug/v1.exe.recipe
+-new file mode 100644
+-index 0000000..69be474
+---- /dev/null
+-+++ b/conversions/code/x64/Debug/v1.exe.recipe
+-@@ -0,0 +1,11 @@
+-+ï»¿<?xml version="1.0" encoding="utf-8"?>
+-+<Project>
+-+  <ProjectOutputs>
+-+    <ProjectOutput>
+-+      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe</FullPath>
+-+    </ProjectOutput>
+-+  </ProjectOutputs>
+-+  <ContentFiles />
+-+  <SatelliteDlls />
+-+  <NonRecipeFileRefs />
+-+</Project>
+-\ No newline at end of file
+-diff --git a/conversions/code/x64/Debug/v1.ilk b/conversions/code/x64/Debug/v1.ilk
+-new file mode 100644
+-index 0000000..18b8f11
+-Binary files /dev/null and b/conversions/code/x64/Debug/v1.ilk differ
+-diff --git a/conversions/code/x64/Debug/v1.log b/conversions/code/x64/Debug/v1.log
+-new file mode 100644
+-index 0000000..d6ecd4a
+---- /dev/null
+-+++ b/conversions/code/x64/Debug/v1.log
+-@@ -0,0 +1,2 @@
+-+ï»¿  main.c
+-+  v1.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
+-diff --git a/conversions/code/x64/Debug/v1.pdb b/conversions/code/x64/Debug/v1.pdb
+-new file mode 100644
+-index 0000000..e2f8b05
+-Binary files /dev/null and b/conversions/code/x64/Debug/v1.pdb differ
+-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+-new file mode 100644
+-index 0000000..0f0f942
+-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog differ
+-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+-new file mode 100644
+-index 0000000..54a5e77
+-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog differ
+-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+-new file mode 100644
+-index 0000000..c1bc96f
+-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog differ
+-diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+-new file mode 100644
+-index 0000000..8b2c0bc
+---- /dev/null
+-+++ b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+-@@ -0,0 +1,2 @@
+-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\converting.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\converting.obj
+-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\main.obj
+-diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+-new file mode 100644
+-index 0000000..a7a084f
+-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog differ
+-diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+-new file mode 100644
+-index 0000000..3761899
+-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog differ
+-diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+-new file mode 100644
+-index 0000000..fa10a23
+-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog differ
+-diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+-new file mode 100644
+-index 0000000..fe1494c
+---- /dev/null
+-+++ b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+-@@ -0,0 +1,2 @@
+-+PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
+-+Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\|
+-diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+-new file mode 100644
+-index 0000000..2da24f7
+---- /dev/null
+-+++ b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+-@@ -0,0 +1 @@
+-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
+-diff --git a/conversions/code/x64/Debug/vc143.idb b/conversions/code/x64/Debug/vc143.idb
+-new file mode 100644
+-index 0000000..1fcdfe4
+-Binary files /dev/null and b/conversions/code/x64/Debug/vc143.idb differ
+-diff --git a/conversions/code/x64/Debug/vc143.pdb b/conversions/code/x64/Debug/vc143.pdb
+-new file mode 100644
+-index 0000000..2e1256c
+-Binary files /dev/null and b/conversions/code/x64/Debug/vc143.pdb differ
+-diff --git a/conversions/conversions-test-cases.xlsx b/conversions/conversions-test-cases.xlsx
+-new file mode 100644
+-index 0000000..657486d
+-Binary files /dev/null and b/conversions/conversions-test-cases.xlsx differ
+-diff --git a/conversions/conversionsV1.zip b/conversions/conversionsV1.zip
+-new file mode 100644
+-index 0000000..ea57e7e
+-Binary files /dev/null and b/conversions/conversionsV1.zip differ
+-diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+-new file mode 100644
+-index 0000000..dc61b8f
+---- /dev/null
+-+++ b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+-@@ -0,0 +1,4 @@
+-+Conversion Module
+-+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+-+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+-+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+-diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/conversions/conversionsV1/conversions-test-cases.xlsx
+-new file mode 100644
+-index 0000000..a2cffb9
+-Binary files /dev/null and b/conversions/conversionsV1/conversions-test-cases.xlsx differ
+-diff --git a/conversions/conversionsV1/converting.c b/conversions/conversionsV1/converting.c
+-new file mode 100644
+-index 0000000..dc92171
+---- /dev/null
+-+++ b/conversions/conversionsV1/converting.c
+-@@ -0,0 +1,34 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+
+-+#include "converting.h"
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting() {
+-+/* Version 1 */
+-+	printf("*** Start of Converting Strings to int Demo ***\n");
+-+	char intString[BUFFER_SIZE];
+-+	int intNumber;
+-+	do
+-+	{
+-+		printf("Type an int numeric string (q - to quit):\n");
+-+		fgets(intString, BUFFER_SIZE, stdin);
+-+		intString[strlen(intString) - 1] = '\0';
+-+		if (strcmp(intString, "q") != 0)
+-+		{
+-+			intNumber = atoi(intString);
+-+			printf("Converted number is %d\n", intNumber);
+-+		}
+-+	}
+-+	while (strcmp(intString, "q") != 0);
+-+	printf("*** End of Converting Strings to int Demo ***\n\n");
+-+
+-+/* Version 2 */
+-+//>> insert here
+-+
+-+
+-+/* Version 3 */
+-+//>> insert here
+-+
+-+
+-+}
+-diff --git a/conversions/conversionsV1/converting.h b/conversions/conversionsV1/converting.h
+-new file mode 100644
+-index 0000000..94e86ab
+---- /dev/null
+-+++ b/conversions/conversionsV1/converting.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _CONVERTING_H_
+-+#define _CONVERTING_H_
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+#include <stdlib.h>
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/conversions/conversionsV1/main.c b/conversions/conversionsV1/main.c
+-new file mode 100644
+-index 0000000..6a8e436
+---- /dev/null
+-+++ b/conversions/conversionsV1/main.c
+-@@ -0,0 +1,7 @@
+-+#include "converting.h"
+-+
+-+int main(void)
+-+{
+-+	converting();
+-+	return 0;
+-+}
+-\ No newline at end of file
+-diff --git a/conversions/converting.c b/conversions/converting.c
+-new file mode 100644
+-index 0000000..88b340e
+---- /dev/null
+-+++ b/conversions/converting.c
+-@@ -0,0 +1,16 @@
+-+#include "converting.h"
+-+
+-+void converting() {
+-+/* Version 1 */
+-+>> insert here
+-+
+-+
+-+/* Version 2 */
+-+>> insert here
+-+
+-+
+-+/* Version 3 */
+-+>> insert here
+-+
+-+
+-+}
+-diff --git a/conversions/converting_header.png b/conversions/converting_header.png
+-new file mode 100644
+-index 0000000..4ffb3a8
+-Binary files /dev/null and b/conversions/converting_header.png differ
+-diff --git a/conversions/converting_v1.png b/conversions/converting_v1.png
+-new file mode 100644
+-index 0000000..50f5734
+-Binary files /dev/null and b/conversions/converting_v1.png differ
+-diff --git a/conversions/converting_v2.png b/conversions/converting_v2.png
+-new file mode 100644
+-index 0000000..edcdf1e
+-Binary files /dev/null and b/conversions/converting_v2.png differ
+-diff --git a/conversions/converting_v3.png b/conversions/converting_v3.png
+-new file mode 100644
+-index 0000000..146285f
+-Binary files /dev/null and b/conversions/converting_v3.png differ
+-diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/fundamentals/PM-Notes-AxtonSmith.docx
+-new file mode 100644
+-index 0000000..835d958
+---- /dev/null
+-+++ b/fundamentals/PM-Notes-AxtonSmith.docx
+-@@ -0,0 +1,4 @@
+-+Fundamentals Module V1
+-+The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
+-+Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
+-+Negative cases will be any negative index and indexes beyond the max length of the string.
+-diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+-new file mode 100644
+-index 0000000..07098b6
+-Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx differ
+-diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+-new file mode 100644
+-index 0000000..70aef67
+-Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx differ
+-diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+-new file mode 100644
+-index 0000000..70aef67
+-Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx differ
+-diff --git a/fundamentals/code/.vs/project/v17/.suo b/fundamentals/code/.vs/project/v17/.suo
+-new file mode 100644
+-index 0000000..bcfd53a
+-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/.suo differ
+-diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/fundamentals/code/.vs/project/v17/Browse.VC.db
+-new file mode 100644
+-index 0000000..bcda23d
+-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Browse.VC.db differ
+-diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/fundamentals/code/.vs/project/v17/Solution.VC.db
+-new file mode 100644
+-index 0000000..4478989
+-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Solution.VC.db differ
+-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+-new file mode 100644
+-index 0000000..14c2062
+-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch differ
+-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+-new file mode 100644
+-index 0000000..eb24263
+-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch differ
+-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+-new file mode 100644
+-index 0000000..1d0afbc
+-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch differ
+-diff --git a/fundamentals/code/fundamentals.c b/fundamentals/code/fundamentals.c
+-new file mode 100644
+-index 0000000..1215375
+---- /dev/null
+-+++ b/fundamentals/code/fundamentals.c
+-@@ -0,0 +1,40 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+#define NUM_INPUT_SIZE 10
+-+
+-+#include "fundamentals.h"
+-+
+-+// Takes a string input from user, then an index number and returns the character at that index of the string
+-+void fundamentals() {
+-+/* Version 1 */
+-+	printf("*** Start of Indexing Strings Demo ***\n");
+-+	char buffer1[BUFFER_SIZE];
+-+	char numInput[NUM_INPUT_SIZE];
+-+	size_t position;
+-+	do
+-+	{
+-+		printf("Type not empty string (q - to quit):\n");
+-+		fgets(buffer1, BUFFER_SIZE, stdin);
+-+		buffer1[strlen(buffer1) - 1] = '\0';
+-+		if (strcmp(buffer1, "q") != 0)
+-+		{
+-+			printf("Type the character position within the string:\n");
+-+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+-+			numInput[strlen(numInput) - 1] = '\0';
+-+			position = atoi(numInput);
+-+			if (position >= strlen(buffer1))
+-+			{
+-+				position = strlen(buffer1) - 1;
+-+				printf("Too big... Position reduced to max. available\n");
+-+			}
+-+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+-+		}
+-+	} while (strcmp(buffer1, "q") != 0);
+-+	printf("*** End of Indexing Strings Demo ***\n\n");
+-+
+-+	/* Version 2 */
+-+	//>> insert here
+-+
+-+	/* Version 3 */
+-+	//>> insert here
+-+}
+-\ No newline at end of file
+-diff --git a/fundamentals/code/fundamentals.h b/fundamentals/code/fundamentals.h
+-new file mode 100644
+-index 0000000..14a6f4f
+---- /dev/null
+-+++ b/fundamentals/code/fundamentals.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _FUNDAMENTALS_H_
+-+#define _FUNDAMENTALS_H_
+-+
+-+#include <stdio.h>
+-+#include <stdlib.h>
+-+#include <string.h>
+-+
+-+// Takes a string input from user, then an index number and returns the character at that index of the string
+-+void fundamentals(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/fundamentals/code/main.c b/fundamentals/code/main.c
+-new file mode 100644
+-index 0000000..1225e71
+---- /dev/null
+-+++ b/fundamentals/code/main.c
+-@@ -0,0 +1,7 @@
+-+#include "fundamentals.h"
+-+
+-+int main(void)
+-+{
+-+	fundamentals();
+-+	return 0;
+-+}
+-\ No newline at end of file
+-diff --git a/fundamentals/code/project.sln b/fundamentals/code/project.sln
+-new file mode 100644
+-index 0000000..0a8bb0d
+---- /dev/null
+-+++ b/fundamentals/code/project.sln
+-@@ -0,0 +1,31 @@
+-+ï»¿
+-+Microsoft Visual Studio Solution File, Format Version 12.00
+-+# Visual Studio Version 17
+-+VisualStudioVersion = 17.8.34322.80
+-+MinimumVisualStudioVersion = 10.0.40219.1
+-+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "project", "project.vcxproj", "{AF362EDA-E3C1-4C36-9746-825F3A16C279}"
+-+EndProject
+-+Global
+-+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+-+		Debug|x64 = Debug|x64
+-+		Debug|x86 = Debug|x86
+-+		Release|x64 = Release|x64
+-+		Release|x86 = Release|x86
+-+	EndGlobalSection
+-+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.ActiveCfg = Debug|x64
+-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.Build.0 = Debug|x64
+-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.ActiveCfg = Debug|Win32
+-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.Build.0 = Debug|Win32
+-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.ActiveCfg = Release|x64
+-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.Build.0 = Release|x64
+-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.ActiveCfg = Release|Win32
+-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.Build.0 = Release|Win32
+-+	EndGlobalSection
+-+	GlobalSection(SolutionProperties) = preSolution
+-+		HideSolutionNode = FALSE
+-+	EndGlobalSection
+-+	GlobalSection(ExtensibilityGlobals) = postSolution
+-+		SolutionGuid = {189AD194-2992-420A-9AC7-B6C34003EBD9}
+-+	EndGlobalSection
+-+EndGlobal
+-diff --git a/fundamentals/code/project.vcxproj b/fundamentals/code/project.vcxproj
+-new file mode 100644
+-index 0000000..b4a7699
+---- /dev/null
+-+++ b/fundamentals/code/project.vcxproj
+-@@ -0,0 +1,139 @@
+-+<?xml version="1.0" encoding="utf-8"?>
+-+<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+-+  <ItemGroup Label="ProjectConfigurations">
+-+    <ProjectConfiguration Include="Debug|Win32">
+-+      <Configuration>Debug</Configuration>
+-+      <Platform>Win32</Platform>
+-+    </ProjectConfiguration>
+-+    <ProjectConfiguration Include="Release|Win32">
+-+      <Configuration>Release</Configuration>
+-+      <Platform>Win32</Platform>
+-+    </ProjectConfiguration>
+-+    <ProjectConfiguration Include="Debug|x64">
+-+      <Configuration>Debug</Configuration>
+-+      <Platform>x64</Platform>
+-+    </ProjectConfiguration>
+-+    <ProjectConfiguration Include="Release|x64">
+-+      <Configuration>Release</Configuration>
+-+      <Platform>x64</Platform>
+-+    </ProjectConfiguration>
+-+  </ItemGroup>
+-+  <PropertyGroup Label="Globals">
+-+    <VCProjectVersion>17.0</VCProjectVersion>
+-+    <Keyword>Win32Proj</Keyword>
+-+    <ProjectGuid>{af362eda-e3c1-4c36-9746-825f3a16c279}</ProjectGuid>
+-+    <RootNamespace>project</RootNamespace>
+-+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
+-+  </PropertyGroup>
+-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
+-+    <ConfigurationType>Application</ConfigurationType>
+-+    <UseDebugLibraries>true</UseDebugLibraries>
+-+    <PlatformToolset>v143</PlatformToolset>
+-+    <CharacterSet>Unicode</CharacterSet>
+-+  </PropertyGroup>
+-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
+-+    <ConfigurationType>Application</ConfigurationType>
+-+    <UseDebugLibraries>false</UseDebugLibraries>
+-+    <PlatformToolset>v143</PlatformToolset>
+-+    <WholeProgramOptimization>true</WholeProgramOptimization>
+-+    <CharacterSet>Unicode</CharacterSet>
+-+  </PropertyGroup>
+-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+-+    <ConfigurationType>Application</ConfigurationType>
+-+    <UseDebugLibraries>true</UseDebugLibraries>
+-+    <PlatformToolset>v143</PlatformToolset>
+-+    <CharacterSet>Unicode</CharacterSet>
+-+  </PropertyGroup>
+-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+-+    <ConfigurationType>Application</ConfigurationType>
+-+    <UseDebugLibraries>false</UseDebugLibraries>
+-+    <PlatformToolset>v143</PlatformToolset>
+-+    <WholeProgramOptimization>true</WholeProgramOptimization>
+-+    <CharacterSet>Unicode</CharacterSet>
+-+  </PropertyGroup>
+-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+-+  <ImportGroup Label="ExtensionSettings">
+-+  </ImportGroup>
+-+  <ImportGroup Label="Shared">
+-+  </ImportGroup>
+-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+-+  </ImportGroup>
+-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+-+  </ImportGroup>
+-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+-+  </ImportGroup>
+-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+-+  </ImportGroup>
+-+  <PropertyGroup Label="UserMacros" />
+-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+-+    <ClCompile>
+-+      <WarningLevel>Level3</WarningLevel>
+-+      <SDLCheck>true</SDLCheck>
+-+      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+-+      <ConformanceMode>true</ConformanceMode>
+-+    </ClCompile>
+-+    <Link>
+-+      <SubSystem>Console</SubSystem>
+-+      <GenerateDebugInformation>true</GenerateDebugInformation>
+-+    </Link>
+-+  </ItemDefinitionGroup>
+-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+-+    <ClCompile>
+-+      <WarningLevel>Level3</WarningLevel>
+-+      <FunctionLevelLinking>true</FunctionLevelLinking>
+-+      <IntrinsicFunctions>true</IntrinsicFunctions>
+-+      <SDLCheck>true</SDLCheck>
+-+      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+-+      <ConformanceMode>true</ConformanceMode>
+-+    </ClCompile>
+-+    <Link>
+-+      <SubSystem>Console</SubSystem>
+-+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+-+      <OptimizeReferences>true</OptimizeReferences>
+-+      <GenerateDebugInformation>true</GenerateDebugInformation>
+-+    </Link>
+-+  </ItemDefinitionGroup>
+-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+-+    <ClCompile>
+-+      <WarningLevel>Level3</WarningLevel>
+-+      <SDLCheck>true</SDLCheck>
+-+      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+-+      <ConformanceMode>true</ConformanceMode>
+-+    </ClCompile>
+-+    <Link>
+-+      <SubSystem>Console</SubSystem>
+-+      <GenerateDebugInformation>true</GenerateDebugInformation>
+-+    </Link>
+-+  </ItemDefinitionGroup>
+-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+-+    <ClCompile>
+-+      <WarningLevel>Level3</WarningLevel>
+-+      <FunctionLevelLinking>true</FunctionLevelLinking>
+-+      <IntrinsicFunctions>true</IntrinsicFunctions>
+-+      <SDLCheck>true</SDLCheck>
+-+      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+-+      <ConformanceMode>true</ConformanceMode>
+-+    </ClCompile>
+-+    <Link>
+-+      <SubSystem>Console</SubSystem>
+-+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+-+      <OptimizeReferences>true</OptimizeReferences>
+-+      <GenerateDebugInformation>true</GenerateDebugInformation>
+-+    </Link>
+-+  </ItemDefinitionGroup>
+-+  <ItemGroup>
+-+    <ClCompile Include="fundamentals.c" />
+-+    <ClCompile Include="main.c" />
+-+  </ItemGroup>
+-+  <ItemGroup>
+-+    <ClInclude Include="fundamentals.h" />
+-+  </ItemGroup>
+-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+-+  <ImportGroup Label="ExtensionTargets">
+-+  </ImportGroup>
+-+</Project>
+-\ No newline at end of file
+-diff --git a/fundamentals/code/project.vcxproj.filters b/fundamentals/code/project.vcxproj.filters
+-new file mode 100644
+-index 0000000..262ef51
+---- /dev/null
+-+++ b/fundamentals/code/project.vcxproj.filters
+-@@ -0,0 +1,30 @@
+-+ï»¿<?xml version="1.0" encoding="utf-8"?>
+-+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+-+  <ItemGroup>
+-+    <Filter Include="Source Files">
+-+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+-+      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+-+    </Filter>
+-+    <Filter Include="Header Files">
+-+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+-+      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
+-+    </Filter>
+-+    <Filter Include="Resource Files">
+-+      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
+-+      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
+-+    </Filter>
+-+  </ItemGroup>
+-+  <ItemGroup>
+-+    <ClCompile Include="fundamentals.c">
+-+      <Filter>Source Files</Filter>
+-+    </ClCompile>
+-+    <ClCompile Include="main.c">
+-+      <Filter>Source Files</Filter>
+-+    </ClCompile>
+-+  </ItemGroup>
+-+  <ItemGroup>
+-+    <ClInclude Include="fundamentals.h">
+-+      <Filter>Source Files</Filter>
+-+    </ClInclude>
+-+  </ItemGroup>
+-+</Project>
+-\ No newline at end of file
+-diff --git a/fundamentals/code/project.vcxproj.user b/fundamentals/code/project.vcxproj.user
+-new file mode 100644
+-index 0000000..88a5509
+---- /dev/null
+-+++ b/fundamentals/code/project.vcxproj.user
+-@@ -0,0 +1,4 @@
+-+ï»¿<?xml version="1.0" encoding="utf-8"?>
+-+<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+-+  <PropertyGroup />
+-+</Project>
+-\ No newline at end of file
+-diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/fundamentals/code/x64/Debug/fundamentals.obj
+-new file mode 100644
+-index 0000000..861a383
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/fundamentals.obj differ
+-diff --git a/fundamentals/code/x64/Debug/main.obj b/fundamentals/code/x64/Debug/main.obj
+-new file mode 100644
+-index 0000000..412ddd8
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/main.obj differ
+-diff --git a/fundamentals/code/x64/Debug/project.exe b/fundamentals/code/x64/Debug/project.exe
+-new file mode 100644
+-index 0000000..96f3f7c
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.exe differ
+-diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/fundamentals/code/x64/Debug/project.exe.recipe
+-new file mode 100644
+-index 0000000..d15bad6
+---- /dev/null
+-+++ b/fundamentals/code/x64/Debug/project.exe.recipe
+-@@ -0,0 +1,11 @@
+-+ï»¿<?xml version="1.0" encoding="utf-8"?>
+-+<Project>
+-+  <ProjectOutputs>
+-+    <ProjectOutput>
+-+      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe</FullPath>
+-+    </ProjectOutput>
+-+  </ProjectOutputs>
+-+  <ContentFiles />
+-+  <SatelliteDlls />
+-+  <NonRecipeFileRefs />
+-+</Project>
+-\ No newline at end of file
+-diff --git a/fundamentals/code/x64/Debug/project.ilk b/fundamentals/code/x64/Debug/project.ilk
+-new file mode 100644
+-index 0000000..ca8297e
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.ilk differ
+-diff --git a/fundamentals/code/x64/Debug/project.log b/fundamentals/code/x64/Debug/project.log
+-new file mode 100644
+-index 0000000..46cbcf7
+---- /dev/null
+-+++ b/fundamentals/code/x64/Debug/project.log
+-@@ -0,0 +1,4 @@
+-+ï»¿  fundamentals.c
+-+  main.c
+-+  Generating Code...
+-+  project.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
+-diff --git a/fundamentals/code/x64/Debug/project.pdb b/fundamentals/code/x64/Debug/project.pdb
+-new file mode 100644
+-index 0000000..f4c9944
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.pdb differ
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+-new file mode 100644
+-index 0000000..8ce9c43
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog differ
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+-new file mode 100644
+-index 0000000..2466d33
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog differ
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+-new file mode 100644
+-index 0000000..a78224f
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog differ
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+-new file mode 100644
+-index 0000000..3b8784b
+---- /dev/null
+-+++ b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+-@@ -0,0 +1,2 @@
+-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\fundamentals.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\fundamentals.obj
+-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\main.obj
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+-new file mode 100644
+-index 0000000..86df9f0
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog differ
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+-new file mode 100644
+-index 0000000..7a2ed43
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog differ
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+-new file mode 100644
+-index 0000000..a4ba5a7
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog differ
+-diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+-new file mode 100644
+-index 0000000..abb6863
+---- /dev/null
+-+++ b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+-@@ -0,0 +1,2 @@
+-+PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
+-+Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\|
+-diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+-new file mode 100644
+-index 0000000..3ccaa35
+---- /dev/null
+-+++ b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+-@@ -0,0 +1,2 @@
+-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\fundamentals\v1\project\x64\Debug\project.exe
+-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
+-diff --git a/fundamentals/code/x64/Debug/vc143.idb b/fundamentals/code/x64/Debug/vc143.idb
+-new file mode 100644
+-index 0000000..6700a8c
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.idb differ
+-diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/fundamentals/code/x64/Debug/vc143.pdb
+-new file mode 100644
+-index 0000000..88847b7
+-Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.pdb differ
+-diff --git a/fundamentals/fundamentals-test-cases.xlsx b/fundamentals/fundamentals-test-cases.xlsx
+-new file mode 100644
+-index 0000000..d625c15
+-Binary files /dev/null and b/fundamentals/fundamentals-test-cases.xlsx differ
+-diff --git a/fundamentals/fundamentals.c b/fundamentals/fundamentals.c
+-new file mode 100644
+-index 0000000..172438a
+---- /dev/null
+-+++ b/fundamentals/fundamentals.c
+-@@ -0,0 +1,16 @@
+-+#include "fundamentals.h"
+-+
+-+void fundamentals() {
+-+/* Version 1 */
+-+>> insert here
+-+
+-+
+-+/* Version 2 */
+-+>> insert here
+-+
+-+
+-+/* Version 3 */
+-+>> insert here
+-+
+-+
+-+}
+-\ No newline at end of file
+-diff --git a/fundamentals/fundamentals_header.png b/fundamentals/fundamentals_header.png
+-new file mode 100644
+-index 0000000..aae2842
+-Binary files /dev/null and b/fundamentals/fundamentals_header.png differ
+-diff --git a/fundamentals/fundamentals_v1.png b/fundamentals/fundamentals_v1.png
+-new file mode 100644
+-index 0000000..0f519ca
+-Binary files /dev/null and b/fundamentals/fundamentals_v1.png differ
+-diff --git a/fundamentals/fundamentals_v2.png b/fundamentals/fundamentals_v2.png
+-new file mode 100644
+-index 0000000..9bc0381
+-Binary files /dev/null and b/fundamentals/fundamentals_v2.png differ
+-diff --git a/fundamentals/fundamentals_v3.png b/fundamentals/fundamentals_v3.png
+-new file mode 100644
+-index 0000000..b390188
+-Binary files /dev/null and b/fundamentals/fundamentals_v3.png differ
+-diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/fundamentals/v1/PM-Notes-AxtonSmith.docx
+-new file mode 100644
+-index 0000000..acc0ce8
+---- /dev/null
+-+++ b/fundamentals/v1/PM-Notes-AxtonSmith.docx
+-@@ -0,0 +1,4 @@
+-+Fundamentals Module V1
+-+The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
+-+Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
+-+Negative cases will be any indexes beyond the max length of the string.
+-diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/fundamentals/v1/fundamentals-test-cases.xlsx
+-new file mode 100644
+-index 0000000..35c1eda
+-Binary files /dev/null and b/fundamentals/v1/fundamentals-test-cases.xlsx differ
+-diff --git a/fundamentals/v1/fundamentals.c b/fundamentals/v1/fundamentals.c
+-new file mode 100644
+-index 0000000..1215375
+---- /dev/null
+-+++ b/fundamentals/v1/fundamentals.c
+-@@ -0,0 +1,40 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+#define NUM_INPUT_SIZE 10
+-+
+-+#include "fundamentals.h"
+-+
+-+// Takes a string input from user, then an index number and returns the character at that index of the string
+-+void fundamentals() {
+-+/* Version 1 */
+-+	printf("*** Start of Indexing Strings Demo ***\n");
+-+	char buffer1[BUFFER_SIZE];
+-+	char numInput[NUM_INPUT_SIZE];
+-+	size_t position;
+-+	do
+-+	{
+-+		printf("Type not empty string (q - to quit):\n");
+-+		fgets(buffer1, BUFFER_SIZE, stdin);
+-+		buffer1[strlen(buffer1) - 1] = '\0';
+-+		if (strcmp(buffer1, "q") != 0)
+-+		{
+-+			printf("Type the character position within the string:\n");
+-+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+-+			numInput[strlen(numInput) - 1] = '\0';
+-+			position = atoi(numInput);
+-+			if (position >= strlen(buffer1))
+-+			{
+-+				position = strlen(buffer1) - 1;
+-+				printf("Too big... Position reduced to max. available\n");
+-+			}
+-+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+-+		}
+-+	} while (strcmp(buffer1, "q") != 0);
+-+	printf("*** End of Indexing Strings Demo ***\n\n");
+-+
+-+	/* Version 2 */
+-+	//>> insert here
+-+
+-+	/* Version 3 */
+-+	//>> insert here
+-+}
+-\ No newline at end of file
+-diff --git a/fundamentals/v1/fundamentals.h b/fundamentals/v1/fundamentals.h
+-new file mode 100644
+-index 0000000..14a6f4f
+---- /dev/null
+-+++ b/fundamentals/v1/fundamentals.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _FUNDAMENTALS_H_
+-+#define _FUNDAMENTALS_H_
+-+
+-+#include <stdio.h>
+-+#include <stdlib.h>
+-+#include <string.h>
+-+
+-+// Takes a string input from user, then an index number and returns the character at that index of the string
+-+void fundamentals(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/fundamentals/v1/main.c b/fundamentals/v1/main.c
+-new file mode 100644
+-index 0000000..1225e71
+---- /dev/null
+-+++ b/fundamentals/v1/main.c
+-@@ -0,0 +1,7 @@
+-+#include "fundamentals.h"
+-+
+-+int main(void)
+-+{
+-+	fundamentals();
+-+	return 0;
+-+}
+-\ No newline at end of file
+-diff --git a/main/converting.c b/main/converting.c
+-new file mode 100644
+-index 0000000..dc92171
+---- /dev/null
+-+++ b/main/converting.c
+-@@ -0,0 +1,34 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+
+-+#include "converting.h"
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting() {
+-+/* Version 1 */
+-+	printf("*** Start of Converting Strings to int Demo ***\n");
+-+	char intString[BUFFER_SIZE];
+-+	int intNumber;
+-+	do
+-+	{
+-+		printf("Type an int numeric string (q - to quit):\n");
+-+		fgets(intString, BUFFER_SIZE, stdin);
+-+		intString[strlen(intString) - 1] = '\0';
+-+		if (strcmp(intString, "q") != 0)
+-+		{
+-+			intNumber = atoi(intString);
+-+			printf("Converted number is %d\n", intNumber);
+-+		}
+-+	}
+-+	while (strcmp(intString, "q") != 0);
+-+	printf("*** End of Converting Strings to int Demo ***\n\n");
+-+
+-+/* Version 2 */
+-+//>> insert here
+-+
+-+
+-+/* Version 3 */
+-+//>> insert here
+-+
+-+
+-+}
+-diff --git a/main/converting.h b/main/converting.h
+-new file mode 100644
+-index 0000000..94e86ab
+---- /dev/null
+-+++ b/main/converting.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _CONVERTING_H_
+-+#define _CONVERTING_H_
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+#include <stdlib.h>
+-+
+-+// User inputs a number as a string, then it is returned as an int
+-+void converting(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/main/fundamentals.c b/main/fundamentals.c
+-new file mode 100644
+-index 0000000..1215375
+---- /dev/null
+-+++ b/main/fundamentals.c
+-@@ -0,0 +1,40 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+#define NUM_INPUT_SIZE 10
+-+
+-+#include "fundamentals.h"
+-+
+-+// Takes a string input from user, then an index number and returns the character at that index of the string
+-+void fundamentals() {
+-+/* Version 1 */
+-+	printf("*** Start of Indexing Strings Demo ***\n");
+-+	char buffer1[BUFFER_SIZE];
+-+	char numInput[NUM_INPUT_SIZE];
+-+	size_t position;
+-+	do
+-+	{
+-+		printf("Type not empty string (q - to quit):\n");
+-+		fgets(buffer1, BUFFER_SIZE, stdin);
+-+		buffer1[strlen(buffer1) - 1] = '\0';
+-+		if (strcmp(buffer1, "q") != 0)
+-+		{
+-+			printf("Type the character position within the string:\n");
+-+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+-+			numInput[strlen(numInput) - 1] = '\0';
+-+			position = atoi(numInput);
+-+			if (position >= strlen(buffer1))
+-+			{
+-+				position = strlen(buffer1) - 1;
+-+				printf("Too big... Position reduced to max. available\n");
+-+			}
+-+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+-+		}
+-+	} while (strcmp(buffer1, "q") != 0);
+-+	printf("*** End of Indexing Strings Demo ***\n\n");
+-+
+-+	/* Version 2 */
+-+	//>> insert here
+-+
+-+	/* Version 3 */
+-+	//>> insert here
+-+}
+-\ No newline at end of file
+-diff --git a/main/fundamentals.h b/main/fundamentals.h
+-new file mode 100644
+-index 0000000..14a6f4f
+---- /dev/null
+-+++ b/main/fundamentals.h
+-@@ -0,0 +1,11 @@
+-+#ifndef _FUNDAMENTALS_H_
+-+#define _FUNDAMENTALS_H_
+-+
+-+#include <stdio.h>
+-+#include <stdlib.h>
+-+#include <string.h>
+-+
+-+// Takes a string input from user, then an index number and returns the character at that index of the string
+-+void fundamentals(void);
+-+
+-+#endif
+-\ No newline at end of file
+-diff --git a/main/main.c b/main/main.c
+-new file mode 100644
+-index 0000000..5062fbb
+---- /dev/null
+-+++ b/main/main.c
+-@@ -0,0 +1,12 @@
+-+#include "fundamentals.h"
+-+#include "manipulating.h"
+-+#include "tokenizing.h"
+-+#include "converting.h"
+-+
+-+int main(void)
+-+{
+-+	fundamentals();
+-+	manipulating();
+-+	tokenizing();
+-+	converting();
+-+}
+-diff --git a/main/manipulating.c b/main/manipulating.c
+-new file mode 100644
+-index 0000000..3de4a55
+---- /dev/null
+-+++ b/main/manipulating.c
+-@@ -0,0 +1,28 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+#include "manipulating.h"
+-+
+-+// V1
+-+
+-+void manipulating(void) {
+-+	printf("*** Start if Concatenating Strings Demo ***\n");
+-+	char string1[BUFFER_SIZE];
+-+	char string2[BUFFER_SIZE];
+-+	do {
+-+		//Prompt for first string
+-+		printf("Type the 1st string (q - to quit):\n");
+-+		fgets(string1, BUFFER_SIZE, stdin);
+-+		string1[strlen(string1) - 1] = '\0';
+-+		//if q was entered quit program
+-+		if ((strcmp(string1, "q") != 0)) {
+-+			printf("Type the 2nd string:\n");
+-+			//promt for 2nd string
+-+			fgets(string2, BUFFER_SIZE, stdin);
+-+			string2[strlen(string2) - 1] = '\0';
+-+			//concatenate string
+-+			strcat(string1, string2);
+-+			printf("Concatenated string is \'%s\'\n", string1);
+-+		}
+-+	} while (strcmp(string1, "q") != 0);
+-+	printf("*** End of Concatenating Strings Demo ***\n\n");
+-+}
+-\ No newline at end of file
+-diff --git a/main/manipulating.h b/main/manipulating.h
+-new file mode 100644
+-index 0000000..434f748
+---- /dev/null
+-+++ b/main/manipulating.h
+-@@ -0,0 +1,6 @@
+-+#ifndef _MANIPULATING_H_
+-+#define _MANIPULATING_H_
+-+#include <stdio.h>
+-+#include <string.h>
+-+void manipulating(void);
+-+#endif
+-\ No newline at end of file
+-diff --git a/main/tokenizing.c b/main/tokenizing.c
+-new file mode 100644
+-index 0000000..97680d4
+---- /dev/null
+-+++ b/main/tokenizing.c
+-@@ -0,0 +1,42 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 300
+-+#include "tokenizing.h"
+-+
+-+/* Version 1 */
+-+void tokenizing(void)
+-+{
+-+	printf("*** Start of Tokenizing Words Demo ***\n");
+-+	char words[BUFFER_SIZE];
+-+	char* nextWord = NULL;
+-+	int wordsCounter;
+-+	do {
+-+		printf("Type a few words seperated by space  (q - to quit):\n");
+-+		fgets(words, BUFFER_SIZE, stdin);
+-+		words[strlen(words) - 1] = '\0';
+-+		if (strcmp(words, "q") != 0) {
+-+			nextWord = strtok(words, " ");
+-+			wordsCounter = 1;
+-+			while(nextWord) {
+-+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+-+				nextWord = strtok(NULL, " ");
+-+
+-+			}
+-+		}
+-+	} while (strcmp(words, "q") != 0);
+-+	printf("*** End of Tokenizing Words Demo ***\n\n");
+-+
+-+}
+-+
+-+
+-+
+-+
+-+
+-+/* Version 2 */
+-+
+-+
+-+
+-+/* Version 3 */
+-+
+-+
+-+
+-+
+-diff --git a/main/tokenizing.h b/main/tokenizing.h
+-new file mode 100644
+-index 0000000..d377740
+---- /dev/null
+-+++ b/main/tokenizing.h
+-@@ -0,0 +1,10 @@
+-+#ifndef _TOKENIZING_H
+-+#define _TOKENIZING_H
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+
+-+void tokenizing(void);
+-+
+-+#endif 
+-+
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
+-new file mode 100644
+-index 0000000..ce82fd8
+-Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo differ
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
+-new file mode 100644
+-index 0000000..95cfcc7
+-Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db differ
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
+-new file mode 100644
+-index 0000000..b2ba1dc
+-Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db differ
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
+-new file mode 100644
+-index 0000000..6a221a6
+---- /dev/null
+-+++ b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx	
+-@@ -0,0 +1,9 @@
+-+Manipulation Module
+-+
+-+This module concatenates 2 strings sized to a defined macro.
+-+
+-+Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
+-+
+-+An input of `q' was tested to ensure it would result in ending the program.
+-+
+-+A string that is greater than the initialized memory was tested to ensure it would not crash the program.
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
+-new file mode 100644
+-index 0000000..1bcc78d
+---- /dev/null
+-+++ b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c	
+-@@ -0,0 +1,5 @@
+-+int main(void) {
+-+
+-+	manipulating();
+-+	return 0;
+-+}
+-\ No newline at end of file
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/Manipulation V1/Manipulation V1/manipulating.c
+-new file mode 100644
+-index 0000000..3de4a55
+---- /dev/null
+-+++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.c	
+-@@ -0,0 +1,28 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 80
+-+#include "manipulating.h"
+-+
+-+// V1
+-+
+-+void manipulating(void) {
+-+	printf("*** Start if Concatenating Strings Demo ***\n");
+-+	char string1[BUFFER_SIZE];
+-+	char string2[BUFFER_SIZE];
+-+	do {
+-+		//Prompt for first string
+-+		printf("Type the 1st string (q - to quit):\n");
+-+		fgets(string1, BUFFER_SIZE, stdin);
+-+		string1[strlen(string1) - 1] = '\0';
+-+		//if q was entered quit program
+-+		if ((strcmp(string1, "q") != 0)) {
+-+			printf("Type the 2nd string:\n");
+-+			//promt for 2nd string
+-+			fgets(string2, BUFFER_SIZE, stdin);
+-+			string2[strlen(string2) - 1] = '\0';
+-+			//concatenate string
+-+			strcat(string1, string2);
+-+			printf("Concatenated string is \'%s\'\n", string1);
+-+		}
+-+	} while (strcmp(string1, "q") != 0);
+-+	printf("*** End of Concatenating Strings Demo ***\n\n");
+-+}
+-\ No newline at end of file
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/Manipulation V1/Manipulation V1/manipulating.h
+-new file mode 100644
+-index 0000000..434f748
+---- /dev/null
+-+++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.h	
+-@@ -0,0 +1,6 @@
+-+#ifndef _MANIPULATING_H_
+-+#define _MANIPULATING_H_
+-+#include <stdio.h>
+-+#include <string.h>
+-+void manipulating(void);
+-+#endif
+-\ No newline at end of file
+-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
+-new file mode 100644
+-index 0000000..de4db70
+-Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx differ
+-diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/tokenizing/PM-Notes-DarianGrijalba.docx
+-new file mode 100644
+-index 0000000..79615b7
+---- /dev/null
+-+++ b/tokenizing/PM-Notes-DarianGrijalba.docx
+-@@ -0,0 +1,35 @@
+-+                                 Tokenizing v1
+-+Test Cases
+-+*** Start of Tokenizing Words Demo ***
+-+Type a few words separated by space  (q - to quit):
+-+Inputs: "The"
+-+Outputs: Word #1 is The
+-+Type a few words separated by space  (q - to quit):
+-+Inputs: "q"
+-+*** End of Tokenizing Words Demo ***
+-+
+-+*** Start of Tokenizing Words Demo ***
+-+Type a few words separated by space  (q - to quit):
+-+Inputs: "Have A Good Day"
+-+Outputs: Word #1 is Have
+-+	   Word #2 is A
+-+	   Word #3 is Good
+-+	   Word #4 is Day
+-+Type a few words separated by space  (q - to quit):
+-+Inputs: "q"
+-+*** End of Tokenizing Words Demo ***
+-+
+-+*** Start of Tokenizing Words Demo ***
+-+Type a few words separated by space  (q - to quit):
+-+Inputs: "HaveA                                Gooooooooooooood                               Day"
+-+Outputs: Word #1 is HaveA
+-+	   Word #2 is Goooooooooooooood
+-+	   Word #3 is Day
+-+Type a few words separated by space  (q - to quit):
+-+Inputs: "q"
+-+*** End of Tokenizing Words Demo ***
+-+
+-+Basically will calculate the amount of words the user inputted and list them out one by one 
+-+
+-+
+-+
+-diff --git a/tokenizing/tokenizing.c b/tokenizing/tokenizing.c
+-new file mode 100644
+-index 0000000..cd11fd7
+---- /dev/null
+-+++ b/tokenizing/tokenizing.c
+-@@ -0,0 +1,42 @@
+-+#define _CRT_SECURE_NO_WARNINGS
+-+#define BUFFER_SIZE 300
+-+#include "Tokenzing.h"
+-+
+-+/* Version 1 */
+-+void tokenizing(void)
+-+{
+-+	printf("*** Start of Tokenizing Words Demo ***\n");
+-+	char words[BUFFER_SIZE];
+-+	char* nextWord = NULL;
+-+	int wordsCounter;
+-+	do {
+-+		printf("Type a few words seperated by space  (q - to quit):\n");
+-+		fgets(words, BUFFER_SIZE, stdin);
+-+		words[strlen(words) - 1] = '\0';
+-+		if (strcmp(words, "q") != 0) {
+-+			nextWord = strtok(words, " ");
+-+			wordsCounter = 1;
+-+			while(nextWord) {
+-+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+-+				nextWord = strtok(NULL, " ");
+-+
+-+			}
+-+		}
+-+	} while (strcmp(words, "q") != 0);
+-+	printf("*** End of Tokenizing Words Demo ***\n\n");
+-+
+-+}
+-+
+-+
+-+
+-+
+-+
+-+/* Version 2 */
+-+
+-+
+-+
+-+/* Version 3 */
+-+
+-+
+-+
+-+
+-diff --git a/tokenizing/tokenizing.h b/tokenizing/tokenizing.h
+-new file mode 100644
+-index 0000000..c136582
+---- /dev/null
+-+++ b/tokenizing/tokenizing.h
+-@@ -0,0 +1,16 @@
+-+#ifndef _TOKENIZING_H
+-+#define _TOKENIZING_H
+-+
+-+#include <stdio.h>
+-+#include <string.h>
+-+
+-+void tokenizing(void);
+-+
+-+int main() {
+-+    // Call your tokenizing function or include it in your main function
+-+    tokenizing();
+-+
+-+    return 0;
+-+}
+-+#endif 
+-+
+-
+-commit 306f1ee35754c5c7e56bc11fb2c61f66956b2f9f
+-Author: Axton Smith <axtonsmith@gmail.com>
+-Date:   Wed Dec 6 21:02:16 2023 -0500
+-
+-    Initial commit
+-
+-diff --git a/README.md b/README.md
+-new file mode 100644
+-index 0000000..ec7a918
+---- /dev/null
+-+++ b/README.md
+-@@ -0,0 +1,2 @@
+-+# CPR101group3
+-+Final project for a computer principles for programmers course
+diff --git a/V2/main/converting.c b/V2/main/converting.c
+deleted file mode 100644
+index 9f0d0ac..0000000
+--- a/V2/main/converting.c
++++ /dev/null
+@@ -1,47 +0,0 @@
+-#define _CRT_SECURE_NO_WARNINGS
+-#define BUFFER_SIZE 80
+-
+-#include "converting.h"
+-
+-// User inputs a number as a string, then it is returned as an int
+-void converting() {
+-/* Version 1 */
+-	printf("*** Start of Converting Strings to int Demo ***\n");
+-	char intString[BUFFER_SIZE];
+-	int intNumber;
+-	do
+-	{
+-		printf("Type an int numeric string (q - to quit):\n");
+-		fgets(intString, BUFFER_SIZE, stdin);
+-		intString[strlen(intString) - 1] = '\0';
+-		if (strcmp(intString, "q") != 0)
+-		{
+-			intNumber = atoi(intString);
+-			printf("Converted number is %d\n", intNumber);
+-		}
+-	}
+-	while (strcmp(intString, "q") != 0);
+-	printf("*** End of Converting Strings to int Demo ***\n\n");
+-
+-/* Version 2 */
+-	printf("*** Start of Converting Strings to double Demo ***\n");
+-	char doubleString[BUFFER_SIZE];
+-	double doubleNumber;
+-	do
+-	{
+-		printf("Type the double numeric string (q - to quit):\n");
+-		fgets(doubleString, BUFFER_SIZE, stdin);
+-		doubleString[strlen(doubleString) - 1] = '\0';
+-		if ((strcmp(doubleString, "q") != 0))
+-		{
+-			doubleNumber = atof(doubleString);
+-			printf("Converted number is %f\n", doubleNumber);
+-		}
+-	} while (strcmp(doubleString, "q") != 0);
+-	printf("*** End of Converting Strings to double Demo ***\n\n");
+-
+-/* Version 3 */
+-//>> insert here
+-
+-
+-}
+diff --git a/V2/main/converting.h b/V2/main/converting.h
+deleted file mode 100644
+index 94e86ab..0000000
+--- a/V2/main/converting.h
++++ /dev/null
+@@ -1,11 +0,0 @@
+-#ifndef _CONVERTING_H_
+-#define _CONVERTING_H_
+-
+-#include <stdio.h>
+-#include <string.h>
+-#include <stdlib.h>
+-
+-// User inputs a number as a string, then it is returned as an int
+-void converting(void);
+-
+-#endif
+\ No newline at end of file
+diff --git a/V2/main/fundamentals.c b/V2/main/fundamentals.c
+deleted file mode 100644
+index 4596c8d..0000000
+--- a/V2/main/fundamentals.c
++++ /dev/null
+@@ -1,49 +0,0 @@
+-#define _CRT_SECURE_NO_WARNINGS
+-#define BUFFER_SIZE 80
+-#define NUM_INPUT_SIZE 10
+-
+-#include "fundamentals.h"
+-
+-// Takes a string input from user, then an index number and returns the character at that index of the string
+-void fundamentals() {
+-/* Version 1 */
+-	printf("*** Start of Indexing Strings Demo ***\n");
+-	char buffer1[BUFFER_SIZE];
+-	char numInput[NUM_INPUT_SIZE];
+-	size_t position;
+-	do
+-	{
+-		printf("Type not empty string (q - to quit):\n");
+-		fgets(buffer1, BUFFER_SIZE, stdin);
+-		buffer1[strlen(buffer1) - 1] = '\0';
+-		if (strcmp(buffer1, "q") != 0)
+-		{
+-			printf("Type the character position within the string:\n");
+-			fgets(numInput, NUM_INPUT_SIZE, stdin);
+-			numInput[strlen(numInput) - 1] = '\0';
+-			position = atoi(numInput);
+-			if (position >= strlen(buffer1))
+-			{
+-				position = strlen(buffer1) - 1;
+-				printf("Too big... Position reduced to max. available\n");
+-			}
+-			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+-		}
+-	} while (strcmp(buffer1, "q") != 0);
+-	printf("*** End of Indexing Strings Demo ***\n\n");
+-
+-	/* Version 2 */
+-	printf("*** Start of Measuring Strings Demo ***\n");
+-	char buffer2[BUFFER_SIZE];
+-	do {
+-		printf("Type a string (q - to quit):\n");
+-		fgets(buffer2, BUFFER_SIZE, stdin);
+-		buffer2[strlen(buffer2) - 1] = '\0';
+-		if (strcmp(buffer2, "q") != 0)
+-			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+-	} while (strcmp(buffer2, "q") != 0);
+-	printf("*** End of Measuring Strings Demo ***\n\n");
+-
+-	/* Version 3 */
+-	//>> insert here
+-}
+\ No newline at end of file
+diff --git a/V2/main/fundamentals.h b/V2/main/fundamentals.h
+deleted file mode 100644
+index 14a6f4f..0000000
+--- a/V2/main/fundamentals.h
++++ /dev/null
+@@ -1,11 +0,0 @@
+-#ifndef _FUNDAMENTALS_H_
+-#define _FUNDAMENTALS_H_
+-
+-#include <stdio.h>
+-#include <stdlib.h>
+-#include <string.h>
+-
+-// Takes a string input from user, then an index number and returns the character at that index of the string
+-void fundamentals(void);
+-
+-#endif
+\ No newline at end of file
+diff --git a/V2/manipulations/PM-Notes-Brandon-Doray.docx b/V2/manipulations/PM-Notes-Brandon-Doray.docx
+deleted file mode 100644
+index f3443e8..0000000
+--- a/V2/manipulations/PM-Notes-Brandon-Doray.docx
++++ /dev/null
+@@ -1,25 +0,0 @@
+-Manipulation Module
+-
+-//V1
+-
+-This module concatenates 2 strings sized to a defined macro.
+-
+-Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
+-
+-An input of `q' was tested to ensure it would result in ending the program.
+-
+-A string that is greater than the initialized memory was tested to ensure it would not crash the program.
+-
+-//V2
+-
+-V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
+-
+-This function will only compare strings up until it hits a NULL or a char that does not match.
+-
+-If it hits a char that does not match, anything after that will not be considered in the comparison.
+-
+-The chars are evaluated using their ASCII value.
+-
+-The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
+-
+-
+diff --git a/V2/manipulations/manipulatemain.c b/V2/manipulations/manipulatemain.c
+deleted file mode 100644
+index 1bcc78d..0000000
+--- a/V2/manipulations/manipulatemain.c
++++ /dev/null
+@@ -1,5 +0,0 @@
+-int main(void) {
+-
+-	manipulating();
+-	return 0;
+-}
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulating.c b/V2/manipulations/manipulating.c
+deleted file mode 100644
+index 7ba26cd..0000000
+--- a/V2/manipulations/manipulating.c
++++ /dev/null
+@@ -1,61 +0,0 @@
+-#define _CRT_SECURE_NO_WARNINGS
+-#define BUFFER_SIZE 80
+-#include "manipulating.h"
+-
+-// V1
+-
+-void manipulating(void) {
+-	printf("*** Start of Concatenating Strings Demo ***\n");
+-	char string1[BUFFER_SIZE];
+-	char string2[BUFFER_SIZE];
+-	do {
+-		//Prompt for first string
+-		printf("Type the 1st string (q - to quit):\n");
+-		fgets(string1, BUFFER_SIZE, stdin);
+-		string1[strlen(string1) - 1] = '\0';
+-		//if q was entered quit program
+-		if ((strcmp(string1, "q") != 0)) {
+-			printf("Type the 2nd string:\n");
+-			//promt for 2nd string
+-			fgets(string2, BUFFER_SIZE, stdin);
+-			string2[strlen(string2) - 1] = '\0';
+-			//concatenate string
+-			strcat(string1, string2);
+-			printf("Concatenated string is \'%s\'\n", string1);
+-		}
+-	} while (strcmp(string1, "q") != 0);
+-	printf("*** End of Concatenating Strings Demo ***\n\n");
+-
+-	//V2
+-	printf("***Start of Comparing Strings Demon***\n");
+-	char compare1[BUFFER_SIZE];
+-	char compare2[BUFFER_SIZE];
+-	int result;
+-	do {
+-		//Receive user input for the 1st string
+-		printf("Type the 1st string to compare (q - to quit):\n");
+-		fgets(compare1, BUFFER_SIZE, stdin);
+-		//Add an ending NULL to the 1st string
+-		compare1[strlen(compare1) - 1] = '\0';
+-		//Check that the user did not input 'q' to quit
+-		if (strcmp(compare1, "q") != 0) {
+-			//Receive user input for the 2nd string
+-			printf("Type the 2nd string to compare:\n");
+-			fgets(compare2, BUFFER_SIZE, stdin);
+-			//Add an ending NULL to the 2nd string
+-			compare2[strlen(compare2) - 1] = '\0';
+-			result = strcmp(compare1, compare2);
+-			//Check if the 1st string < than the 2nd string
+-			if (result < 0)
+-				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
+-			//Check if the strings are equal
+-			else if (result == 0)
+-				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
+-			//Check if the first string is greater than the 2nd string
+-			else
+-				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
+-
+-		}
+-	} while (strcmp(compare1, "q") != 0);
+-	printf("*** End of Comparing Strings Demon ***\n\n");
+-}
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulating.h b/V2/manipulations/manipulating.h
+deleted file mode 100644
+index 434f748..0000000
+--- a/V2/manipulations/manipulating.h
++++ /dev/null
+@@ -1,6 +0,0 @@
+-#ifndef _MANIPULATING_H_
+-#define _MANIPULATING_H_
+-#include <stdio.h>
+-#include <string.h>
+-void manipulating(void);
+-#endif
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
+deleted file mode 100644
+index dc49fc2..0000000
+Binary files a/V2/manipulations/manipulation-test-cases.xlsx and /dev/null differ
+diff --git a/V2/tokenizing/Tokenizing v2 PM-notes.docx b/V2/tokenizing/Tokenizing v2 PM-notes.docx
+deleted file mode 100644
+index a9a5ded..0000000
+--- a/V2/tokenizing/Tokenizing v2 PM-notes.docx	
++++ /dev/null
+@@ -1,3 +0,0 @@
+-                            Tokenizing v2 PM-notes
+-Basically this was the same process as v1 and even the code of the Tokenizing v2 was  basically exactly the same as v1 just changed to every phrase in the sentence instead of every word that's it 
+-                                       
+diff --git a/V2/tokenizing/Tokenzing_v2_test-cases.xlsx b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx
+deleted file mode 100644
+index cb18ef6..0000000
+Binary files a/V2/tokenizing/Tokenzing_v2_test-cases.xlsx and /dev/null differ
+diff --git a/V2/tokenizing/tokenizing.c b/V2/tokenizing/tokenizing.c
+deleted file mode 100644
+index aa1e13a..0000000
+--- a/V2/tokenizing/tokenizing.c
++++ /dev/null
+@@ -1,62 +0,0 @@
+-#define _CRT_SECURE_NO_WARNINGS
+-#define BUFFER_SIZE 300
+-#include "Tokenzing.h"
+-
+-/* Version 1 */
+-void tokenizing(void)
+-{
+-	/*printf("*** Start of Tokenizing Words Demo ***\n");
+-	char words[BUFFER_SIZE];
+-	char* nextWord = NULL;
+-	int wordsCounter;
+-	do {
+-		printf("Type a few words seperated by space  (q - to quit):\n");
+-		fgets(words, BUFFER_SIZE, stdin);
+-		words[strlen(words) - 1] = '\0';
+-		if (strcmp(words, "q") != 0) {
+-			nextWord = strtok(words, " ");
+-			wordsCounter = 1;
+-			while (nextWord) {
+-				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+-				nextWord = strtok(NULL, " ");
+-
+-			}
+-		}
+-	} while (strcmp(words, "q") != 0);
+-	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+-
+-
+-
+-
+-
+-
+-
+-	/* Version 2 */
+-	printf("*** Start of Tokenizing Words Demo ***\n");
+-	char phrases[BUFFER_SIZE];
+-	char* nextphrase = NULL;
+-	int phrasesCounter;
+-	do
+-	{
+-		printf("Type a few phrases seperated by space  (q - to quit):\n");
+-		fgets(phrases, BUFFER_SIZE, stdin);
+-		phrases[strlen(phrases) - 1] = '\0';
+-		if (strcmp(phrases, "q") != 0)
+-		{
+-			nextphrase = strtok(phrases, " ");
+-			phrasesCounter = 1;
+-			while (nextphrase)
+-			{
+-				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+-				nextphrase = strtok(NULL, " ");
+-			}
+-		}
+-	} while (strcmp(phrases, "q") != 0);
+-	printf("*** End of Tokenizing Words Demo ***\n\n");
+-
+-	return 0;
+-}
+-
+-
+-
+-	
+diff --git a/V2/tokenizing/tokenizing.h b/V2/tokenizing/tokenizing.h
+deleted file mode 100644
+index d96fde1..0000000
+--- a/V2/tokenizing/tokenizing.h
++++ /dev/null
+@@ -1,15 +0,0 @@
+-#ifndef _TOKENIZING_H
+-#define _TOKENIZING_H
+-
+-#include <stdio.h>
+-#include <string.h>
+-
+-void tokenizing(void);
+-
+-int main() {
+-    // Call your tokenizing function or include it in your main function
+-    tokenizing();
+-
+-    return 0;
+-}
+-#endif 
+\ No newline at end of file
+diff --git a/V2/Final-Project-Plan.xlsx b/V3/Final-Project-Plan.xlsx
+similarity index 100%
+rename from V2/Final-Project-Plan.xlsx
+rename to V3/Final-Project-Plan.xlsx
+diff --git a/V2/Final-Project-Test-Cases.xlsx b/V3/Final-Project-Test-Cases.xlsx
+similarity index 100%
+rename from V2/Final-Project-Test-Cases.xlsx
+rename to V3/Final-Project-Test-Cases.xlsx
+diff --git a/V2/conversions/converting.c b/V3/main/converting.c
+similarity index 100%
+rename from V2/conversions/converting.c
+rename to V3/main/converting.c
+diff --git a/V2/conversions/converting.h b/V3/main/converting.h
+similarity index 100%
+rename from V2/conversions/converting.h
+rename to V3/main/converting.h
+diff --git a/V2/fundamentals/fundamentals.c b/V3/main/fundamentals.c
+similarity index 100%
+rename from V2/fundamentals/fundamentals.c
+rename to V3/main/fundamentals.c
+diff --git a/V2/fundamentals/fundamentals.h b/V3/main/fundamentals.h
+similarity index 100%
+rename from V2/fundamentals/fundamentals.h
+rename to V3/main/fundamentals.h
+diff --git a/V2/main/main.c b/V3/main/main.c
+similarity index 100%
+rename from V2/main/main.c
+rename to V3/main/main.c
+diff --git a/V2/main/manipulating.c b/V3/main/manipulating.c
+similarity index 100%
+rename from V2/main/manipulating.c
+rename to V3/main/manipulating.c
+diff --git a/V2/main/manipulating.h b/V3/main/manipulating.h
+similarity index 100%
+rename from V2/main/manipulating.h
+rename to V3/main/manipulating.h
+diff --git a/V2/main/tokenizing.c b/V3/main/tokenizing.c
+similarity index 100%
+rename from V2/main/tokenizing.c
+rename to V3/main/tokenizing.c
+diff --git a/V2/main/tokenizing.h b/V3/main/tokenizing.h
+similarity index 100%
+rename from V2/main/tokenizing.h
+rename to V3/main/tokenizing.h
+
+commit 6f45f0cb9bcdfca57945e1b7a38db8e4617770b9
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Sat Dec 9 12:03:25 2023 -0500
+
+    Add main-git-log.txt to V2
+
+diff --git a/V2/main-git-log.txt b/V2/main-git-log.txt
+new file mode 100644
+index 0000000..9001aae
+--- /dev/null
++++ b/V2/main-git-log.txt
+@@ -0,0 +1,3600 @@
++commit 01f89458ddc774511e45d502a67641a170760617
++Author: Axton Smith <axtonsmith@gmail.com>
++Date:   Sat Dec 9 00:03:26 2023 -0500
++
++    Add fundamentals module and add to main
++
++diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
++index 814fb41..b26bd94 100644
++Binary files a/V2/Final-Project-Plan.xlsx and b/V2/Final-Project-Plan.xlsx differ
++diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
++index 40e66b0..d7fe3d1 100644
++Binary files a/V2/Final-Project-Test-Cases.xlsx and b/V2/Final-Project-Test-Cases.xlsx differ
++diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
++deleted file mode 100644
++index 92459be..0000000
++Binary files a/V2/Tokenizing.zip and /dev/null differ
++diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
++deleted file mode 100644
++index 92459be..0000000
++Binary files a/V2/Tokenzing/Tokenizing.zip and /dev/null differ
++diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
++deleted file mode 100644
++index e69de29..0000000
++diff --git a/V2/fundamentals/Fundamentals Module V2.docx b/V2/fundamentals/Fundamentals Module V2.docx
++new file mode 100644
++index 0000000..f98ecba
++--- /dev/null
+++++ b/V2/fundamentals/Fundamentals Module V2.docx	
++@@ -0,0 +1,3 @@
+++Fundamentals Module V2
+++This module tells you the length of an input string.
+++Testing: To test the module, I will use varying lengths of string with and without spaces, as well as an empty string.
++diff --git a/V2/fundamentals/fundamentals-test-cases.xlsx b/V2/fundamentals/fundamentals-test-cases.xlsx
++new file mode 100644
++index 0000000..5ee1fc1
++Binary files /dev/null and b/V2/fundamentals/fundamentals-test-cases.xlsx differ
++diff --git a/V2/fundamentals/fundamentals.c b/V2/fundamentals/fundamentals.c
++new file mode 100644
++index 0000000..4596c8d
++--- /dev/null
+++++ b/V2/fundamentals/fundamentals.c
++@@ -0,0 +1,49 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++#define NUM_INPUT_SIZE 10
+++
+++#include "fundamentals.h"
+++
+++// Takes a string input from user, then an index number and returns the character at that index of the string
+++void fundamentals() {
+++/* Version 1 */
+++	printf("*** Start of Indexing Strings Demo ***\n");
+++	char buffer1[BUFFER_SIZE];
+++	char numInput[NUM_INPUT_SIZE];
+++	size_t position;
+++	do
+++	{
+++		printf("Type not empty string (q - to quit):\n");
+++		fgets(buffer1, BUFFER_SIZE, stdin);
+++		buffer1[strlen(buffer1) - 1] = '\0';
+++		if (strcmp(buffer1, "q") != 0)
+++		{
+++			printf("Type the character position within the string:\n");
+++			fgets(numInput, NUM_INPUT_SIZE, stdin);
+++			numInput[strlen(numInput) - 1] = '\0';
+++			position = atoi(numInput);
+++			if (position >= strlen(buffer1))
+++			{
+++				position = strlen(buffer1) - 1;
+++				printf("Too big... Position reduced to max. available\n");
+++			}
+++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+++		}
+++	} while (strcmp(buffer1, "q") != 0);
+++	printf("*** End of Indexing Strings Demo ***\n\n");
+++
+++	/* Version 2 */
+++	printf("*** Start of Measuring Strings Demo ***\n");
+++	char buffer2[BUFFER_SIZE];
+++	do {
+++		printf("Type a string (q - to quit):\n");
+++		fgets(buffer2, BUFFER_SIZE, stdin);
+++		buffer2[strlen(buffer2) - 1] = '\0';
+++		if (strcmp(buffer2, "q") != 0)
+++			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+++	} while (strcmp(buffer2, "q") != 0);
+++	printf("*** End of Measuring Strings Demo ***\n\n");
+++
+++	/* Version 3 */
+++	//>> insert here
+++}
++\ No newline at end of file
++diff --git a/V2/fundamentals/fundamentals.h b/V2/fundamentals/fundamentals.h
++new file mode 100644
++index 0000000..14a6f4f
++--- /dev/null
+++++ b/V2/fundamentals/fundamentals.h
++@@ -0,0 +1,11 @@
+++#ifndef _FUNDAMENTALS_H_
+++#define _FUNDAMENTALS_H_
+++
+++#include <stdio.h>
+++#include <stdlib.h>
+++#include <string.h>
+++
+++// Takes a string input from user, then an index number and returns the character at that index of the string
+++void fundamentals(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/V2/fundamentals/main.c b/V2/fundamentals/main.c
++new file mode 100644
++index 0000000..1225e71
++--- /dev/null
+++++ b/V2/fundamentals/main.c
++@@ -0,0 +1,7 @@
+++#include "fundamentals.h"
+++
+++int main(void)
+++{
+++	fundamentals();
+++	return 0;
+++}
++\ No newline at end of file
++diff --git a/V2/main/fundamentals.c b/V2/main/fundamentals.c
++new file mode 100644
++index 0000000..4596c8d
++--- /dev/null
+++++ b/V2/main/fundamentals.c
++@@ -0,0 +1,49 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++#define NUM_INPUT_SIZE 10
+++
+++#include "fundamentals.h"
+++
+++// Takes a string input from user, then an index number and returns the character at that index of the string
+++void fundamentals() {
+++/* Version 1 */
+++	printf("*** Start of Indexing Strings Demo ***\n");
+++	char buffer1[BUFFER_SIZE];
+++	char numInput[NUM_INPUT_SIZE];
+++	size_t position;
+++	do
+++	{
+++		printf("Type not empty string (q - to quit):\n");
+++		fgets(buffer1, BUFFER_SIZE, stdin);
+++		buffer1[strlen(buffer1) - 1] = '\0';
+++		if (strcmp(buffer1, "q") != 0)
+++		{
+++			printf("Type the character position within the string:\n");
+++			fgets(numInput, NUM_INPUT_SIZE, stdin);
+++			numInput[strlen(numInput) - 1] = '\0';
+++			position = atoi(numInput);
+++			if (position >= strlen(buffer1))
+++			{
+++				position = strlen(buffer1) - 1;
+++				printf("Too big... Position reduced to max. available\n");
+++			}
+++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+++		}
+++	} while (strcmp(buffer1, "q") != 0);
+++	printf("*** End of Indexing Strings Demo ***\n\n");
+++
+++	/* Version 2 */
+++	printf("*** Start of Measuring Strings Demo ***\n");
+++	char buffer2[BUFFER_SIZE];
+++	do {
+++		printf("Type a string (q - to quit):\n");
+++		fgets(buffer2, BUFFER_SIZE, stdin);
+++		buffer2[strlen(buffer2) - 1] = '\0';
+++		if (strcmp(buffer2, "q") != 0)
+++			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+++	} while (strcmp(buffer2, "q") != 0);
+++	printf("*** End of Measuring Strings Demo ***\n\n");
+++
+++	/* Version 3 */
+++	//>> insert here
+++}
++\ No newline at end of file
++diff --git a/V2/main/fundamentals.h b/V2/main/fundamentals.h
++new file mode 100644
++index 0000000..14a6f4f
++--- /dev/null
+++++ b/V2/main/fundamentals.h
++@@ -0,0 +1,11 @@
+++#ifndef _FUNDAMENTALS_H_
+++#define _FUNDAMENTALS_H_
+++
+++#include <stdio.h>
+++#include <stdlib.h>
+++#include <string.h>
+++
+++// Takes a string input from user, then an index number and returns the character at that index of the string
+++void fundamentals(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/V2/Tokenzing/Tokenzing.c b/V2/main/tokenizing.c
++similarity index 95%
++rename from V2/Tokenzing/Tokenzing.c
++rename to V2/main/tokenizing.c
++index 734c7c6..aa1e13a 100644
++--- a/V2/Tokenzing/Tokenzing.c
+++++ b/V2/main/tokenizing.c
++@@ -1,62 +1,62 @@
++-#define _CRT_SECURE_NO_WARNINGS
++-#define BUFFER_SIZE 300
++-#include "Tokenzing.h"
++-
++-/* Version 1 */
++-void tokenizing(void)
++-{
++-	/*printf("*** Start of Tokenizing Words Demo ***\n");
++-	char words[BUFFER_SIZE];
++-	char* nextWord = NULL;
++-	int wordsCounter;
++-	do {
++-		printf("Type a few words seperated by space  (q - to quit):\n");
++-		fgets(words, BUFFER_SIZE, stdin);
++-		words[strlen(words) - 1] = '\0';
++-		if (strcmp(words, "q") != 0) {
++-			nextWord = strtok(words, " ");
++-			wordsCounter = 1;
++-			while (nextWord) {
++-				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++-				nextWord = strtok(NULL, " ");
++-
++-			}
++-		}
++-	} while (strcmp(words, "q") != 0);
++-	printf("*** End of Tokenizing Words Demo ***\n\n");*/
++-
++-
++-
++-
++-
++-
++-
++-	/* Version 2 */
++-	printf("*** Start of Tokenizing Words Demo ***\n");
++-	char phrases[BUFFER_SIZE];
++-	char* nextphrase = NULL;
++-	int phrasesCounter;
++-	do
++-	{
++-		printf("Type a few phrases seperated by space  (q - to quit):\n");
++-		fgets(phrases, BUFFER_SIZE, stdin);
++-		phrases[strlen(phrases) - 1] = '\0';
++-		if (strcmp(phrases, "q") != 0)
++-		{
++-			nextphrase = strtok(phrases, " ");
++-			phrasesCounter = 1;
++-			while (nextphrase)
++-			{
++-				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
++-				nextphrase = strtok(NULL, " ");
++-			}
++-		}
++-	} while (strcmp(phrases, "q") != 0);
++-	printf("*** End of Tokenizing Words Demo ***\n\n");
++-
++-	return 0;
++-}
++-
++-
++-
++-	
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 300
+++#include "Tokenzing.h"
+++
+++/* Version 1 */
+++void tokenizing(void)
+++{
+++	/*printf("*** Start of Tokenizing Words Demo ***\n");
+++	char words[BUFFER_SIZE];
+++	char* nextWord = NULL;
+++	int wordsCounter;
+++	do {
+++		printf("Type a few words seperated by space  (q - to quit):\n");
+++		fgets(words, BUFFER_SIZE, stdin);
+++		words[strlen(words) - 1] = '\0';
+++		if (strcmp(words, "q") != 0) {
+++			nextWord = strtok(words, " ");
+++			wordsCounter = 1;
+++			while (nextWord) {
+++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+++				nextWord = strtok(NULL, " ");
+++
+++			}
+++		}
+++	} while (strcmp(words, "q") != 0);
+++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+++
+++
+++
+++
+++
+++
+++
+++	/* Version 2 */
+++	printf("*** Start of Tokenizing Words Demo ***\n");
+++	char phrases[BUFFER_SIZE];
+++	char* nextphrase = NULL;
+++	int phrasesCounter;
+++	do
+++	{
+++		printf("Type a few phrases seperated by space  (q - to quit):\n");
+++		fgets(phrases, BUFFER_SIZE, stdin);
+++		phrases[strlen(phrases) - 1] = '\0';
+++		if (strcmp(phrases, "q") != 0)
+++		{
+++			nextphrase = strtok(phrases, " ");
+++			phrasesCounter = 1;
+++			while (nextphrase)
+++			{
+++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+++				nextphrase = strtok(NULL, " ");
+++			}
+++		}
+++	} while (strcmp(phrases, "q") != 0);
+++	printf("*** End of Tokenizing Words Demo ***\n\n");
+++
+++	return 0;
+++}
+++
+++
+++
+++	
++diff --git a/V2/Tokenzing/Tokenzing.h b/V2/main/tokenizing.h
++similarity index 91%
++rename from V2/Tokenzing/Tokenzing.h
++rename to V2/main/tokenizing.h
++index c8bfdb8..d96fde1 100644
++--- a/V2/Tokenzing/Tokenzing.h
+++++ b/V2/main/tokenizing.h
++@@ -1,15 +1,15 @@
++-#ifndef _TOKENIZING_H
++-#define _TOKENIZING_H
++-
++-#include <stdio.h>
++-#include <string.h>
++-
++-void tokenizing(void);
++-
++-int main() {
++-    // Call your tokenizing function or include it in your main function
++-    tokenizing();
++-
++-    return 0;
++-}
+++#ifndef _TOKENIZING_H
+++#define _TOKENIZING_H
+++
+++#include <stdio.h>
+++#include <string.h>
+++
+++void tokenizing(void);
+++
+++int main() {
+++    // Call your tokenizing function or include it in your main function
+++    tokenizing();
+++
+++    return 0;
+++}
++ #endif 
++\ No newline at end of file
++diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/tokenizing/Tokenizing v2 PM-notes.docx
++similarity index 100%
++rename from V2/Tokenzing/Tokenizing v2 PM-notes.docx
++rename to V2/tokenizing/Tokenizing v2 PM-notes.docx
++diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx
++similarity index 100%
++rename from V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
++rename to V2/tokenizing/Tokenzing_v2_test-cases.xlsx
++diff --git a/V2/tokenizing/tokenizing.c b/V2/tokenizing/tokenizing.c
++new file mode 100644
++index 0000000..aa1e13a
++--- /dev/null
+++++ b/V2/tokenizing/tokenizing.c
++@@ -0,0 +1,62 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 300
+++#include "Tokenzing.h"
+++
+++/* Version 1 */
+++void tokenizing(void)
+++{
+++	/*printf("*** Start of Tokenizing Words Demo ***\n");
+++	char words[BUFFER_SIZE];
+++	char* nextWord = NULL;
+++	int wordsCounter;
+++	do {
+++		printf("Type a few words seperated by space  (q - to quit):\n");
+++		fgets(words, BUFFER_SIZE, stdin);
+++		words[strlen(words) - 1] = '\0';
+++		if (strcmp(words, "q") != 0) {
+++			nextWord = strtok(words, " ");
+++			wordsCounter = 1;
+++			while (nextWord) {
+++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+++				nextWord = strtok(NULL, " ");
+++
+++			}
+++		}
+++	} while (strcmp(words, "q") != 0);
+++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+++
+++
+++
+++
+++
+++
+++
+++	/* Version 2 */
+++	printf("*** Start of Tokenizing Words Demo ***\n");
+++	char phrases[BUFFER_SIZE];
+++	char* nextphrase = NULL;
+++	int phrasesCounter;
+++	do
+++	{
+++		printf("Type a few phrases seperated by space  (q - to quit):\n");
+++		fgets(phrases, BUFFER_SIZE, stdin);
+++		phrases[strlen(phrases) - 1] = '\0';
+++		if (strcmp(phrases, "q") != 0)
+++		{
+++			nextphrase = strtok(phrases, " ");
+++			phrasesCounter = 1;
+++			while (nextphrase)
+++			{
+++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+++				nextphrase = strtok(NULL, " ");
+++			}
+++		}
+++	} while (strcmp(phrases, "q") != 0);
+++	printf("*** End of Tokenizing Words Demo ***\n\n");
+++
+++	return 0;
+++}
+++
+++
+++
+++	
++diff --git a/V2/tokenizing/tokenizing.h b/V2/tokenizing/tokenizing.h
++new file mode 100644
++index 0000000..d96fde1
++--- /dev/null
+++++ b/V2/tokenizing/tokenizing.h
++@@ -0,0 +1,15 @@
+++#ifndef _TOKENIZING_H
+++#define _TOKENIZING_H
+++
+++#include <stdio.h>
+++#include <string.h>
+++
+++void tokenizing(void);
+++
+++int main() {
+++    // Call your tokenizing function or include it in your main function
+++    tokenizing();
+++
+++    return 0;
+++}
+++#endif 
++\ No newline at end of file
++
++commit b3a93cc2072faf105ab22552011b51ace61475d4
++Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
++Date:   Fri Dec 8 23:48:26 2023 -0500
++
++    Add files via upload
++
++diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/Tokenzing/Tokenizing v2 PM-notes.docx
++new file mode 100644
++index 0000000..a9a5ded
++--- /dev/null
+++++ b/V2/Tokenzing/Tokenizing v2 PM-notes.docx	
++@@ -0,0 +1,3 @@
+++                            Tokenizing v2 PM-notes
+++Basically this was the same process as v1 and even the code of the Tokenizing v2 was  basically exactly the same as v1 just changed to every phrase in the sentence instead of every word that's it 
+++                                       
++diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
++new file mode 100644
++index 0000000..92459be
++Binary files /dev/null and b/V2/Tokenzing/Tokenizing.zip differ
++diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
++new file mode 100644
++index 0000000..e69de29
++diff --git a/V2/Tokenzing/Tokenzing.c b/V2/Tokenzing/Tokenzing.c
++new file mode 100644
++index 0000000..734c7c6
++--- /dev/null
+++++ b/V2/Tokenzing/Tokenzing.c
++@@ -0,0 +1,62 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 300
+++#include "Tokenzing.h"
+++
+++/* Version 1 */
+++void tokenizing(void)
+++{
+++	/*printf("*** Start of Tokenizing Words Demo ***\n");
+++	char words[BUFFER_SIZE];
+++	char* nextWord = NULL;
+++	int wordsCounter;
+++	do {
+++		printf("Type a few words seperated by space  (q - to quit):\n");
+++		fgets(words, BUFFER_SIZE, stdin);
+++		words[strlen(words) - 1] = '\0';
+++		if (strcmp(words, "q") != 0) {
+++			nextWord = strtok(words, " ");
+++			wordsCounter = 1;
+++			while (nextWord) {
+++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+++				nextWord = strtok(NULL, " ");
+++
+++			}
+++		}
+++	} while (strcmp(words, "q") != 0);
+++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+++
+++
+++
+++
+++
+++
+++
+++	/* Version 2 */
+++	printf("*** Start of Tokenizing Words Demo ***\n");
+++	char phrases[BUFFER_SIZE];
+++	char* nextphrase = NULL;
+++	int phrasesCounter;
+++	do
+++	{
+++		printf("Type a few phrases seperated by space  (q - to quit):\n");
+++		fgets(phrases, BUFFER_SIZE, stdin);
+++		phrases[strlen(phrases) - 1] = '\0';
+++		if (strcmp(phrases, "q") != 0)
+++		{
+++			nextphrase = strtok(phrases, " ");
+++			phrasesCounter = 1;
+++			while (nextphrase)
+++			{
+++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+++				nextphrase = strtok(NULL, " ");
+++			}
+++		}
+++	} while (strcmp(phrases, "q") != 0);
+++	printf("*** End of Tokenizing Words Demo ***\n\n");
+++
+++	return 0;
+++}
+++
+++
+++
+++	
++diff --git a/V2/Tokenzing/Tokenzing.h b/V2/Tokenzing/Tokenzing.h
++new file mode 100644
++index 0000000..c8bfdb8
++--- /dev/null
+++++ b/V2/Tokenzing/Tokenzing.h
++@@ -0,0 +1,15 @@
+++#ifndef _TOKENIZING_H
+++#define _TOKENIZING_H
+++
+++#include <stdio.h>
+++#include <string.h>
+++
+++void tokenizing(void);
+++
+++int main() {
+++    // Call your tokenizing function or include it in your main function
+++    tokenizing();
+++
+++    return 0;
+++}
+++#endif 
++\ No newline at end of file
++diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
++new file mode 100644
++index 0000000..cb18ef6
++Binary files /dev/null and b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx differ
++
++commit a59e9df43a0eb5e8a9a56bf396fa2e938c3698ad
++Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
++Date:   Fri Dec 8 23:47:17 2023 -0500
++
++    Add files via upload
++
++diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
++new file mode 100644
++index 0000000..92459be
++Binary files /dev/null and b/V2/Tokenizing.zip differ
++
++commit 91039924c420b1f4e2573bfb2371b23dc5645a4e
++Author: Axton Smith <axtonsmith@gmail.com>
++Date:   Fri Dec 8 22:22:30 2023 -0500
++
++    Add manipulations and conversions test cases to Final-Project-Test-Cases.xlsx
++
++diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
++new file mode 100644
++index 0000000..814fb41
++Binary files /dev/null and b/V2/Final-Project-Plan.xlsx differ
++diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
++new file mode 100644
++index 0000000..40e66b0
++Binary files /dev/null and b/V2/Final-Project-Test-Cases.xlsx differ
++diff --git a/V2/conversions/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
++index 43a8d2a..f447878 100644
++Binary files a/V2/conversions/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
++diff --git a/V2/main/converting.c b/V2/main/converting.c
++new file mode 100644
++index 0000000..9f0d0ac
++--- /dev/null
+++++ b/V2/main/converting.c
++@@ -0,0 +1,47 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++
+++#include "converting.h"
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting() {
+++/* Version 1 */
+++	printf("*** Start of Converting Strings to int Demo ***\n");
+++	char intString[BUFFER_SIZE];
+++	int intNumber;
+++	do
+++	{
+++		printf("Type an int numeric string (q - to quit):\n");
+++		fgets(intString, BUFFER_SIZE, stdin);
+++		intString[strlen(intString) - 1] = '\0';
+++		if (strcmp(intString, "q") != 0)
+++		{
+++			intNumber = atoi(intString);
+++			printf("Converted number is %d\n", intNumber);
+++		}
+++	}
+++	while (strcmp(intString, "q") != 0);
+++	printf("*** End of Converting Strings to int Demo ***\n\n");
+++
+++/* Version 2 */
+++	printf("*** Start of Converting Strings to double Demo ***\n");
+++	char doubleString[BUFFER_SIZE];
+++	double doubleNumber;
+++	do
+++	{
+++		printf("Type the double numeric string (q - to quit):\n");
+++		fgets(doubleString, BUFFER_SIZE, stdin);
+++		doubleString[strlen(doubleString) - 1] = '\0';
+++		if ((strcmp(doubleString, "q") != 0))
+++		{
+++			doubleNumber = atof(doubleString);
+++			printf("Converted number is %f\n", doubleNumber);
+++		}
+++	} while (strcmp(doubleString, "q") != 0);
+++	printf("*** End of Converting Strings to double Demo ***\n\n");
+++
+++/* Version 3 */
+++//>> insert here
+++
+++
+++}
++diff --git a/V2/main/converting.h b/V2/main/converting.h
++new file mode 100644
++index 0000000..94e86ab
++--- /dev/null
+++++ b/V2/main/converting.h
++@@ -0,0 +1,11 @@
+++#ifndef _CONVERTING_H_
+++#define _CONVERTING_H_
+++
+++#include <stdio.h>
+++#include <string.h>
+++#include <stdlib.h>
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/V2/main/manipulating.c b/V2/main/manipulating.c
++new file mode 100644
++index 0000000..7ba26cd
++--- /dev/null
+++++ b/V2/main/manipulating.c
++@@ -0,0 +1,61 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++#include "manipulating.h"
+++
+++// V1
+++
+++void manipulating(void) {
+++	printf("*** Start of Concatenating Strings Demo ***\n");
+++	char string1[BUFFER_SIZE];
+++	char string2[BUFFER_SIZE];
+++	do {
+++		//Prompt for first string
+++		printf("Type the 1st string (q - to quit):\n");
+++		fgets(string1, BUFFER_SIZE, stdin);
+++		string1[strlen(string1) - 1] = '\0';
+++		//if q was entered quit program
+++		if ((strcmp(string1, "q") != 0)) {
+++			printf("Type the 2nd string:\n");
+++			//promt for 2nd string
+++			fgets(string2, BUFFER_SIZE, stdin);
+++			string2[strlen(string2) - 1] = '\0';
+++			//concatenate string
+++			strcat(string1, string2);
+++			printf("Concatenated string is \'%s\'\n", string1);
+++		}
+++	} while (strcmp(string1, "q") != 0);
+++	printf("*** End of Concatenating Strings Demo ***\n\n");
+++
+++	//V2
+++	printf("***Start of Comparing Strings Demon***\n");
+++	char compare1[BUFFER_SIZE];
+++	char compare2[BUFFER_SIZE];
+++	int result;
+++	do {
+++		//Receive user input for the 1st string
+++		printf("Type the 1st string to compare (q - to quit):\n");
+++		fgets(compare1, BUFFER_SIZE, stdin);
+++		//Add an ending NULL to the 1st string
+++		compare1[strlen(compare1) - 1] = '\0';
+++		//Check that the user did not input 'q' to quit
+++		if (strcmp(compare1, "q") != 0) {
+++			//Receive user input for the 2nd string
+++			printf("Type the 2nd string to compare:\n");
+++			fgets(compare2, BUFFER_SIZE, stdin);
+++			//Add an ending NULL to the 2nd string
+++			compare2[strlen(compare2) - 1] = '\0';
+++			result = strcmp(compare1, compare2);
+++			//Check if the 1st string < than the 2nd string
+++			if (result < 0)
+++				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
+++			//Check if the strings are equal
+++			else if (result == 0)
+++				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
+++			//Check if the first string is greater than the 2nd string
+++			else
+++				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
+++
+++		}
+++	} while (strcmp(compare1, "q") != 0);
+++	printf("*** End of Comparing Strings Demon ***\n\n");
+++}
++\ No newline at end of file
++diff --git a/V2/main/manipulating.h b/V2/main/manipulating.h
++new file mode 100644
++index 0000000..434f748
++--- /dev/null
+++++ b/V2/main/manipulating.h
++@@ -0,0 +1,6 @@
+++#ifndef _MANIPULATING_H_
+++#define _MANIPULATING_H_
+++#include <stdio.h>
+++#include <string.h>
+++void manipulating(void);
+++#endif
++\ No newline at end of file
++diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
++index 323e377..dc49fc2 100644
++Binary files a/V2/manipulations/manipulation-test-cases.xlsx and b/V2/manipulations/manipulation-test-cases.xlsx differ
++
++commit a43fbc4a9b1fb232cd9c5c46d4bbff26133c5afb
++Author: Axton Smith <axtonsmith@gmail.com>
++Date:   Fri Dec 8 22:05:42 2023 -0500
++
++    Add conversions module to V2
++
++diff --git a/V1/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
++deleted file mode 100644
++index ea57e7e..0000000
++Binary files a/V1/conversions/conversionsV1.zip and /dev/null differ
++diff --git a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
++deleted file mode 100644
++index dc61b8f..0000000
++--- a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+++++ /dev/null
++@@ -1,4 +0,0 @@
++-Conversion Module
++-This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++-Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++-We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
++diff --git a/V1/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
++deleted file mode 100644
++index a2cffb9..0000000
++Binary files a/V1/conversions/conversionsV1/conversions-test-cases.xlsx and /dev/null differ
++diff --git a/V1/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
++deleted file mode 100644
++index dc92171..0000000
++--- a/V1/conversions/conversionsV1/converting.c
+++++ /dev/null
++@@ -1,34 +0,0 @@
++-#define _CRT_SECURE_NO_WARNINGS
++-#define BUFFER_SIZE 80
++-
++-#include "converting.h"
++-
++-// User inputs a number as a string, then it is returned as an int
++-void converting() {
++-/* Version 1 */
++-	printf("*** Start of Converting Strings to int Demo ***\n");
++-	char intString[BUFFER_SIZE];
++-	int intNumber;
++-	do
++-	{
++-		printf("Type an int numeric string (q - to quit):\n");
++-		fgets(intString, BUFFER_SIZE, stdin);
++-		intString[strlen(intString) - 1] = '\0';
++-		if (strcmp(intString, "q") != 0)
++-		{
++-			intNumber = atoi(intString);
++-			printf("Converted number is %d\n", intNumber);
++-		}
++-	}
++-	while (strcmp(intString, "q") != 0);
++-	printf("*** End of Converting Strings to int Demo ***\n\n");
++-
++-/* Version 2 */
++-//>> insert here
++-
++-
++-/* Version 3 */
++-//>> insert here
++-
++-
++-}
++diff --git a/V1/conversions/converting.c b/V1/conversions/templates/converting.c
++similarity index 100%
++rename from V1/conversions/converting.c
++rename to V1/conversions/templates/converting.c
++diff --git a/V1/conversions/converting_header.png b/V1/conversions/templates/converting_header.png
++similarity index 100%
++rename from V1/conversions/converting_header.png
++rename to V1/conversions/templates/converting_header.png
++diff --git a/V1/conversions/converting_v1.png b/V1/conversions/templates/converting_v1.png
++similarity index 100%
++rename from V1/conversions/converting_v1.png
++rename to V1/conversions/templates/converting_v1.png
++diff --git a/V1/conversions/converting_v2.png b/V1/conversions/templates/converting_v2.png
++similarity index 100%
++rename from V1/conversions/converting_v2.png
++rename to V1/conversions/templates/converting_v2.png
++diff --git a/V1/conversions/converting_v3.png b/V1/conversions/templates/converting_v3.png
++similarity index 100%
++rename from V1/conversions/converting_v3.png
++rename to V1/conversions/templates/converting_v3.png
++diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/PM-Notes-AxtonSmith.docx
++similarity index 60%
++rename from V2/conversions/V1/PM-Notes-AxtonSmith.docx
++rename to V2/conversions/PM-Notes-AxtonSmith.docx
++index dc61b8f..eb38a98 100644
++--- a/V2/conversions/V1/PM-Notes-AxtonSmith.docx
+++++ b/V2/conversions/PM-Notes-AxtonSmith.docx
++@@ -2,3 +2,4 @@ Conversion Module
++ This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++ Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++ We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+++Version 2 of this module will convert the input into double values.
++diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
++deleted file mode 100644
++index 94e86ab..0000000
++--- a/V2/conversions/V1/converting.h
+++++ /dev/null
++@@ -1,11 +0,0 @@
++-#ifndef _CONVERTING_H_
++-#define _CONVERTING_H_
++-
++-#include <stdio.h>
++-#include <string.h>
++-#include <stdlib.h>
++-
++-// User inputs a number as a string, then it is returned as an int
++-void converting(void);
++-
++-#endif
++\ No newline at end of file
++diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
++deleted file mode 100644
++index 6a8e436..0000000
++--- a/V2/conversions/V1/main.c
+++++ /dev/null
++@@ -1,7 +0,0 @@
++-#include "converting.h"
++-
++-int main(void)
++-{
++-	converting();
++-	return 0;
++-}
++\ No newline at end of file
++diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
++deleted file mode 100644
++index dc61b8f..0000000
++--- a/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+++++ /dev/null
++@@ -1,4 +0,0 @@
++-Conversion Module
++-This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++-Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++-We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
++diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
++deleted file mode 100644
++index a2cffb9..0000000
++Binary files a/V2/conversions/V2/conversions-test-cases.xlsx and /dev/null differ
++diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
++deleted file mode 100644
++index dc92171..0000000
++--- a/V2/conversions/V2/converting.c
+++++ /dev/null
++@@ -1,34 +0,0 @@
++-#define _CRT_SECURE_NO_WARNINGS
++-#define BUFFER_SIZE 80
++-
++-#include "converting.h"
++-
++-// User inputs a number as a string, then it is returned as an int
++-void converting() {
++-/* Version 1 */
++-	printf("*** Start of Converting Strings to int Demo ***\n");
++-	char intString[BUFFER_SIZE];
++-	int intNumber;
++-	do
++-	{
++-		printf("Type an int numeric string (q - to quit):\n");
++-		fgets(intString, BUFFER_SIZE, stdin);
++-		intString[strlen(intString) - 1] = '\0';
++-		if (strcmp(intString, "q") != 0)
++-		{
++-			intNumber = atoi(intString);
++-			printf("Converted number is %d\n", intNumber);
++-		}
++-	}
++-	while (strcmp(intString, "q") != 0);
++-	printf("*** End of Converting Strings to int Demo ***\n\n");
++-
++-/* Version 2 */
++-//>> insert here
++-
++-
++-/* Version 3 */
++-//>> insert here
++-
++-
++-}
++diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
++deleted file mode 100644
++index 94e86ab..0000000
++--- a/V2/conversions/V2/converting.h
+++++ /dev/null
++@@ -1,11 +0,0 @@
++-#ifndef _CONVERTING_H_
++-#define _CONVERTING_H_
++-
++-#include <stdio.h>
++-#include <string.h>
++-#include <stdlib.h>
++-
++-// User inputs a number as a string, then it is returned as an int
++-void converting(void);
++-
++-#endif
++\ No newline at end of file
++diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
++deleted file mode 100644
++index 6a8e436..0000000
++--- a/V2/conversions/V2/main.c
+++++ /dev/null
++@@ -1,7 +0,0 @@
++-#include "converting.h"
++-
++-int main(void)
++-{
++-	converting();
++-	return 0;
++-}
++\ No newline at end of file
++diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
++similarity index 53%
++rename from V2/conversions/V1/conversions-test-cases.xlsx
++rename to V2/conversions/conversions-test-cases.xlsx
++index a2cffb9..43a8d2a 100644
++Binary files a/V2/conversions/V1/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
++diff --git a/V2/conversions/V1/converting.c b/V2/conversions/converting.c
++similarity index 57%
++rename from V2/conversions/V1/converting.c
++rename to V2/conversions/converting.c
++index dc92171..9f0d0ac 100644
++--- a/V2/conversions/V1/converting.c
+++++ b/V2/conversions/converting.c
++@@ -24,8 +24,21 @@ void converting() {
++ 	printf("*** End of Converting Strings to int Demo ***\n\n");
++ 
++ /* Version 2 */
++-//>> insert here
++-
+++	printf("*** Start of Converting Strings to double Demo ***\n");
+++	char doubleString[BUFFER_SIZE];
+++	double doubleNumber;
+++	do
+++	{
+++		printf("Type the double numeric string (q - to quit):\n");
+++		fgets(doubleString, BUFFER_SIZE, stdin);
+++		doubleString[strlen(doubleString) - 1] = '\0';
+++		if ((strcmp(doubleString, "q") != 0))
+++		{
+++			doubleNumber = atof(doubleString);
+++			printf("Converted number is %f\n", doubleNumber);
+++		}
+++	} while (strcmp(doubleString, "q") != 0);
+++	printf("*** End of Converting Strings to double Demo ***\n\n");
++ 
++ /* Version 3 */
++ //>> insert here
++diff --git a/V1/conversions/conversionsV1/converting.h b/V2/conversions/converting.h
++similarity index 100%
++rename from V1/conversions/conversionsV1/converting.h
++rename to V2/conversions/converting.h
++diff --git a/V1/conversions/conversionsV1/main.c b/V2/conversions/main.c
++similarity index 100%
++rename from V1/conversions/conversionsV1/main.c
++rename to V2/conversions/main.c
++diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
++deleted file mode 100644
++index 88b340e..0000000
++--- a/V2/conversions/templates/converting.c
+++++ /dev/null
++@@ -1,16 +0,0 @@
++-#include "converting.h"
++-
++-void converting() {
++-/* Version 1 */
++->> insert here
++-
++-
++-/* Version 2 */
++->> insert here
++-
++-
++-/* Version 3 */
++->> insert here
++-
++-
++-}
++diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
++deleted file mode 100644
++index 4ffb3a8..0000000
++Binary files a/V2/conversions/templates/converting_header.png and /dev/null differ
++diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
++deleted file mode 100644
++index 50f5734..0000000
++Binary files a/V2/conversions/templates/converting_v1.png and /dev/null differ
++diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
++deleted file mode 100644
++index edcdf1e..0000000
++Binary files a/V2/conversions/templates/converting_v2.png and /dev/null differ
++diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
++deleted file mode 100644
++index 146285f..0000000
++Binary files a/V2/conversions/templates/converting_v3.png and /dev/null differ
++
++commit d381ca2bc9cb411356a214dcb09764517b1b8dba
++Author: brandondoray01 <117381471+brandondoray01@users.noreply.github.com>
++Date:   Fri Dec 8 18:43:36 2023 -0500
++
++    Add manipulations module to V2
++
++diff --git a/V2/manipulations/PM-Notes-Brandon-Doray.docx b/V2/manipulations/PM-Notes-Brandon-Doray.docx
++new file mode 100644
++index 0000000..f3443e8
++--- /dev/null
+++++ b/V2/manipulations/PM-Notes-Brandon-Doray.docx
++@@ -0,0 +1,25 @@
+++Manipulation Module
+++
+++//V1
+++
+++This module concatenates 2 strings sized to a defined macro.
+++
+++Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
+++
+++An input of `q' was tested to ensure it would result in ending the program.
+++
+++A string that is greater than the initialized memory was tested to ensure it would not crash the program.
+++
+++//V2
+++
+++V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
+++
+++This function will only compare strings up until it hits a NULL or a char that does not match.
+++
+++If it hits a char that does not match, anything after that will not be considered in the comparison.
+++
+++The chars are evaluated using their ASCII value.
+++
+++The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
+++
+++
++diff --git a/V2/manipulations/manipulatemain.c b/V2/manipulations/manipulatemain.c
++new file mode 100644
++index 0000000..1bcc78d
++--- /dev/null
+++++ b/V2/manipulations/manipulatemain.c
++@@ -0,0 +1,5 @@
+++int main(void) {
+++
+++	manipulating();
+++	return 0;
+++}
++\ No newline at end of file
++diff --git a/V2/manipulations/manipulating.c b/V2/manipulations/manipulating.c
++new file mode 100644
++index 0000000..7ba26cd
++--- /dev/null
+++++ b/V2/manipulations/manipulating.c
++@@ -0,0 +1,61 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++#include "manipulating.h"
+++
+++// V1
+++
+++void manipulating(void) {
+++	printf("*** Start of Concatenating Strings Demo ***\n");
+++	char string1[BUFFER_SIZE];
+++	char string2[BUFFER_SIZE];
+++	do {
+++		//Prompt for first string
+++		printf("Type the 1st string (q - to quit):\n");
+++		fgets(string1, BUFFER_SIZE, stdin);
+++		string1[strlen(string1) - 1] = '\0';
+++		//if q was entered quit program
+++		if ((strcmp(string1, "q") != 0)) {
+++			printf("Type the 2nd string:\n");
+++			//promt for 2nd string
+++			fgets(string2, BUFFER_SIZE, stdin);
+++			string2[strlen(string2) - 1] = '\0';
+++			//concatenate string
+++			strcat(string1, string2);
+++			printf("Concatenated string is \'%s\'\n", string1);
+++		}
+++	} while (strcmp(string1, "q") != 0);
+++	printf("*** End of Concatenating Strings Demo ***\n\n");
+++
+++	//V2
+++	printf("***Start of Comparing Strings Demon***\n");
+++	char compare1[BUFFER_SIZE];
+++	char compare2[BUFFER_SIZE];
+++	int result;
+++	do {
+++		//Receive user input for the 1st string
+++		printf("Type the 1st string to compare (q - to quit):\n");
+++		fgets(compare1, BUFFER_SIZE, stdin);
+++		//Add an ending NULL to the 1st string
+++		compare1[strlen(compare1) - 1] = '\0';
+++		//Check that the user did not input 'q' to quit
+++		if (strcmp(compare1, "q") != 0) {
+++			//Receive user input for the 2nd string
+++			printf("Type the 2nd string to compare:\n");
+++			fgets(compare2, BUFFER_SIZE, stdin);
+++			//Add an ending NULL to the 2nd string
+++			compare2[strlen(compare2) - 1] = '\0';
+++			result = strcmp(compare1, compare2);
+++			//Check if the 1st string < than the 2nd string
+++			if (result < 0)
+++				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
+++			//Check if the strings are equal
+++			else if (result == 0)
+++				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
+++			//Check if the first string is greater than the 2nd string
+++			else
+++				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
+++
+++		}
+++	} while (strcmp(compare1, "q") != 0);
+++	printf("*** End of Comparing Strings Demon ***\n\n");
+++}
++\ No newline at end of file
++diff --git a/V2/manipulations/manipulating.h b/V2/manipulations/manipulating.h
++new file mode 100644
++index 0000000..434f748
++--- /dev/null
+++++ b/V2/manipulations/manipulating.h
++@@ -0,0 +1,6 @@
+++#ifndef _MANIPULATING_H_
+++#define _MANIPULATING_H_
+++#include <stdio.h>
+++#include <string.h>
+++void manipulating(void);
+++#endif
++\ No newline at end of file
++diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
++new file mode 100644
++index 0000000..323e377
++Binary files /dev/null and b/V2/manipulations/manipulation-test-cases.xlsx differ
++
++commit 762b012570748db01ca39e1b888a916f027f5c43
++Author: Axton Smith <axtonsmith@gmail.com>
++Date:   Fri Dec 8 18:02:18 2023 -0500
++
++    Added main and conversions directories to V2
++
++diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
++new file mode 100644
++index 0000000..dc61b8f
++--- /dev/null
+++++ b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
++@@ -0,0 +1,4 @@
+++Conversion Module
+++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
++diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/V1/conversions-test-cases.xlsx
++new file mode 100644
++index 0000000..a2cffb9
++Binary files /dev/null and b/V2/conversions/V1/conversions-test-cases.xlsx differ
++diff --git a/V2/conversions/V1/converting.c b/V2/conversions/V1/converting.c
++new file mode 100644
++index 0000000..dc92171
++--- /dev/null
+++++ b/V2/conversions/V1/converting.c
++@@ -0,0 +1,34 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++
+++#include "converting.h"
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting() {
+++/* Version 1 */
+++	printf("*** Start of Converting Strings to int Demo ***\n");
+++	char intString[BUFFER_SIZE];
+++	int intNumber;
+++	do
+++	{
+++		printf("Type an int numeric string (q - to quit):\n");
+++		fgets(intString, BUFFER_SIZE, stdin);
+++		intString[strlen(intString) - 1] = '\0';
+++		if (strcmp(intString, "q") != 0)
+++		{
+++			intNumber = atoi(intString);
+++			printf("Converted number is %d\n", intNumber);
+++		}
+++	}
+++	while (strcmp(intString, "q") != 0);
+++	printf("*** End of Converting Strings to int Demo ***\n\n");
+++
+++/* Version 2 */
+++//>> insert here
+++
+++
+++/* Version 3 */
+++//>> insert here
+++
+++
+++}
++diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
++new file mode 100644
++index 0000000..94e86ab
++--- /dev/null
+++++ b/V2/conversions/V1/converting.h
++@@ -0,0 +1,11 @@
+++#ifndef _CONVERTING_H_
+++#define _CONVERTING_H_
+++
+++#include <stdio.h>
+++#include <string.h>
+++#include <stdlib.h>
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
++new file mode 100644
++index 0000000..6a8e436
++--- /dev/null
+++++ b/V2/conversions/V1/main.c
++@@ -0,0 +1,7 @@
+++#include "converting.h"
+++
+++int main(void)
+++{
+++	converting();
+++	return 0;
+++}
++\ No newline at end of file
++diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
++new file mode 100644
++index 0000000..dc61b8f
++--- /dev/null
+++++ b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
++@@ -0,0 +1,4 @@
+++Conversion Module
+++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
++diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
++new file mode 100644
++index 0000000..a2cffb9
++Binary files /dev/null and b/V2/conversions/V2/conversions-test-cases.xlsx differ
++diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
++new file mode 100644
++index 0000000..dc92171
++--- /dev/null
+++++ b/V2/conversions/V2/converting.c
++@@ -0,0 +1,34 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++
+++#include "converting.h"
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting() {
+++/* Version 1 */
+++	printf("*** Start of Converting Strings to int Demo ***\n");
+++	char intString[BUFFER_SIZE];
+++	int intNumber;
+++	do
+++	{
+++		printf("Type an int numeric string (q - to quit):\n");
+++		fgets(intString, BUFFER_SIZE, stdin);
+++		intString[strlen(intString) - 1] = '\0';
+++		if (strcmp(intString, "q") != 0)
+++		{
+++			intNumber = atoi(intString);
+++			printf("Converted number is %d\n", intNumber);
+++		}
+++	}
+++	while (strcmp(intString, "q") != 0);
+++	printf("*** End of Converting Strings to int Demo ***\n\n");
+++
+++/* Version 2 */
+++//>> insert here
+++
+++
+++/* Version 3 */
+++//>> insert here
+++
+++
+++}
++diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
++new file mode 100644
++index 0000000..94e86ab
++--- /dev/null
+++++ b/V2/conversions/V2/converting.h
++@@ -0,0 +1,11 @@
+++#ifndef _CONVERTING_H_
+++#define _CONVERTING_H_
+++
+++#include <stdio.h>
+++#include <string.h>
+++#include <stdlib.h>
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
++new file mode 100644
++index 0000000..6a8e436
++--- /dev/null
+++++ b/V2/conversions/V2/main.c
++@@ -0,0 +1,7 @@
+++#include "converting.h"
+++
+++int main(void)
+++{
+++	converting();
+++	return 0;
+++}
++\ No newline at end of file
++diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
++new file mode 100644
++index 0000000..88b340e
++--- /dev/null
+++++ b/V2/conversions/templates/converting.c
++@@ -0,0 +1,16 @@
+++#include "converting.h"
+++
+++void converting() {
+++/* Version 1 */
+++>> insert here
+++
+++
+++/* Version 2 */
+++>> insert here
+++
+++
+++/* Version 3 */
+++>> insert here
+++
+++
+++}
++diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
++new file mode 100644
++index 0000000..4ffb3a8
++Binary files /dev/null and b/V2/conversions/templates/converting_header.png differ
++diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
++new file mode 100644
++index 0000000..50f5734
++Binary files /dev/null and b/V2/conversions/templates/converting_v1.png differ
++diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
++new file mode 100644
++index 0000000..edcdf1e
++Binary files /dev/null and b/V2/conversions/templates/converting_v2.png differ
++diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
++new file mode 100644
++index 0000000..146285f
++Binary files /dev/null and b/V2/conversions/templates/converting_v3.png differ
++diff --git a/V2/main/main.c b/V2/main/main.c
++new file mode 100644
++index 0000000..5062fbb
++--- /dev/null
+++++ b/V2/main/main.c
++@@ -0,0 +1,12 @@
+++#include "fundamentals.h"
+++#include "manipulating.h"
+++#include "tokenizing.h"
+++#include "converting.h"
+++
+++int main(void)
+++{
+++	fundamentals();
+++	manipulating();
+++	tokenizing();
+++	converting();
+++}
++
++commit 71381063066ca1afc0b8ae3b42200293548cf6bd
++Author: Axton Smith <axtonsmith@gmail.com>
++Date:   Fri Dec 8 17:55:59 2023 -0500
++
++    Moved all files to V1, Add V2 directory
++
++diff --git a/conversions/PM-Notes-AxtonSmith.docx b/V1/conversions/PM-Notes-AxtonSmith.docx
++similarity index 100%
++rename from conversions/PM-Notes-AxtonSmith.docx
++rename to V1/conversions/PM-Notes-AxtonSmith.docx
++diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
++similarity index 100%
++rename from conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
++rename to V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
++diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
++similarity index 100%
++rename from conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
++rename to V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
++diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
++similarity index 100%
++rename from conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
++rename to V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
++diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
++similarity index 100%
++rename from conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
++rename to V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
++diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
++similarity index 100%
++rename from conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
++rename to V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
++diff --git a/conversions/code/.vs/v1/v17/.suo b/V1/conversions/code/.vs/v1/v17/.suo
++similarity index 100%
++rename from conversions/code/.vs/v1/v17/.suo
++rename to V1/conversions/code/.vs/v1/v17/.suo
++diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/V1/conversions/code/.vs/v1/v17/Browse.VC.db
++similarity index 100%
++rename from conversions/code/.vs/v1/v17/Browse.VC.db
++rename to V1/conversions/code/.vs/v1/v17/Browse.VC.db
++diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/V1/conversions/code/.vs/v1/v17/Solution.VC.db
++similarity index 100%
++rename from conversions/code/.vs/v1/v17/Solution.VC.db
++rename to V1/conversions/code/.vs/v1/v17/Solution.VC.db
++diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
++similarity index 100%
++rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
++rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
++diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
++similarity index 100%
++rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
++rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
++diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
++similarity index 100%
++rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
++rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
++diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
++similarity index 100%
++rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
++rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
++diff --git a/conversions/code/converting.c b/V1/conversions/code/converting.c
++similarity index 100%
++rename from conversions/code/converting.c
++rename to V1/conversions/code/converting.c
++diff --git a/conversions/code/converting.h b/V1/conversions/code/converting.h
++similarity index 100%
++rename from conversions/code/converting.h
++rename to V1/conversions/code/converting.h
++diff --git a/conversions/code/main.c b/V1/conversions/code/main.c
++similarity index 100%
++rename from conversions/code/main.c
++rename to V1/conversions/code/main.c
++diff --git a/conversions/code/v1.sln b/V1/conversions/code/v1.sln
++similarity index 100%
++rename from conversions/code/v1.sln
++rename to V1/conversions/code/v1.sln
++diff --git a/conversions/code/v1.vcxproj b/V1/conversions/code/v1.vcxproj
++similarity index 100%
++rename from conversions/code/v1.vcxproj
++rename to V1/conversions/code/v1.vcxproj
++diff --git a/conversions/code/v1.vcxproj.filters b/V1/conversions/code/v1.vcxproj.filters
++similarity index 100%
++rename from conversions/code/v1.vcxproj.filters
++rename to V1/conversions/code/v1.vcxproj.filters
++diff --git a/conversions/code/v1.vcxproj.user b/V1/conversions/code/v1.vcxproj.user
++similarity index 100%
++rename from conversions/code/v1.vcxproj.user
++rename to V1/conversions/code/v1.vcxproj.user
++diff --git a/conversions/code/x64/Debug/converting.obj b/V1/conversions/code/x64/Debug/converting.obj
++similarity index 100%
++rename from conversions/code/x64/Debug/converting.obj
++rename to V1/conversions/code/x64/Debug/converting.obj
++diff --git a/conversions/code/x64/Debug/main.obj b/V1/conversions/code/x64/Debug/main.obj
++similarity index 100%
++rename from conversions/code/x64/Debug/main.obj
++rename to V1/conversions/code/x64/Debug/main.obj
++diff --git a/conversions/code/x64/Debug/v1.exe b/V1/conversions/code/x64/Debug/v1.exe
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.exe
++rename to V1/conversions/code/x64/Debug/v1.exe
++diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/V1/conversions/code/x64/Debug/v1.exe.recipe
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.exe.recipe
++rename to V1/conversions/code/x64/Debug/v1.exe.recipe
++diff --git a/conversions/code/x64/Debug/v1.ilk b/V1/conversions/code/x64/Debug/v1.ilk
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.ilk
++rename to V1/conversions/code/x64/Debug/v1.ilk
++diff --git a/conversions/code/x64/Debug/v1.log b/V1/conversions/code/x64/Debug/v1.log
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.log
++rename to V1/conversions/code/x64/Debug/v1.log
++diff --git a/conversions/code/x64/Debug/v1.pdb b/V1/conversions/code/x64/Debug/v1.pdb
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.pdb
++rename to V1/conversions/code/x64/Debug/v1.pdb
++diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
++rename to V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
++diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
++rename to V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
++diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
++rename to V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
++diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
++rename to V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
++diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
++rename to V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
++diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
++rename to V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
++diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
++rename to V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
++diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
++rename to V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
++diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
++similarity index 100%
++rename from conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
++rename to V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
++diff --git a/conversions/code/x64/Debug/vc143.idb b/V1/conversions/code/x64/Debug/vc143.idb
++similarity index 100%
++rename from conversions/code/x64/Debug/vc143.idb
++rename to V1/conversions/code/x64/Debug/vc143.idb
++diff --git a/conversions/code/x64/Debug/vc143.pdb b/V1/conversions/code/x64/Debug/vc143.pdb
++similarity index 100%
++rename from conversions/code/x64/Debug/vc143.pdb
++rename to V1/conversions/code/x64/Debug/vc143.pdb
++diff --git a/conversions/conversions-test-cases.xlsx b/V1/conversions/conversions-test-cases.xlsx
++similarity index 100%
++rename from conversions/conversions-test-cases.xlsx
++rename to V1/conversions/conversions-test-cases.xlsx
++diff --git a/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
++similarity index 100%
++rename from conversions/conversionsV1.zip
++rename to V1/conversions/conversionsV1.zip
++diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
++similarity index 100%
++rename from conversions/conversionsV1/PM-Notes-AxtonSmith.docx
++rename to V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
++diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
++similarity index 100%
++rename from conversions/conversionsV1/conversions-test-cases.xlsx
++rename to V1/conversions/conversionsV1/conversions-test-cases.xlsx
++diff --git a/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
++similarity index 100%
++rename from conversions/conversionsV1/converting.c
++rename to V1/conversions/conversionsV1/converting.c
++diff --git a/conversions/conversionsV1/converting.h b/V1/conversions/conversionsV1/converting.h
++similarity index 100%
++rename from conversions/conversionsV1/converting.h
++rename to V1/conversions/conversionsV1/converting.h
++diff --git a/conversions/conversionsV1/main.c b/V1/conversions/conversionsV1/main.c
++similarity index 100%
++rename from conversions/conversionsV1/main.c
++rename to V1/conversions/conversionsV1/main.c
++diff --git a/conversions/converting.c b/V1/conversions/converting.c
++similarity index 100%
++rename from conversions/converting.c
++rename to V1/conversions/converting.c
++diff --git a/conversions/converting_header.png b/V1/conversions/converting_header.png
++similarity index 100%
++rename from conversions/converting_header.png
++rename to V1/conversions/converting_header.png
++diff --git a/conversions/converting_v1.png b/V1/conversions/converting_v1.png
++similarity index 100%
++rename from conversions/converting_v1.png
++rename to V1/conversions/converting_v1.png
++diff --git a/conversions/converting_v2.png b/V1/conversions/converting_v2.png
++similarity index 100%
++rename from conversions/converting_v2.png
++rename to V1/conversions/converting_v2.png
++diff --git a/conversions/converting_v3.png b/V1/conversions/converting_v3.png
++similarity index 100%
++rename from conversions/converting_v3.png
++rename to V1/conversions/converting_v3.png
++diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/V1/fundamentals/PM-Notes-AxtonSmith.docx
++similarity index 100%
++rename from fundamentals/PM-Notes-AxtonSmith.docx
++rename to V1/fundamentals/PM-Notes-AxtonSmith.docx
++diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
++similarity index 100%
++rename from fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
++rename to V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
++diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
++similarity index 100%
++rename from fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
++rename to V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
++diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
++similarity index 100%
++rename from fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
++rename to V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
++diff --git a/fundamentals/code/.vs/project/v17/.suo b/V1/fundamentals/code/.vs/project/v17/.suo
++similarity index 100%
++rename from fundamentals/code/.vs/project/v17/.suo
++rename to V1/fundamentals/code/.vs/project/v17/.suo
++diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/V1/fundamentals/code/.vs/project/v17/Browse.VC.db
++similarity index 100%
++rename from fundamentals/code/.vs/project/v17/Browse.VC.db
++rename to V1/fundamentals/code/.vs/project/v17/Browse.VC.db
++diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/V1/fundamentals/code/.vs/project/v17/Solution.VC.db
++similarity index 100%
++rename from fundamentals/code/.vs/project/v17/Solution.VC.db
++rename to V1/fundamentals/code/.vs/project/v17/Solution.VC.db
++diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
++similarity index 100%
++rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
++rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
++diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
++similarity index 100%
++rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
++rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
++diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
++similarity index 100%
++rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
++rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
++diff --git a/fundamentals/code/fundamentals.c b/V1/fundamentals/code/fundamentals.c
++similarity index 100%
++rename from fundamentals/code/fundamentals.c
++rename to V1/fundamentals/code/fundamentals.c
++diff --git a/fundamentals/code/fundamentals.h b/V1/fundamentals/code/fundamentals.h
++similarity index 100%
++rename from fundamentals/code/fundamentals.h
++rename to V1/fundamentals/code/fundamentals.h
++diff --git a/fundamentals/code/main.c b/V1/fundamentals/code/main.c
++similarity index 100%
++rename from fundamentals/code/main.c
++rename to V1/fundamentals/code/main.c
++diff --git a/fundamentals/code/project.sln b/V1/fundamentals/code/project.sln
++similarity index 100%
++rename from fundamentals/code/project.sln
++rename to V1/fundamentals/code/project.sln
++diff --git a/fundamentals/code/project.vcxproj b/V1/fundamentals/code/project.vcxproj
++similarity index 100%
++rename from fundamentals/code/project.vcxproj
++rename to V1/fundamentals/code/project.vcxproj
++diff --git a/fundamentals/code/project.vcxproj.filters b/V1/fundamentals/code/project.vcxproj.filters
++similarity index 100%
++rename from fundamentals/code/project.vcxproj.filters
++rename to V1/fundamentals/code/project.vcxproj.filters
++diff --git a/fundamentals/code/project.vcxproj.user b/V1/fundamentals/code/project.vcxproj.user
++similarity index 100%
++rename from fundamentals/code/project.vcxproj.user
++rename to V1/fundamentals/code/project.vcxproj.user
++diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/V1/fundamentals/code/x64/Debug/fundamentals.obj
++similarity index 100%
++rename from fundamentals/code/x64/Debug/fundamentals.obj
++rename to V1/fundamentals/code/x64/Debug/fundamentals.obj
++diff --git a/fundamentals/code/x64/Debug/main.obj b/V1/fundamentals/code/x64/Debug/main.obj
++similarity index 100%
++rename from fundamentals/code/x64/Debug/main.obj
++rename to V1/fundamentals/code/x64/Debug/main.obj
++diff --git a/fundamentals/code/x64/Debug/project.exe b/V1/fundamentals/code/x64/Debug/project.exe
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.exe
++rename to V1/fundamentals/code/x64/Debug/project.exe
++diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/V1/fundamentals/code/x64/Debug/project.exe.recipe
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.exe.recipe
++rename to V1/fundamentals/code/x64/Debug/project.exe.recipe
++diff --git a/fundamentals/code/x64/Debug/project.ilk b/V1/fundamentals/code/x64/Debug/project.ilk
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.ilk
++rename to V1/fundamentals/code/x64/Debug/project.ilk
++diff --git a/fundamentals/code/x64/Debug/project.log b/V1/fundamentals/code/x64/Debug/project.log
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.log
++rename to V1/fundamentals/code/x64/Debug/project.log
++diff --git a/fundamentals/code/x64/Debug/project.pdb b/V1/fundamentals/code/x64/Debug/project.pdb
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.pdb
++rename to V1/fundamentals/code/x64/Debug/project.pdb
++diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
++rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
++diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
++rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
++diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
++rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
++diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
++rename to V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
++diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
++rename to V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
++diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
++rename to V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
++diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
++rename to V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
++diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
++rename to V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
++diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
++similarity index 100%
++rename from fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
++rename to V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
++diff --git a/fundamentals/code/x64/Debug/vc143.idb b/V1/fundamentals/code/x64/Debug/vc143.idb
++similarity index 100%
++rename from fundamentals/code/x64/Debug/vc143.idb
++rename to V1/fundamentals/code/x64/Debug/vc143.idb
++diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/V1/fundamentals/code/x64/Debug/vc143.pdb
++similarity index 100%
++rename from fundamentals/code/x64/Debug/vc143.pdb
++rename to V1/fundamentals/code/x64/Debug/vc143.pdb
++diff --git a/fundamentals/fundamentals-test-cases.xlsx b/V1/fundamentals/fundamentals-test-cases.xlsx
++similarity index 100%
++rename from fundamentals/fundamentals-test-cases.xlsx
++rename to V1/fundamentals/fundamentals-test-cases.xlsx
++diff --git a/fundamentals/fundamentals.c b/V1/fundamentals/fundamentals.c
++similarity index 100%
++rename from fundamentals/fundamentals.c
++rename to V1/fundamentals/fundamentals.c
++diff --git a/fundamentals/fundamentals_header.png b/V1/fundamentals/fundamentals_header.png
++similarity index 100%
++rename from fundamentals/fundamentals_header.png
++rename to V1/fundamentals/fundamentals_header.png
++diff --git a/fundamentals/fundamentals_v1.png b/V1/fundamentals/fundamentals_v1.png
++similarity index 100%
++rename from fundamentals/fundamentals_v1.png
++rename to V1/fundamentals/fundamentals_v1.png
++diff --git a/fundamentals/fundamentals_v2.png b/V1/fundamentals/fundamentals_v2.png
++similarity index 100%
++rename from fundamentals/fundamentals_v2.png
++rename to V1/fundamentals/fundamentals_v2.png
++diff --git a/fundamentals/fundamentals_v3.png b/V1/fundamentals/fundamentals_v3.png
++similarity index 100%
++rename from fundamentals/fundamentals_v3.png
++rename to V1/fundamentals/fundamentals_v3.png
++diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
++similarity index 100%
++rename from fundamentals/v1/PM-Notes-AxtonSmith.docx
++rename to V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
++diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/V1/fundamentals/v1/fundamentals-test-cases.xlsx
++similarity index 100%
++rename from fundamentals/v1/fundamentals-test-cases.xlsx
++rename to V1/fundamentals/v1/fundamentals-test-cases.xlsx
++diff --git a/fundamentals/v1/fundamentals.c b/V1/fundamentals/v1/fundamentals.c
++similarity index 100%
++rename from fundamentals/v1/fundamentals.c
++rename to V1/fundamentals/v1/fundamentals.c
++diff --git a/fundamentals/v1/fundamentals.h b/V1/fundamentals/v1/fundamentals.h
++similarity index 100%
++rename from fundamentals/v1/fundamentals.h
++rename to V1/fundamentals/v1/fundamentals.h
++diff --git a/fundamentals/v1/main.c b/V1/fundamentals/v1/main.c
++similarity index 100%
++rename from fundamentals/v1/main.c
++rename to V1/fundamentals/v1/main.c
++diff --git a/main/converting.c b/V1/main/converting.c
++similarity index 100%
++rename from main/converting.c
++rename to V1/main/converting.c
++diff --git a/main/converting.h b/V1/main/converting.h
++similarity index 100%
++rename from main/converting.h
++rename to V1/main/converting.h
++diff --git a/main/fundamentals.c b/V1/main/fundamentals.c
++similarity index 100%
++rename from main/fundamentals.c
++rename to V1/main/fundamentals.c
++diff --git a/main/fundamentals.h b/V1/main/fundamentals.h
++similarity index 100%
++rename from main/fundamentals.h
++rename to V1/main/fundamentals.h
++diff --git a/main/main.c b/V1/main/main.c
++similarity index 100%
++rename from main/main.c
++rename to V1/main/main.c
++diff --git a/main/manipulating.c b/V1/main/manipulating.c
++similarity index 100%
++rename from main/manipulating.c
++rename to V1/main/manipulating.c
++diff --git a/main/manipulating.h b/V1/main/manipulating.h
++similarity index 100%
++rename from main/manipulating.h
++rename to V1/main/manipulating.h
++diff --git a/main/tokenizing.c b/V1/main/tokenizing.c
++similarity index 100%
++rename from main/tokenizing.c
++rename to V1/main/tokenizing.c
++diff --git a/main/tokenizing.h b/V1/main/tokenizing.h
++similarity index 100%
++rename from main/tokenizing.h
++rename to V1/main/tokenizing.h
++diff --git a/manipulation/PM-Notes-Brandon-Doray.docx b/V1/manipulation/PM-Notes-Brandon-Doray.docx
++similarity index 100%
++rename from manipulation/PM-Notes-Brandon-Doray.docx
++rename to V1/manipulation/PM-Notes-Brandon-Doray.docx
++diff --git a/manipulation/manipulatemain.c b/V1/manipulation/manipulatemain.c
++similarity index 100%
++rename from manipulation/manipulatemain.c
++rename to V1/manipulation/manipulatemain.c
++diff --git a/manipulation/manipulating.c b/V1/manipulation/manipulating.c
++similarity index 100%
++rename from manipulation/manipulating.c
++rename to V1/manipulation/manipulating.c
++diff --git a/manipulation/manipulating.h b/V1/manipulation/manipulating.h
++similarity index 100%
++rename from manipulation/manipulating.h
++rename to V1/manipulation/manipulating.h
++diff --git a/manipulation/manipulation-test-cases.xlsx b/V1/manipulation/manipulation-test-cases.xlsx
++similarity index 100%
++rename from manipulation/manipulation-test-cases.xlsx
++rename to V1/manipulation/manipulation-test-cases.xlsx
++diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/V1/tokenizing/PM-Notes-DarianGrijalba.docx
++similarity index 100%
++rename from tokenizing/PM-Notes-DarianGrijalba.docx
++rename to V1/tokenizing/PM-Notes-DarianGrijalba.docx
++diff --git a/tokenizing/tokenizing.c b/V1/tokenizing/tokenizing.c
++similarity index 100%
++rename from tokenizing/tokenizing.c
++rename to V1/tokenizing/tokenizing.c
++diff --git a/tokenizing/tokenizing.h b/V1/tokenizing/tokenizing.h
++similarity index 100%
++rename from tokenizing/tokenizing.h
++rename to V1/tokenizing/tokenizing.h
++
++commit 0ec0097d57c6a5d87103780c4dc8f8e6d3cc45df
++Author: Axton Smith <axtonsmith@gmail.com>
++Date:   Fri Dec 8 17:52:55 2023 -0500
++
++    Fix file path in manipulation directory
++
++diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
++deleted file mode 100644
++index ce82fd8..0000000
++Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo and /dev/null differ
++diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
++deleted file mode 100644
++index 95cfcc7..0000000
++Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db and /dev/null differ
++diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
++deleted file mode 100644
++index b2ba1dc..0000000
++Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db and /dev/null differ
++diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/PM-Notes-Brandon-Doray.docx
++similarity index 100%
++rename from manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
++rename to manipulation/PM-Notes-Brandon-Doray.docx
++diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/manipulatemain.c
++similarity index 100%
++rename from manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
++rename to manipulation/manipulatemain.c
++diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/manipulating.c
++similarity index 100%
++rename from manipulation/Manipulation V1/Manipulation V1/manipulating.c
++rename to manipulation/manipulating.c
++diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/manipulating.h
++similarity index 100%
++rename from manipulation/Manipulation V1/Manipulation V1/manipulating.h
++rename to manipulation/manipulating.h
++diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/manipulation-test-cases.xlsx
++similarity index 100%
++rename from manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
++rename to manipulation/manipulation-test-cases.xlsx
++
++commit e40dd3d033d7164d96f9fa0ffe2668ffeb2ccfed
++Author: Axton Smith <axtonsmith@gmail.com>
++Date:   Fri Dec 8 17:52:00 2023 -0500
++
++    Add V1 files
++
++diff --git a/conversions/PM-Notes-AxtonSmith.docx b/conversions/PM-Notes-AxtonSmith.docx
++new file mode 100644
++index 0000000..dc61b8f
++--- /dev/null
+++++ b/conversions/PM-Notes-AxtonSmith.docx
++@@ -0,0 +1,4 @@
+++Conversion Module
+++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
++diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
++new file mode 100644
++index 0000000..70aef67
++Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx differ
++diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
++new file mode 100644
++index 0000000..2b75f1d
++Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx differ
++diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
++new file mode 100644
++index 0000000..70aef67
++Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx differ
++diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
++new file mode 100644
++index 0000000..70aef67
++Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx differ
++diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
++new file mode 100644
++index 0000000..70aef67
++Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx differ
++diff --git a/conversions/code/.vs/v1/v17/.suo b/conversions/code/.vs/v1/v17/.suo
++new file mode 100644
++index 0000000..218f706
++Binary files /dev/null and b/conversions/code/.vs/v1/v17/.suo differ
++diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/conversions/code/.vs/v1/v17/Browse.VC.db
++new file mode 100644
++index 0000000..086de7c
++Binary files /dev/null and b/conversions/code/.vs/v1/v17/Browse.VC.db differ
++diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/conversions/code/.vs/v1/v17/Solution.VC.db
++new file mode 100644
++index 0000000..da0fe73
++Binary files /dev/null and b/conversions/code/.vs/v1/v17/Solution.VC.db differ
++diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
++new file mode 100644
++index 0000000..137cd6f
++Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch differ
++diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
++new file mode 100644
++index 0000000..e7b304a
++Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch differ
++diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
++new file mode 100644
++index 0000000..934be31
++Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch differ
++diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
++new file mode 100644
++index 0000000..937325b
++Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch differ
++diff --git a/conversions/code/converting.c b/conversions/code/converting.c
++new file mode 100644
++index 0000000..dc92171
++--- /dev/null
+++++ b/conversions/code/converting.c
++@@ -0,0 +1,34 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++
+++#include "converting.h"
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting() {
+++/* Version 1 */
+++	printf("*** Start of Converting Strings to int Demo ***\n");
+++	char intString[BUFFER_SIZE];
+++	int intNumber;
+++	do
+++	{
+++		printf("Type an int numeric string (q - to quit):\n");
+++		fgets(intString, BUFFER_SIZE, stdin);
+++		intString[strlen(intString) - 1] = '\0';
+++		if (strcmp(intString, "q") != 0)
+++		{
+++			intNumber = atoi(intString);
+++			printf("Converted number is %d\n", intNumber);
+++		}
+++	}
+++	while (strcmp(intString, "q") != 0);
+++	printf("*** End of Converting Strings to int Demo ***\n\n");
+++
+++/* Version 2 */
+++//>> insert here
+++
+++
+++/* Version 3 */
+++//>> insert here
+++
+++
+++}
++diff --git a/conversions/code/converting.h b/conversions/code/converting.h
++new file mode 100644
++index 0000000..94e86ab
++--- /dev/null
+++++ b/conversions/code/converting.h
++@@ -0,0 +1,11 @@
+++#ifndef _CONVERTING_H_
+++#define _CONVERTING_H_
+++
+++#include <stdio.h>
+++#include <string.h>
+++#include <stdlib.h>
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/conversions/code/main.c b/conversions/code/main.c
++new file mode 100644
++index 0000000..6a8e436
++--- /dev/null
+++++ b/conversions/code/main.c
++@@ -0,0 +1,7 @@
+++#include "converting.h"
+++
+++int main(void)
+++{
+++	converting();
+++	return 0;
+++}
++\ No newline at end of file
++diff --git a/conversions/code/v1.sln b/conversions/code/v1.sln
++new file mode 100644
++index 0000000..57619b4
++--- /dev/null
+++++ b/conversions/code/v1.sln
++@@ -0,0 +1,31 @@
+++ï»¿
+++Microsoft Visual Studio Solution File, Format Version 12.00
+++# Visual Studio Version 17
+++VisualStudioVersion = 17.8.34322.80
+++MinimumVisualStudioVersion = 10.0.40219.1
+++Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "v1", "v1.vcxproj", "{DFCFF08A-27BA-4895-81DE-69DA151B79DB}"
+++EndProject
+++Global
+++	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+++		Debug|x64 = Debug|x64
+++		Debug|x86 = Debug|x86
+++		Release|x64 = Release|x64
+++		Release|x86 = Release|x86
+++	EndGlobalSection
+++	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.ActiveCfg = Debug|x64
+++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.Build.0 = Debug|x64
+++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.ActiveCfg = Debug|Win32
+++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.Build.0 = Debug|Win32
+++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.ActiveCfg = Release|x64
+++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.Build.0 = Release|x64
+++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.ActiveCfg = Release|Win32
+++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.Build.0 = Release|Win32
+++	EndGlobalSection
+++	GlobalSection(SolutionProperties) = preSolution
+++		HideSolutionNode = FALSE
+++	EndGlobalSection
+++	GlobalSection(ExtensibilityGlobals) = postSolution
+++		SolutionGuid = {FB5DDBE1-4B86-462E-8A71-FBB6C215BD41}
+++	EndGlobalSection
+++EndGlobal
++diff --git a/conversions/code/v1.vcxproj b/conversions/code/v1.vcxproj
++new file mode 100644
++index 0000000..8a35f16
++--- /dev/null
+++++ b/conversions/code/v1.vcxproj
++@@ -0,0 +1,139 @@
+++<?xml version="1.0" encoding="utf-8"?>
+++<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+++  <ItemGroup Label="ProjectConfigurations">
+++    <ProjectConfiguration Include="Debug|Win32">
+++      <Configuration>Debug</Configuration>
+++      <Platform>Win32</Platform>
+++    </ProjectConfiguration>
+++    <ProjectConfiguration Include="Release|Win32">
+++      <Configuration>Release</Configuration>
+++      <Platform>Win32</Platform>
+++    </ProjectConfiguration>
+++    <ProjectConfiguration Include="Debug|x64">
+++      <Configuration>Debug</Configuration>
+++      <Platform>x64</Platform>
+++    </ProjectConfiguration>
+++    <ProjectConfiguration Include="Release|x64">
+++      <Configuration>Release</Configuration>
+++      <Platform>x64</Platform>
+++    </ProjectConfiguration>
+++  </ItemGroup>
+++  <PropertyGroup Label="Globals">
+++    <VCProjectVersion>17.0</VCProjectVersion>
+++    <Keyword>Win32Proj</Keyword>
+++    <ProjectGuid>{dfcff08a-27ba-4895-81de-69da151b79db}</ProjectGuid>
+++    <RootNamespace>v1</RootNamespace>
+++    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
+++  </PropertyGroup>
+++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
+++    <ConfigurationType>Application</ConfigurationType>
+++    <UseDebugLibraries>true</UseDebugLibraries>
+++    <PlatformToolset>v143</PlatformToolset>
+++    <CharacterSet>Unicode</CharacterSet>
+++  </PropertyGroup>
+++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
+++    <ConfigurationType>Application</ConfigurationType>
+++    <UseDebugLibraries>false</UseDebugLibraries>
+++    <PlatformToolset>v143</PlatformToolset>
+++    <WholeProgramOptimization>true</WholeProgramOptimization>
+++    <CharacterSet>Unicode</CharacterSet>
+++  </PropertyGroup>
+++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+++    <ConfigurationType>Application</ConfigurationType>
+++    <UseDebugLibraries>true</UseDebugLibraries>
+++    <PlatformToolset>v143</PlatformToolset>
+++    <CharacterSet>Unicode</CharacterSet>
+++  </PropertyGroup>
+++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+++    <ConfigurationType>Application</ConfigurationType>
+++    <UseDebugLibraries>false</UseDebugLibraries>
+++    <PlatformToolset>v143</PlatformToolset>
+++    <WholeProgramOptimization>true</WholeProgramOptimization>
+++    <CharacterSet>Unicode</CharacterSet>
+++  </PropertyGroup>
+++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+++  <ImportGroup Label="ExtensionSettings">
+++  </ImportGroup>
+++  <ImportGroup Label="Shared">
+++  </ImportGroup>
+++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+++  </ImportGroup>
+++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+++  </ImportGroup>
+++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+++  </ImportGroup>
+++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+++  </ImportGroup>
+++  <PropertyGroup Label="UserMacros" />
+++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+++    <ClCompile>
+++      <WarningLevel>Level3</WarningLevel>
+++      <SDLCheck>true</SDLCheck>
+++      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+++      <ConformanceMode>true</ConformanceMode>
+++    </ClCompile>
+++    <Link>
+++      <SubSystem>Console</SubSystem>
+++      <GenerateDebugInformation>true</GenerateDebugInformation>
+++    </Link>
+++  </ItemDefinitionGroup>
+++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+++    <ClCompile>
+++      <WarningLevel>Level3</WarningLevel>
+++      <FunctionLevelLinking>true</FunctionLevelLinking>
+++      <IntrinsicFunctions>true</IntrinsicFunctions>
+++      <SDLCheck>true</SDLCheck>
+++      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+++      <ConformanceMode>true</ConformanceMode>
+++    </ClCompile>
+++    <Link>
+++      <SubSystem>Console</SubSystem>
+++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+++      <OptimizeReferences>true</OptimizeReferences>
+++      <GenerateDebugInformation>true</GenerateDebugInformation>
+++    </Link>
+++  </ItemDefinitionGroup>
+++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+++    <ClCompile>
+++      <WarningLevel>Level3</WarningLevel>
+++      <SDLCheck>true</SDLCheck>
+++      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+++      <ConformanceMode>true</ConformanceMode>
+++    </ClCompile>
+++    <Link>
+++      <SubSystem>Console</SubSystem>
+++      <GenerateDebugInformation>true</GenerateDebugInformation>
+++    </Link>
+++  </ItemDefinitionGroup>
+++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+++    <ClCompile>
+++      <WarningLevel>Level3</WarningLevel>
+++      <FunctionLevelLinking>true</FunctionLevelLinking>
+++      <IntrinsicFunctions>true</IntrinsicFunctions>
+++      <SDLCheck>true</SDLCheck>
+++      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+++      <ConformanceMode>true</ConformanceMode>
+++    </ClCompile>
+++    <Link>
+++      <SubSystem>Console</SubSystem>
+++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+++      <OptimizeReferences>true</OptimizeReferences>
+++      <GenerateDebugInformation>true</GenerateDebugInformation>
+++    </Link>
+++  </ItemDefinitionGroup>
+++  <ItemGroup>
+++    <ClCompile Include="converting.c" />
+++    <ClCompile Include="main.c" />
+++  </ItemGroup>
+++  <ItemGroup>
+++    <ClInclude Include="converting.h" />
+++  </ItemGroup>
+++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+++  <ImportGroup Label="ExtensionTargets">
+++  </ImportGroup>
+++</Project>
++\ No newline at end of file
++diff --git a/conversions/code/v1.vcxproj.filters b/conversions/code/v1.vcxproj.filters
++new file mode 100644
++index 0000000..7ba9ae0
++--- /dev/null
+++++ b/conversions/code/v1.vcxproj.filters
++@@ -0,0 +1,30 @@
+++ï»¿<?xml version="1.0" encoding="utf-8"?>
+++<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+++  <ItemGroup>
+++    <Filter Include="Source Files">
+++      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+++      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+++    </Filter>
+++    <Filter Include="Header Files">
+++      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+++      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
+++    </Filter>
+++    <Filter Include="Resource Files">
+++      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
+++      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
+++    </Filter>
+++  </ItemGroup>
+++  <ItemGroup>
+++    <ClCompile Include="converting.c">
+++      <Filter>Source Files</Filter>
+++    </ClCompile>
+++    <ClCompile Include="main.c">
+++      <Filter>Source Files</Filter>
+++    </ClCompile>
+++  </ItemGroup>
+++  <ItemGroup>
+++    <ClInclude Include="converting.h">
+++      <Filter>Header Files</Filter>
+++    </ClInclude>
+++  </ItemGroup>
+++</Project>
++\ No newline at end of file
++diff --git a/conversions/code/v1.vcxproj.user b/conversions/code/v1.vcxproj.user
++new file mode 100644
++index 0000000..88a5509
++--- /dev/null
+++++ b/conversions/code/v1.vcxproj.user
++@@ -0,0 +1,4 @@
+++ï»¿<?xml version="1.0" encoding="utf-8"?>
+++<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+++  <PropertyGroup />
+++</Project>
++\ No newline at end of file
++diff --git a/conversions/code/x64/Debug/converting.obj b/conversions/code/x64/Debug/converting.obj
++new file mode 100644
++index 0000000..3c059c8
++Binary files /dev/null and b/conversions/code/x64/Debug/converting.obj differ
++diff --git a/conversions/code/x64/Debug/main.obj b/conversions/code/x64/Debug/main.obj
++new file mode 100644
++index 0000000..752fab6
++Binary files /dev/null and b/conversions/code/x64/Debug/main.obj differ
++diff --git a/conversions/code/x64/Debug/v1.exe b/conversions/code/x64/Debug/v1.exe
++new file mode 100644
++index 0000000..657c946
++Binary files /dev/null and b/conversions/code/x64/Debug/v1.exe differ
++diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/conversions/code/x64/Debug/v1.exe.recipe
++new file mode 100644
++index 0000000..69be474
++--- /dev/null
+++++ b/conversions/code/x64/Debug/v1.exe.recipe
++@@ -0,0 +1,11 @@
+++ï»¿<?xml version="1.0" encoding="utf-8"?>
+++<Project>
+++  <ProjectOutputs>
+++    <ProjectOutput>
+++      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe</FullPath>
+++    </ProjectOutput>
+++  </ProjectOutputs>
+++  <ContentFiles />
+++  <SatelliteDlls />
+++  <NonRecipeFileRefs />
+++</Project>
++\ No newline at end of file
++diff --git a/conversions/code/x64/Debug/v1.ilk b/conversions/code/x64/Debug/v1.ilk
++new file mode 100644
++index 0000000..18b8f11
++Binary files /dev/null and b/conversions/code/x64/Debug/v1.ilk differ
++diff --git a/conversions/code/x64/Debug/v1.log b/conversions/code/x64/Debug/v1.log
++new file mode 100644
++index 0000000..d6ecd4a
++--- /dev/null
+++++ b/conversions/code/x64/Debug/v1.log
++@@ -0,0 +1,2 @@
+++ï»¿  main.c
+++  v1.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
++diff --git a/conversions/code/x64/Debug/v1.pdb b/conversions/code/x64/Debug/v1.pdb
++new file mode 100644
++index 0000000..e2f8b05
++Binary files /dev/null and b/conversions/code/x64/Debug/v1.pdb differ
++diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
++new file mode 100644
++index 0000000..0f0f942
++Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog differ
++diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
++new file mode 100644
++index 0000000..54a5e77
++Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog differ
++diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
++new file mode 100644
++index 0000000..c1bc96f
++Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog differ
++diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
++new file mode 100644
++index 0000000..8b2c0bc
++--- /dev/null
+++++ b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
++@@ -0,0 +1,2 @@
+++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\converting.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\converting.obj
+++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\main.obj
++diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
++new file mode 100644
++index 0000000..a7a084f
++Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog differ
++diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
++new file mode 100644
++index 0000000..3761899
++Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog differ
++diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
++new file mode 100644
++index 0000000..fa10a23
++Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog differ
++diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
++new file mode 100644
++index 0000000..fe1494c
++--- /dev/null
+++++ b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
++@@ -0,0 +1,2 @@
+++PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
+++Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\|
++diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
++new file mode 100644
++index 0000000..2da24f7
++--- /dev/null
+++++ b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
++@@ -0,0 +1 @@
+++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
++diff --git a/conversions/code/x64/Debug/vc143.idb b/conversions/code/x64/Debug/vc143.idb
++new file mode 100644
++index 0000000..1fcdfe4
++Binary files /dev/null and b/conversions/code/x64/Debug/vc143.idb differ
++diff --git a/conversions/code/x64/Debug/vc143.pdb b/conversions/code/x64/Debug/vc143.pdb
++new file mode 100644
++index 0000000..2e1256c
++Binary files /dev/null and b/conversions/code/x64/Debug/vc143.pdb differ
++diff --git a/conversions/conversions-test-cases.xlsx b/conversions/conversions-test-cases.xlsx
++new file mode 100644
++index 0000000..657486d
++Binary files /dev/null and b/conversions/conversions-test-cases.xlsx differ
++diff --git a/conversions/conversionsV1.zip b/conversions/conversionsV1.zip
++new file mode 100644
++index 0000000..ea57e7e
++Binary files /dev/null and b/conversions/conversionsV1.zip differ
++diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
++new file mode 100644
++index 0000000..dc61b8f
++--- /dev/null
+++++ b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
++@@ -0,0 +1,4 @@
+++Conversion Module
+++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
++diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/conversions/conversionsV1/conversions-test-cases.xlsx
++new file mode 100644
++index 0000000..a2cffb9
++Binary files /dev/null and b/conversions/conversionsV1/conversions-test-cases.xlsx differ
++diff --git a/conversions/conversionsV1/converting.c b/conversions/conversionsV1/converting.c
++new file mode 100644
++index 0000000..dc92171
++--- /dev/null
+++++ b/conversions/conversionsV1/converting.c
++@@ -0,0 +1,34 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++
+++#include "converting.h"
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting() {
+++/* Version 1 */
+++	printf("*** Start of Converting Strings to int Demo ***\n");
+++	char intString[BUFFER_SIZE];
+++	int intNumber;
+++	do
+++	{
+++		printf("Type an int numeric string (q - to quit):\n");
+++		fgets(intString, BUFFER_SIZE, stdin);
+++		intString[strlen(intString) - 1] = '\0';
+++		if (strcmp(intString, "q") != 0)
+++		{
+++			intNumber = atoi(intString);
+++			printf("Converted number is %d\n", intNumber);
+++		}
+++	}
+++	while (strcmp(intString, "q") != 0);
+++	printf("*** End of Converting Strings to int Demo ***\n\n");
+++
+++/* Version 2 */
+++//>> insert here
+++
+++
+++/* Version 3 */
+++//>> insert here
+++
+++
+++}
++diff --git a/conversions/conversionsV1/converting.h b/conversions/conversionsV1/converting.h
++new file mode 100644
++index 0000000..94e86ab
++--- /dev/null
+++++ b/conversions/conversionsV1/converting.h
++@@ -0,0 +1,11 @@
+++#ifndef _CONVERTING_H_
+++#define _CONVERTING_H_
+++
+++#include <stdio.h>
+++#include <string.h>
+++#include <stdlib.h>
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/conversions/conversionsV1/main.c b/conversions/conversionsV1/main.c
++new file mode 100644
++index 0000000..6a8e436
++--- /dev/null
+++++ b/conversions/conversionsV1/main.c
++@@ -0,0 +1,7 @@
+++#include "converting.h"
+++
+++int main(void)
+++{
+++	converting();
+++	return 0;
+++}
++\ No newline at end of file
++diff --git a/conversions/converting.c b/conversions/converting.c
++new file mode 100644
++index 0000000..88b340e
++--- /dev/null
+++++ b/conversions/converting.c
++@@ -0,0 +1,16 @@
+++#include "converting.h"
+++
+++void converting() {
+++/* Version 1 */
+++>> insert here
+++
+++
+++/* Version 2 */
+++>> insert here
+++
+++
+++/* Version 3 */
+++>> insert here
+++
+++
+++}
++diff --git a/conversions/converting_header.png b/conversions/converting_header.png
++new file mode 100644
++index 0000000..4ffb3a8
++Binary files /dev/null and b/conversions/converting_header.png differ
++diff --git a/conversions/converting_v1.png b/conversions/converting_v1.png
++new file mode 100644
++index 0000000..50f5734
++Binary files /dev/null and b/conversions/converting_v1.png differ
++diff --git a/conversions/converting_v2.png b/conversions/converting_v2.png
++new file mode 100644
++index 0000000..edcdf1e
++Binary files /dev/null and b/conversions/converting_v2.png differ
++diff --git a/conversions/converting_v3.png b/conversions/converting_v3.png
++new file mode 100644
++index 0000000..146285f
++Binary files /dev/null and b/conversions/converting_v3.png differ
++diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/fundamentals/PM-Notes-AxtonSmith.docx
++new file mode 100644
++index 0000000..835d958
++--- /dev/null
+++++ b/fundamentals/PM-Notes-AxtonSmith.docx
++@@ -0,0 +1,4 @@
+++Fundamentals Module V1
+++The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
+++Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
+++Negative cases will be any negative index and indexes beyond the max length of the string.
++diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
++new file mode 100644
++index 0000000..07098b6
++Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx differ
++diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
++new file mode 100644
++index 0000000..70aef67
++Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx differ
++diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
++new file mode 100644
++index 0000000..70aef67
++Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx differ
++diff --git a/fundamentals/code/.vs/project/v17/.suo b/fundamentals/code/.vs/project/v17/.suo
++new file mode 100644
++index 0000000..bcfd53a
++Binary files /dev/null and b/fundamentals/code/.vs/project/v17/.suo differ
++diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/fundamentals/code/.vs/project/v17/Browse.VC.db
++new file mode 100644
++index 0000000..bcda23d
++Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Browse.VC.db differ
++diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/fundamentals/code/.vs/project/v17/Solution.VC.db
++new file mode 100644
++index 0000000..4478989
++Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Solution.VC.db differ
++diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
++new file mode 100644
++index 0000000..14c2062
++Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch differ
++diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
++new file mode 100644
++index 0000000..eb24263
++Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch differ
++diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
++new file mode 100644
++index 0000000..1d0afbc
++Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch differ
++diff --git a/fundamentals/code/fundamentals.c b/fundamentals/code/fundamentals.c
++new file mode 100644
++index 0000000..1215375
++--- /dev/null
+++++ b/fundamentals/code/fundamentals.c
++@@ -0,0 +1,40 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++#define NUM_INPUT_SIZE 10
+++
+++#include "fundamentals.h"
+++
+++// Takes a string input from user, then an index number and returns the character at that index of the string
+++void fundamentals() {
+++/* Version 1 */
+++	printf("*** Start of Indexing Strings Demo ***\n");
+++	char buffer1[BUFFER_SIZE];
+++	char numInput[NUM_INPUT_SIZE];
+++	size_t position;
+++	do
+++	{
+++		printf("Type not empty string (q - to quit):\n");
+++		fgets(buffer1, BUFFER_SIZE, stdin);
+++		buffer1[strlen(buffer1) - 1] = '\0';
+++		if (strcmp(buffer1, "q") != 0)
+++		{
+++			printf("Type the character position within the string:\n");
+++			fgets(numInput, NUM_INPUT_SIZE, stdin);
+++			numInput[strlen(numInput) - 1] = '\0';
+++			position = atoi(numInput);
+++			if (position >= strlen(buffer1))
+++			{
+++				position = strlen(buffer1) - 1;
+++				printf("Too big... Position reduced to max. available\n");
+++			}
+++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+++		}
+++	} while (strcmp(buffer1, "q") != 0);
+++	printf("*** End of Indexing Strings Demo ***\n\n");
+++
+++	/* Version 2 */
+++	//>> insert here
+++
+++	/* Version 3 */
+++	//>> insert here
+++}
++\ No newline at end of file
++diff --git a/fundamentals/code/fundamentals.h b/fundamentals/code/fundamentals.h
++new file mode 100644
++index 0000000..14a6f4f
++--- /dev/null
+++++ b/fundamentals/code/fundamentals.h
++@@ -0,0 +1,11 @@
+++#ifndef _FUNDAMENTALS_H_
+++#define _FUNDAMENTALS_H_
+++
+++#include <stdio.h>
+++#include <stdlib.h>
+++#include <string.h>
+++
+++// Takes a string input from user, then an index number and returns the character at that index of the string
+++void fundamentals(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/fundamentals/code/main.c b/fundamentals/code/main.c
++new file mode 100644
++index 0000000..1225e71
++--- /dev/null
+++++ b/fundamentals/code/main.c
++@@ -0,0 +1,7 @@
+++#include "fundamentals.h"
+++
+++int main(void)
+++{
+++	fundamentals();
+++	return 0;
+++}
++\ No newline at end of file
++diff --git a/fundamentals/code/project.sln b/fundamentals/code/project.sln
++new file mode 100644
++index 0000000..0a8bb0d
++--- /dev/null
+++++ b/fundamentals/code/project.sln
++@@ -0,0 +1,31 @@
+++ï»¿
+++Microsoft Visual Studio Solution File, Format Version 12.00
+++# Visual Studio Version 17
+++VisualStudioVersion = 17.8.34322.80
+++MinimumVisualStudioVersion = 10.0.40219.1
+++Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "project", "project.vcxproj", "{AF362EDA-E3C1-4C36-9746-825F3A16C279}"
+++EndProject
+++Global
+++	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+++		Debug|x64 = Debug|x64
+++		Debug|x86 = Debug|x86
+++		Release|x64 = Release|x64
+++		Release|x86 = Release|x86
+++	EndGlobalSection
+++	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.ActiveCfg = Debug|x64
+++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.Build.0 = Debug|x64
+++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.ActiveCfg = Debug|Win32
+++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.Build.0 = Debug|Win32
+++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.ActiveCfg = Release|x64
+++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.Build.0 = Release|x64
+++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.ActiveCfg = Release|Win32
+++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.Build.0 = Release|Win32
+++	EndGlobalSection
+++	GlobalSection(SolutionProperties) = preSolution
+++		HideSolutionNode = FALSE
+++	EndGlobalSection
+++	GlobalSection(ExtensibilityGlobals) = postSolution
+++		SolutionGuid = {189AD194-2992-420A-9AC7-B6C34003EBD9}
+++	EndGlobalSection
+++EndGlobal
++diff --git a/fundamentals/code/project.vcxproj b/fundamentals/code/project.vcxproj
++new file mode 100644
++index 0000000..b4a7699
++--- /dev/null
+++++ b/fundamentals/code/project.vcxproj
++@@ -0,0 +1,139 @@
+++<?xml version="1.0" encoding="utf-8"?>
+++<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+++  <ItemGroup Label="ProjectConfigurations">
+++    <ProjectConfiguration Include="Debug|Win32">
+++      <Configuration>Debug</Configuration>
+++      <Platform>Win32</Platform>
+++    </ProjectConfiguration>
+++    <ProjectConfiguration Include="Release|Win32">
+++      <Configuration>Release</Configuration>
+++      <Platform>Win32</Platform>
+++    </ProjectConfiguration>
+++    <ProjectConfiguration Include="Debug|x64">
+++      <Configuration>Debug</Configuration>
+++      <Platform>x64</Platform>
+++    </ProjectConfiguration>
+++    <ProjectConfiguration Include="Release|x64">
+++      <Configuration>Release</Configuration>
+++      <Platform>x64</Platform>
+++    </ProjectConfiguration>
+++  </ItemGroup>
+++  <PropertyGroup Label="Globals">
+++    <VCProjectVersion>17.0</VCProjectVersion>
+++    <Keyword>Win32Proj</Keyword>
+++    <ProjectGuid>{af362eda-e3c1-4c36-9746-825f3a16c279}</ProjectGuid>
+++    <RootNamespace>project</RootNamespace>
+++    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
+++  </PropertyGroup>
+++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
+++    <ConfigurationType>Application</ConfigurationType>
+++    <UseDebugLibraries>true</UseDebugLibraries>
+++    <PlatformToolset>v143</PlatformToolset>
+++    <CharacterSet>Unicode</CharacterSet>
+++  </PropertyGroup>
+++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
+++    <ConfigurationType>Application</ConfigurationType>
+++    <UseDebugLibraries>false</UseDebugLibraries>
+++    <PlatformToolset>v143</PlatformToolset>
+++    <WholeProgramOptimization>true</WholeProgramOptimization>
+++    <CharacterSet>Unicode</CharacterSet>
+++  </PropertyGroup>
+++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+++    <ConfigurationType>Application</ConfigurationType>
+++    <UseDebugLibraries>true</UseDebugLibraries>
+++    <PlatformToolset>v143</PlatformToolset>
+++    <CharacterSet>Unicode</CharacterSet>
+++  </PropertyGroup>
+++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+++    <ConfigurationType>Application</ConfigurationType>
+++    <UseDebugLibraries>false</UseDebugLibraries>
+++    <PlatformToolset>v143</PlatformToolset>
+++    <WholeProgramOptimization>true</WholeProgramOptimization>
+++    <CharacterSet>Unicode</CharacterSet>
+++  </PropertyGroup>
+++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+++  <ImportGroup Label="ExtensionSettings">
+++  </ImportGroup>
+++  <ImportGroup Label="Shared">
+++  </ImportGroup>
+++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+++  </ImportGroup>
+++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+++  </ImportGroup>
+++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+++  </ImportGroup>
+++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+++  </ImportGroup>
+++  <PropertyGroup Label="UserMacros" />
+++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+++    <ClCompile>
+++      <WarningLevel>Level3</WarningLevel>
+++      <SDLCheck>true</SDLCheck>
+++      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+++      <ConformanceMode>true</ConformanceMode>
+++    </ClCompile>
+++    <Link>
+++      <SubSystem>Console</SubSystem>
+++      <GenerateDebugInformation>true</GenerateDebugInformation>
+++    </Link>
+++  </ItemDefinitionGroup>
+++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+++    <ClCompile>
+++      <WarningLevel>Level3</WarningLevel>
+++      <FunctionLevelLinking>true</FunctionLevelLinking>
+++      <IntrinsicFunctions>true</IntrinsicFunctions>
+++      <SDLCheck>true</SDLCheck>
+++      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+++      <ConformanceMode>true</ConformanceMode>
+++    </ClCompile>
+++    <Link>
+++      <SubSystem>Console</SubSystem>
+++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+++      <OptimizeReferences>true</OptimizeReferences>
+++      <GenerateDebugInformation>true</GenerateDebugInformation>
+++    </Link>
+++  </ItemDefinitionGroup>
+++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+++    <ClCompile>
+++      <WarningLevel>Level3</WarningLevel>
+++      <SDLCheck>true</SDLCheck>
+++      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+++      <ConformanceMode>true</ConformanceMode>
+++    </ClCompile>
+++    <Link>
+++      <SubSystem>Console</SubSystem>
+++      <GenerateDebugInformation>true</GenerateDebugInformation>
+++    </Link>
+++  </ItemDefinitionGroup>
+++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+++    <ClCompile>
+++      <WarningLevel>Level3</WarningLevel>
+++      <FunctionLevelLinking>true</FunctionLevelLinking>
+++      <IntrinsicFunctions>true</IntrinsicFunctions>
+++      <SDLCheck>true</SDLCheck>
+++      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+++      <ConformanceMode>true</ConformanceMode>
+++    </ClCompile>
+++    <Link>
+++      <SubSystem>Console</SubSystem>
+++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+++      <OptimizeReferences>true</OptimizeReferences>
+++      <GenerateDebugInformation>true</GenerateDebugInformation>
+++    </Link>
+++  </ItemDefinitionGroup>
+++  <ItemGroup>
+++    <ClCompile Include="fundamentals.c" />
+++    <ClCompile Include="main.c" />
+++  </ItemGroup>
+++  <ItemGroup>
+++    <ClInclude Include="fundamentals.h" />
+++  </ItemGroup>
+++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+++  <ImportGroup Label="ExtensionTargets">
+++  </ImportGroup>
+++</Project>
++\ No newline at end of file
++diff --git a/fundamentals/code/project.vcxproj.filters b/fundamentals/code/project.vcxproj.filters
++new file mode 100644
++index 0000000..262ef51
++--- /dev/null
+++++ b/fundamentals/code/project.vcxproj.filters
++@@ -0,0 +1,30 @@
+++ï»¿<?xml version="1.0" encoding="utf-8"?>
+++<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+++  <ItemGroup>
+++    <Filter Include="Source Files">
+++      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+++      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+++    </Filter>
+++    <Filter Include="Header Files">
+++      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+++      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
+++    </Filter>
+++    <Filter Include="Resource Files">
+++      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
+++      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
+++    </Filter>
+++  </ItemGroup>
+++  <ItemGroup>
+++    <ClCompile Include="fundamentals.c">
+++      <Filter>Source Files</Filter>
+++    </ClCompile>
+++    <ClCompile Include="main.c">
+++      <Filter>Source Files</Filter>
+++    </ClCompile>
+++  </ItemGroup>
+++  <ItemGroup>
+++    <ClInclude Include="fundamentals.h">
+++      <Filter>Source Files</Filter>
+++    </ClInclude>
+++  </ItemGroup>
+++</Project>
++\ No newline at end of file
++diff --git a/fundamentals/code/project.vcxproj.user b/fundamentals/code/project.vcxproj.user
++new file mode 100644
++index 0000000..88a5509
++--- /dev/null
+++++ b/fundamentals/code/project.vcxproj.user
++@@ -0,0 +1,4 @@
+++ï»¿<?xml version="1.0" encoding="utf-8"?>
+++<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+++  <PropertyGroup />
+++</Project>
++\ No newline at end of file
++diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/fundamentals/code/x64/Debug/fundamentals.obj
++new file mode 100644
++index 0000000..861a383
++Binary files /dev/null and b/fundamentals/code/x64/Debug/fundamentals.obj differ
++diff --git a/fundamentals/code/x64/Debug/main.obj b/fundamentals/code/x64/Debug/main.obj
++new file mode 100644
++index 0000000..412ddd8
++Binary files /dev/null and b/fundamentals/code/x64/Debug/main.obj differ
++diff --git a/fundamentals/code/x64/Debug/project.exe b/fundamentals/code/x64/Debug/project.exe
++new file mode 100644
++index 0000000..96f3f7c
++Binary files /dev/null and b/fundamentals/code/x64/Debug/project.exe differ
++diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/fundamentals/code/x64/Debug/project.exe.recipe
++new file mode 100644
++index 0000000..d15bad6
++--- /dev/null
+++++ b/fundamentals/code/x64/Debug/project.exe.recipe
++@@ -0,0 +1,11 @@
+++ï»¿<?xml version="1.0" encoding="utf-8"?>
+++<Project>
+++  <ProjectOutputs>
+++    <ProjectOutput>
+++      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe</FullPath>
+++    </ProjectOutput>
+++  </ProjectOutputs>
+++  <ContentFiles />
+++  <SatelliteDlls />
+++  <NonRecipeFileRefs />
+++</Project>
++\ No newline at end of file
++diff --git a/fundamentals/code/x64/Debug/project.ilk b/fundamentals/code/x64/Debug/project.ilk
++new file mode 100644
++index 0000000..ca8297e
++Binary files /dev/null and b/fundamentals/code/x64/Debug/project.ilk differ
++diff --git a/fundamentals/code/x64/Debug/project.log b/fundamentals/code/x64/Debug/project.log
++new file mode 100644
++index 0000000..46cbcf7
++--- /dev/null
+++++ b/fundamentals/code/x64/Debug/project.log
++@@ -0,0 +1,4 @@
+++ï»¿  fundamentals.c
+++  main.c
+++  Generating Code...
+++  project.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
++diff --git a/fundamentals/code/x64/Debug/project.pdb b/fundamentals/code/x64/Debug/project.pdb
++new file mode 100644
++index 0000000..f4c9944
++Binary files /dev/null and b/fundamentals/code/x64/Debug/project.pdb differ
++diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
++new file mode 100644
++index 0000000..8ce9c43
++Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog differ
++diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
++new file mode 100644
++index 0000000..2466d33
++Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog differ
++diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
++new file mode 100644
++index 0000000..a78224f
++Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog differ
++diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
++new file mode 100644
++index 0000000..3b8784b
++--- /dev/null
+++++ b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
++@@ -0,0 +1,2 @@
+++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\fundamentals.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\fundamentals.obj
+++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\main.obj
++diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
++new file mode 100644
++index 0000000..86df9f0
++Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog differ
++diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
++new file mode 100644
++index 0000000..7a2ed43
++Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog differ
++diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
++new file mode 100644
++index 0000000..a4ba5a7
++Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog differ
++diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
++new file mode 100644
++index 0000000..abb6863
++--- /dev/null
+++++ b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
++@@ -0,0 +1,2 @@
+++PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
+++Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\|
++diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
++new file mode 100644
++index 0000000..3ccaa35
++--- /dev/null
+++++ b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
++@@ -0,0 +1,2 @@
+++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\fundamentals\v1\project\x64\Debug\project.exe
+++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
++diff --git a/fundamentals/code/x64/Debug/vc143.idb b/fundamentals/code/x64/Debug/vc143.idb
++new file mode 100644
++index 0000000..6700a8c
++Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.idb differ
++diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/fundamentals/code/x64/Debug/vc143.pdb
++new file mode 100644
++index 0000000..88847b7
++Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.pdb differ
++diff --git a/fundamentals/fundamentals-test-cases.xlsx b/fundamentals/fundamentals-test-cases.xlsx
++new file mode 100644
++index 0000000..d625c15
++Binary files /dev/null and b/fundamentals/fundamentals-test-cases.xlsx differ
++diff --git a/fundamentals/fundamentals.c b/fundamentals/fundamentals.c
++new file mode 100644
++index 0000000..172438a
++--- /dev/null
+++++ b/fundamentals/fundamentals.c
++@@ -0,0 +1,16 @@
+++#include "fundamentals.h"
+++
+++void fundamentals() {
+++/* Version 1 */
+++>> insert here
+++
+++
+++/* Version 2 */
+++>> insert here
+++
+++
+++/* Version 3 */
+++>> insert here
+++
+++
+++}
++\ No newline at end of file
++diff --git a/fundamentals/fundamentals_header.png b/fundamentals/fundamentals_header.png
++new file mode 100644
++index 0000000..aae2842
++Binary files /dev/null and b/fundamentals/fundamentals_header.png differ
++diff --git a/fundamentals/fundamentals_v1.png b/fundamentals/fundamentals_v1.png
++new file mode 100644
++index 0000000..0f519ca
++Binary files /dev/null and b/fundamentals/fundamentals_v1.png differ
++diff --git a/fundamentals/fundamentals_v2.png b/fundamentals/fundamentals_v2.png
++new file mode 100644
++index 0000000..9bc0381
++Binary files /dev/null and b/fundamentals/fundamentals_v2.png differ
++diff --git a/fundamentals/fundamentals_v3.png b/fundamentals/fundamentals_v3.png
++new file mode 100644
++index 0000000..b390188
++Binary files /dev/null and b/fundamentals/fundamentals_v3.png differ
++diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/fundamentals/v1/PM-Notes-AxtonSmith.docx
++new file mode 100644
++index 0000000..acc0ce8
++--- /dev/null
+++++ b/fundamentals/v1/PM-Notes-AxtonSmith.docx
++@@ -0,0 +1,4 @@
+++Fundamentals Module V1
+++The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
+++Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
+++Negative cases will be any indexes beyond the max length of the string.
++diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/fundamentals/v1/fundamentals-test-cases.xlsx
++new file mode 100644
++index 0000000..35c1eda
++Binary files /dev/null and b/fundamentals/v1/fundamentals-test-cases.xlsx differ
++diff --git a/fundamentals/v1/fundamentals.c b/fundamentals/v1/fundamentals.c
++new file mode 100644
++index 0000000..1215375
++--- /dev/null
+++++ b/fundamentals/v1/fundamentals.c
++@@ -0,0 +1,40 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++#define NUM_INPUT_SIZE 10
+++
+++#include "fundamentals.h"
+++
+++// Takes a string input from user, then an index number and returns the character at that index of the string
+++void fundamentals() {
+++/* Version 1 */
+++	printf("*** Start of Indexing Strings Demo ***\n");
+++	char buffer1[BUFFER_SIZE];
+++	char numInput[NUM_INPUT_SIZE];
+++	size_t position;
+++	do
+++	{
+++		printf("Type not empty string (q - to quit):\n");
+++		fgets(buffer1, BUFFER_SIZE, stdin);
+++		buffer1[strlen(buffer1) - 1] = '\0';
+++		if (strcmp(buffer1, "q") != 0)
+++		{
+++			printf("Type the character position within the string:\n");
+++			fgets(numInput, NUM_INPUT_SIZE, stdin);
+++			numInput[strlen(numInput) - 1] = '\0';
+++			position = atoi(numInput);
+++			if (position >= strlen(buffer1))
+++			{
+++				position = strlen(buffer1) - 1;
+++				printf("Too big... Position reduced to max. available\n");
+++			}
+++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+++		}
+++	} while (strcmp(buffer1, "q") != 0);
+++	printf("*** End of Indexing Strings Demo ***\n\n");
+++
+++	/* Version 2 */
+++	//>> insert here
+++
+++	/* Version 3 */
+++	//>> insert here
+++}
++\ No newline at end of file
++diff --git a/fundamentals/v1/fundamentals.h b/fundamentals/v1/fundamentals.h
++new file mode 100644
++index 0000000..14a6f4f
++--- /dev/null
+++++ b/fundamentals/v1/fundamentals.h
++@@ -0,0 +1,11 @@
+++#ifndef _FUNDAMENTALS_H_
+++#define _FUNDAMENTALS_H_
+++
+++#include <stdio.h>
+++#include <stdlib.h>
+++#include <string.h>
+++
+++// Takes a string input from user, then an index number and returns the character at that index of the string
+++void fundamentals(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/fundamentals/v1/main.c b/fundamentals/v1/main.c
++new file mode 100644
++index 0000000..1225e71
++--- /dev/null
+++++ b/fundamentals/v1/main.c
++@@ -0,0 +1,7 @@
+++#include "fundamentals.h"
+++
+++int main(void)
+++{
+++	fundamentals();
+++	return 0;
+++}
++\ No newline at end of file
++diff --git a/main/converting.c b/main/converting.c
++new file mode 100644
++index 0000000..dc92171
++--- /dev/null
+++++ b/main/converting.c
++@@ -0,0 +1,34 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++
+++#include "converting.h"
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting() {
+++/* Version 1 */
+++	printf("*** Start of Converting Strings to int Demo ***\n");
+++	char intString[BUFFER_SIZE];
+++	int intNumber;
+++	do
+++	{
+++		printf("Type an int numeric string (q - to quit):\n");
+++		fgets(intString, BUFFER_SIZE, stdin);
+++		intString[strlen(intString) - 1] = '\0';
+++		if (strcmp(intString, "q") != 0)
+++		{
+++			intNumber = atoi(intString);
+++			printf("Converted number is %d\n", intNumber);
+++		}
+++	}
+++	while (strcmp(intString, "q") != 0);
+++	printf("*** End of Converting Strings to int Demo ***\n\n");
+++
+++/* Version 2 */
+++//>> insert here
+++
+++
+++/* Version 3 */
+++//>> insert here
+++
+++
+++}
++diff --git a/main/converting.h b/main/converting.h
++new file mode 100644
++index 0000000..94e86ab
++--- /dev/null
+++++ b/main/converting.h
++@@ -0,0 +1,11 @@
+++#ifndef _CONVERTING_H_
+++#define _CONVERTING_H_
+++
+++#include <stdio.h>
+++#include <string.h>
+++#include <stdlib.h>
+++
+++// User inputs a number as a string, then it is returned as an int
+++void converting(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/main/fundamentals.c b/main/fundamentals.c
++new file mode 100644
++index 0000000..1215375
++--- /dev/null
+++++ b/main/fundamentals.c
++@@ -0,0 +1,40 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++#define NUM_INPUT_SIZE 10
+++
+++#include "fundamentals.h"
+++
+++// Takes a string input from user, then an index number and returns the character at that index of the string
+++void fundamentals() {
+++/* Version 1 */
+++	printf("*** Start of Indexing Strings Demo ***\n");
+++	char buffer1[BUFFER_SIZE];
+++	char numInput[NUM_INPUT_SIZE];
+++	size_t position;
+++	do
+++	{
+++		printf("Type not empty string (q - to quit):\n");
+++		fgets(buffer1, BUFFER_SIZE, stdin);
+++		buffer1[strlen(buffer1) - 1] = '\0';
+++		if (strcmp(buffer1, "q") != 0)
+++		{
+++			printf("Type the character position within the string:\n");
+++			fgets(numInput, NUM_INPUT_SIZE, stdin);
+++			numInput[strlen(numInput) - 1] = '\0';
+++			position = atoi(numInput);
+++			if (position >= strlen(buffer1))
+++			{
+++				position = strlen(buffer1) - 1;
+++				printf("Too big... Position reduced to max. available\n");
+++			}
+++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+++		}
+++	} while (strcmp(buffer1, "q") != 0);
+++	printf("*** End of Indexing Strings Demo ***\n\n");
+++
+++	/* Version 2 */
+++	//>> insert here
+++
+++	/* Version 3 */
+++	//>> insert here
+++}
++\ No newline at end of file
++diff --git a/main/fundamentals.h b/main/fundamentals.h
++new file mode 100644
++index 0000000..14a6f4f
++--- /dev/null
+++++ b/main/fundamentals.h
++@@ -0,0 +1,11 @@
+++#ifndef _FUNDAMENTALS_H_
+++#define _FUNDAMENTALS_H_
+++
+++#include <stdio.h>
+++#include <stdlib.h>
+++#include <string.h>
+++
+++// Takes a string input from user, then an index number and returns the character at that index of the string
+++void fundamentals(void);
+++
+++#endif
++\ No newline at end of file
++diff --git a/main/main.c b/main/main.c
++new file mode 100644
++index 0000000..5062fbb
++--- /dev/null
+++++ b/main/main.c
++@@ -0,0 +1,12 @@
+++#include "fundamentals.h"
+++#include "manipulating.h"
+++#include "tokenizing.h"
+++#include "converting.h"
+++
+++int main(void)
+++{
+++	fundamentals();
+++	manipulating();
+++	tokenizing();
+++	converting();
+++}
++diff --git a/main/manipulating.c b/main/manipulating.c
++new file mode 100644
++index 0000000..3de4a55
++--- /dev/null
+++++ b/main/manipulating.c
++@@ -0,0 +1,28 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++#include "manipulating.h"
+++
+++// V1
+++
+++void manipulating(void) {
+++	printf("*** Start if Concatenating Strings Demo ***\n");
+++	char string1[BUFFER_SIZE];
+++	char string2[BUFFER_SIZE];
+++	do {
+++		//Prompt for first string
+++		printf("Type the 1st string (q - to quit):\n");
+++		fgets(string1, BUFFER_SIZE, stdin);
+++		string1[strlen(string1) - 1] = '\0';
+++		//if q was entered quit program
+++		if ((strcmp(string1, "q") != 0)) {
+++			printf("Type the 2nd string:\n");
+++			//promt for 2nd string
+++			fgets(string2, BUFFER_SIZE, stdin);
+++			string2[strlen(string2) - 1] = '\0';
+++			//concatenate string
+++			strcat(string1, string2);
+++			printf("Concatenated string is \'%s\'\n", string1);
+++		}
+++	} while (strcmp(string1, "q") != 0);
+++	printf("*** End of Concatenating Strings Demo ***\n\n");
+++}
++\ No newline at end of file
++diff --git a/main/manipulating.h b/main/manipulating.h
++new file mode 100644
++index 0000000..434f748
++--- /dev/null
+++++ b/main/manipulating.h
++@@ -0,0 +1,6 @@
+++#ifndef _MANIPULATING_H_
+++#define _MANIPULATING_H_
+++#include <stdio.h>
+++#include <string.h>
+++void manipulating(void);
+++#endif
++\ No newline at end of file
++diff --git a/main/tokenizing.c b/main/tokenizing.c
++new file mode 100644
++index 0000000..97680d4
++--- /dev/null
+++++ b/main/tokenizing.c
++@@ -0,0 +1,42 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 300
+++#include "tokenizing.h"
+++
+++/* Version 1 */
+++void tokenizing(void)
+++{
+++	printf("*** Start of Tokenizing Words Demo ***\n");
+++	char words[BUFFER_SIZE];
+++	char* nextWord = NULL;
+++	int wordsCounter;
+++	do {
+++		printf("Type a few words seperated by space  (q - to quit):\n");
+++		fgets(words, BUFFER_SIZE, stdin);
+++		words[strlen(words) - 1] = '\0';
+++		if (strcmp(words, "q") != 0) {
+++			nextWord = strtok(words, " ");
+++			wordsCounter = 1;
+++			while(nextWord) {
+++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+++				nextWord = strtok(NULL, " ");
+++
+++			}
+++		}
+++	} while (strcmp(words, "q") != 0);
+++	printf("*** End of Tokenizing Words Demo ***\n\n");
+++
+++}
+++
+++
+++
+++
+++
+++/* Version 2 */
+++
+++
+++
+++/* Version 3 */
+++
+++
+++
+++
++diff --git a/main/tokenizing.h b/main/tokenizing.h
++new file mode 100644
++index 0000000..d377740
++--- /dev/null
+++++ b/main/tokenizing.h
++@@ -0,0 +1,10 @@
+++#ifndef _TOKENIZING_H
+++#define _TOKENIZING_H
+++
+++#include <stdio.h>
+++#include <string.h>
+++
+++void tokenizing(void);
+++
+++#endif 
+++
++diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
++new file mode 100644
++index 0000000..ce82fd8
++Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo differ
++diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
++new file mode 100644
++index 0000000..95cfcc7
++Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db differ
++diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
++new file mode 100644
++index 0000000..b2ba1dc
++Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db differ
++diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
++new file mode 100644
++index 0000000..6a221a6
++--- /dev/null
+++++ b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx	
++@@ -0,0 +1,9 @@
+++Manipulation Module
+++
+++This module concatenates 2 strings sized to a defined macro.
+++
+++Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
+++
+++An input of `q' was tested to ensure it would result in ending the program.
+++
+++A string that is greater than the initialized memory was tested to ensure it would not crash the program.
++diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
++new file mode 100644
++index 0000000..1bcc78d
++--- /dev/null
+++++ b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c	
++@@ -0,0 +1,5 @@
+++int main(void) {
+++
+++	manipulating();
+++	return 0;
+++}
++\ No newline at end of file
++diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/Manipulation V1/Manipulation V1/manipulating.c
++new file mode 100644
++index 0000000..3de4a55
++--- /dev/null
+++++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.c	
++@@ -0,0 +1,28 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 80
+++#include "manipulating.h"
+++
+++// V1
+++
+++void manipulating(void) {
+++	printf("*** Start if Concatenating Strings Demo ***\n");
+++	char string1[BUFFER_SIZE];
+++	char string2[BUFFER_SIZE];
+++	do {
+++		//Prompt for first string
+++		printf("Type the 1st string (q - to quit):\n");
+++		fgets(string1, BUFFER_SIZE, stdin);
+++		string1[strlen(string1) - 1] = '\0';
+++		//if q was entered quit program
+++		if ((strcmp(string1, "q") != 0)) {
+++			printf("Type the 2nd string:\n");
+++			//promt for 2nd string
+++			fgets(string2, BUFFER_SIZE, stdin);
+++			string2[strlen(string2) - 1] = '\0';
+++			//concatenate string
+++			strcat(string1, string2);
+++			printf("Concatenated string is \'%s\'\n", string1);
+++		}
+++	} while (strcmp(string1, "q") != 0);
+++	printf("*** End of Concatenating Strings Demo ***\n\n");
+++}
++\ No newline at end of file
++diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/Manipulation V1/Manipulation V1/manipulating.h
++new file mode 100644
++index 0000000..434f748
++--- /dev/null
+++++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.h	
++@@ -0,0 +1,6 @@
+++#ifndef _MANIPULATING_H_
+++#define _MANIPULATING_H_
+++#include <stdio.h>
+++#include <string.h>
+++void manipulating(void);
+++#endif
++\ No newline at end of file
++diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
++new file mode 100644
++index 0000000..de4db70
++Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx differ
++diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/tokenizing/PM-Notes-DarianGrijalba.docx
++new file mode 100644
++index 0000000..79615b7
++--- /dev/null
+++++ b/tokenizing/PM-Notes-DarianGrijalba.docx
++@@ -0,0 +1,35 @@
+++                                 Tokenizing v1
+++Test Cases
+++*** Start of Tokenizing Words Demo ***
+++Type a few words separated by space  (q - to quit):
+++Inputs: "The"
+++Outputs: Word #1 is The
+++Type a few words separated by space  (q - to quit):
+++Inputs: "q"
+++*** End of Tokenizing Words Demo ***
+++
+++*** Start of Tokenizing Words Demo ***
+++Type a few words separated by space  (q - to quit):
+++Inputs: "Have A Good Day"
+++Outputs: Word #1 is Have
+++	   Word #2 is A
+++	   Word #3 is Good
+++	   Word #4 is Day
+++Type a few words separated by space  (q - to quit):
+++Inputs: "q"
+++*** End of Tokenizing Words Demo ***
+++
+++*** Start of Tokenizing Words Demo ***
+++Type a few words separated by space  (q - to quit):
+++Inputs: "HaveA                                Gooooooooooooood                               Day"
+++Outputs: Word #1 is HaveA
+++	   Word #2 is Goooooooooooooood
+++	   Word #3 is Day
+++Type a few words separated by space  (q - to quit):
+++Inputs: "q"
+++*** End of Tokenizing Words Demo ***
+++
+++Basically will calculate the amount of words the user inputted and list them out one by one 
+++
+++
+++
++diff --git a/tokenizing/tokenizing.c b/tokenizing/tokenizing.c
++new file mode 100644
++index 0000000..cd11fd7
++--- /dev/null
+++++ b/tokenizing/tokenizing.c
++@@ -0,0 +1,42 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++#define BUFFER_SIZE 300
+++#include "Tokenzing.h"
+++
+++/* Version 1 */
+++void tokenizing(void)
+++{
+++	printf("*** Start of Tokenizing Words Demo ***\n");
+++	char words[BUFFER_SIZE];
+++	char* nextWord = NULL;
+++	int wordsCounter;
+++	do {
+++		printf("Type a few words seperated by space  (q - to quit):\n");
+++		fgets(words, BUFFER_SIZE, stdin);
+++		words[strlen(words) - 1] = '\0';
+++		if (strcmp(words, "q") != 0) {
+++			nextWord = strtok(words, " ");
+++			wordsCounter = 1;
+++			while(nextWord) {
+++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+++				nextWord = strtok(NULL, " ");
+++
+++			}
+++		}
+++	} while (strcmp(words, "q") != 0);
+++	printf("*** End of Tokenizing Words Demo ***\n\n");
+++
+++}
+++
+++
+++
+++
+++
+++/* Version 2 */
+++
+++
+++
+++/* Version 3 */
+++
+++
+++
+++
++diff --git a/tokenizing/tokenizing.h b/tokenizing/tokenizing.h
++new file mode 100644
++index 0000000..c136582
++--- /dev/null
+++++ b/tokenizing/tokenizing.h
++@@ -0,0 +1,16 @@
+++#ifndef _TOKENIZING_H
+++#define _TOKENIZING_H
+++
+++#include <stdio.h>
+++#include <string.h>
+++
+++void tokenizing(void);
+++
+++int main() {
+++    // Call your tokenizing function or include it in your main function
+++    tokenizing();
+++
+++    return 0;
+++}
+++#endif 
+++
++
++commit 306f1ee35754c5c7e56bc11fb2c61f66956b2f9f
++Author: Axton Smith <axtonsmith@gmail.com>
++Date:   Wed Dec 6 21:02:16 2023 -0500
++
++    Initial commit
++
++diff --git a/README.md b/README.md
++new file mode 100644
++index 0000000..ec7a918
++--- /dev/null
+++++ b/README.md
++@@ -0,0 +1,2 @@
+++# CPR101group3
+++Final project for a computer principles for programmers course
+
+commit 01f89458ddc774511e45d502a67641a170760617
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Sat Dec 9 00:03:26 2023 -0500
+
+    Add fundamentals module and add to main
+
+diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
+index 814fb41..b26bd94 100644
+Binary files a/V2/Final-Project-Plan.xlsx and b/V2/Final-Project-Plan.xlsx differ
+diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
+index 40e66b0..d7fe3d1 100644
+Binary files a/V2/Final-Project-Test-Cases.xlsx and b/V2/Final-Project-Test-Cases.xlsx differ
+diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
+deleted file mode 100644
+index 92459be..0000000
+Binary files a/V2/Tokenizing.zip and /dev/null differ
+diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
+deleted file mode 100644
+index 92459be..0000000
+Binary files a/V2/Tokenzing/Tokenizing.zip and /dev/null differ
+diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
+deleted file mode 100644
+index e69de29..0000000
+diff --git a/V2/fundamentals/Fundamentals Module V2.docx b/V2/fundamentals/Fundamentals Module V2.docx
+new file mode 100644
+index 0000000..f98ecba
+--- /dev/null
++++ b/V2/fundamentals/Fundamentals Module V2.docx	
+@@ -0,0 +1,3 @@
++Fundamentals Module V2
++This module tells you the length of an input string.
++Testing: To test the module, I will use varying lengths of string with and without spaces, as well as an empty string.
+diff --git a/V2/fundamentals/fundamentals-test-cases.xlsx b/V2/fundamentals/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..5ee1fc1
+Binary files /dev/null and b/V2/fundamentals/fundamentals-test-cases.xlsx differ
+diff --git a/V2/fundamentals/fundamentals.c b/V2/fundamentals/fundamentals.c
+new file mode 100644
+index 0000000..4596c8d
+--- /dev/null
++++ b/V2/fundamentals/fundamentals.c
+@@ -0,0 +1,49 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	printf("*** Start of Measuring Strings Demo ***\n");
++	char buffer2[BUFFER_SIZE];
++	do {
++		printf("Type a string (q - to quit):\n");
++		fgets(buffer2, BUFFER_SIZE, stdin);
++		buffer2[strlen(buffer2) - 1] = '\0';
++		if (strcmp(buffer2, "q") != 0)
++			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
++	} while (strcmp(buffer2, "q") != 0);
++	printf("*** End of Measuring Strings Demo ***\n\n");
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/V2/fundamentals/fundamentals.h b/V2/fundamentals/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/V2/fundamentals/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/fundamentals/main.c b/V2/fundamentals/main.c
+new file mode 100644
+index 0000000..1225e71
+--- /dev/null
++++ b/V2/fundamentals/main.c
+@@ -0,0 +1,7 @@
++#include "fundamentals.h"
++
++int main(void)
++{
++	fundamentals();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/main/fundamentals.c b/V2/main/fundamentals.c
+new file mode 100644
+index 0000000..4596c8d
+--- /dev/null
++++ b/V2/main/fundamentals.c
+@@ -0,0 +1,49 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	printf("*** Start of Measuring Strings Demo ***\n");
++	char buffer2[BUFFER_SIZE];
++	do {
++		printf("Type a string (q - to quit):\n");
++		fgets(buffer2, BUFFER_SIZE, stdin);
++		buffer2[strlen(buffer2) - 1] = '\0';
++		if (strcmp(buffer2, "q") != 0)
++			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
++	} while (strcmp(buffer2, "q") != 0);
++	printf("*** End of Measuring Strings Demo ***\n\n");
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/V2/main/fundamentals.h b/V2/main/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/V2/main/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/Tokenzing/Tokenzing.c b/V2/main/tokenizing.c
+similarity index 95%
+rename from V2/Tokenzing/Tokenzing.c
+rename to V2/main/tokenizing.c
+index 734c7c6..aa1e13a 100644
+--- a/V2/Tokenzing/Tokenzing.c
++++ b/V2/main/tokenizing.c
+@@ -1,62 +1,62 @@
+-#define _CRT_SECURE_NO_WARNINGS
+-#define BUFFER_SIZE 300
+-#include "Tokenzing.h"
+-
+-/* Version 1 */
+-void tokenizing(void)
+-{
+-	/*printf("*** Start of Tokenizing Words Demo ***\n");
+-	char words[BUFFER_SIZE];
+-	char* nextWord = NULL;
+-	int wordsCounter;
+-	do {
+-		printf("Type a few words seperated by space  (q - to quit):\n");
+-		fgets(words, BUFFER_SIZE, stdin);
+-		words[strlen(words) - 1] = '\0';
+-		if (strcmp(words, "q") != 0) {
+-			nextWord = strtok(words, " ");
+-			wordsCounter = 1;
+-			while (nextWord) {
+-				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+-				nextWord = strtok(NULL, " ");
+-
+-			}
+-		}
+-	} while (strcmp(words, "q") != 0);
+-	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+-
+-
+-
+-
+-
+-
+-
+-	/* Version 2 */
+-	printf("*** Start of Tokenizing Words Demo ***\n");
+-	char phrases[BUFFER_SIZE];
+-	char* nextphrase = NULL;
+-	int phrasesCounter;
+-	do
+-	{
+-		printf("Type a few phrases seperated by space  (q - to quit):\n");
+-		fgets(phrases, BUFFER_SIZE, stdin);
+-		phrases[strlen(phrases) - 1] = '\0';
+-		if (strcmp(phrases, "q") != 0)
+-		{
+-			nextphrase = strtok(phrases, " ");
+-			phrasesCounter = 1;
+-			while (nextphrase)
+-			{
+-				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+-				nextphrase = strtok(NULL, " ");
+-			}
+-		}
+-	} while (strcmp(phrases, "q") != 0);
+-	printf("*** End of Tokenizing Words Demo ***\n\n");
+-
+-	return 0;
+-}
+-
+-
+-
+-	
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "Tokenzing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	/*printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while (nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
++
++
++
++
++
++
++
++	/* Version 2 */
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char phrases[BUFFER_SIZE];
++	char* nextphrase = NULL;
++	int phrasesCounter;
++	do
++	{
++		printf("Type a few phrases seperated by space  (q - to quit):\n");
++		fgets(phrases, BUFFER_SIZE, stdin);
++		phrases[strlen(phrases) - 1] = '\0';
++		if (strcmp(phrases, "q") != 0)
++		{
++			nextphrase = strtok(phrases, " ");
++			phrasesCounter = 1;
++			while (nextphrase)
++			{
++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
++				nextphrase = strtok(NULL, " ");
++			}
++		}
++	} while (strcmp(phrases, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++	return 0;
++}
++
++
++
++	
+diff --git a/V2/Tokenzing/Tokenzing.h b/V2/main/tokenizing.h
+similarity index 91%
+rename from V2/Tokenzing/Tokenzing.h
+rename to V2/main/tokenizing.h
+index c8bfdb8..d96fde1 100644
+--- a/V2/Tokenzing/Tokenzing.h
++++ b/V2/main/tokenizing.h
+@@ -1,15 +1,15 @@
+-#ifndef _TOKENIZING_H
+-#define _TOKENIZING_H
+-
+-#include <stdio.h>
+-#include <string.h>
+-
+-void tokenizing(void);
+-
+-int main() {
+-    // Call your tokenizing function or include it in your main function
+-    tokenizing();
+-
+-    return 0;
+-}
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++int main() {
++    // Call your tokenizing function or include it in your main function
++    tokenizing();
++
++    return 0;
++}
+ #endif 
+\ No newline at end of file
+diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/tokenizing/Tokenizing v2 PM-notes.docx
+similarity index 100%
+rename from V2/Tokenzing/Tokenizing v2 PM-notes.docx
+rename to V2/tokenizing/Tokenizing v2 PM-notes.docx
+diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx
+similarity index 100%
+rename from V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
+rename to V2/tokenizing/Tokenzing_v2_test-cases.xlsx
+diff --git a/V2/tokenizing/tokenizing.c b/V2/tokenizing/tokenizing.c
+new file mode 100644
+index 0000000..aa1e13a
+--- /dev/null
++++ b/V2/tokenizing/tokenizing.c
+@@ -0,0 +1,62 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "Tokenzing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	/*printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while (nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
++
++
++
++
++
++
++
++	/* Version 2 */
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char phrases[BUFFER_SIZE];
++	char* nextphrase = NULL;
++	int phrasesCounter;
++	do
++	{
++		printf("Type a few phrases seperated by space  (q - to quit):\n");
++		fgets(phrases, BUFFER_SIZE, stdin);
++		phrases[strlen(phrases) - 1] = '\0';
++		if (strcmp(phrases, "q") != 0)
++		{
++			nextphrase = strtok(phrases, " ");
++			phrasesCounter = 1;
++			while (nextphrase)
++			{
++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
++				nextphrase = strtok(NULL, " ");
++			}
++		}
++	} while (strcmp(phrases, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++	return 0;
++}
++
++
++
++	
+diff --git a/V2/tokenizing/tokenizing.h b/V2/tokenizing/tokenizing.h
+new file mode 100644
+index 0000000..d96fde1
+--- /dev/null
++++ b/V2/tokenizing/tokenizing.h
+@@ -0,0 +1,15 @@
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++int main() {
++    // Call your tokenizing function or include it in your main function
++    tokenizing();
++
++    return 0;
++}
++#endif 
+\ No newline at end of file
+
+commit b3a93cc2072faf105ab22552011b51ace61475d4
+Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
+Date:   Fri Dec 8 23:48:26 2023 -0500
+
+    Add files via upload
+
+diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/Tokenzing/Tokenizing v2 PM-notes.docx
+new file mode 100644
+index 0000000..a9a5ded
+--- /dev/null
++++ b/V2/Tokenzing/Tokenizing v2 PM-notes.docx	
+@@ -0,0 +1,3 @@
++                            Tokenizing v2 PM-notes
++Basically this was the same process as v1 and even the code of the Tokenizing v2 was  basically exactly the same as v1 just changed to every phrase in the sentence instead of every word that's it 
++                                       
+diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
+new file mode 100644
+index 0000000..92459be
+Binary files /dev/null and b/V2/Tokenzing/Tokenizing.zip differ
+diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
+new file mode 100644
+index 0000000..e69de29
+diff --git a/V2/Tokenzing/Tokenzing.c b/V2/Tokenzing/Tokenzing.c
+new file mode 100644
+index 0000000..734c7c6
+--- /dev/null
++++ b/V2/Tokenzing/Tokenzing.c
+@@ -0,0 +1,62 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "Tokenzing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	/*printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while (nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
++
++
++
++
++
++
++
++	/* Version 2 */
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char phrases[BUFFER_SIZE];
++	char* nextphrase = NULL;
++	int phrasesCounter;
++	do
++	{
++		printf("Type a few phrases seperated by space  (q - to quit):\n");
++		fgets(phrases, BUFFER_SIZE, stdin);
++		phrases[strlen(phrases) - 1] = '\0';
++		if (strcmp(phrases, "q") != 0)
++		{
++			nextphrase = strtok(phrases, " ");
++			phrasesCounter = 1;
++			while (nextphrase)
++			{
++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
++				nextphrase = strtok(NULL, " ");
++			}
++		}
++	} while (strcmp(phrases, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++	return 0;
++}
++
++
++
++	
+diff --git a/V2/Tokenzing/Tokenzing.h b/V2/Tokenzing/Tokenzing.h
+new file mode 100644
+index 0000000..c8bfdb8
+--- /dev/null
++++ b/V2/Tokenzing/Tokenzing.h
+@@ -0,0 +1,15 @@
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++int main() {
++    // Call your tokenizing function or include it in your main function
++    tokenizing();
++
++    return 0;
++}
++#endif 
+\ No newline at end of file
+diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
+new file mode 100644
+index 0000000..cb18ef6
+Binary files /dev/null and b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx differ
+
+commit a59e9df43a0eb5e8a9a56bf396fa2e938c3698ad
+Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
+Date:   Fri Dec 8 23:47:17 2023 -0500
+
+    Add files via upload
+
+diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
+new file mode 100644
+index 0000000..92459be
+Binary files /dev/null and b/V2/Tokenizing.zip differ
+
+commit 91039924c420b1f4e2573bfb2371b23dc5645a4e
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 22:22:30 2023 -0500
+
+    Add manipulations and conversions test cases to Final-Project-Test-Cases.xlsx
+
+diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
+new file mode 100644
+index 0000000..814fb41
+Binary files /dev/null and b/V2/Final-Project-Plan.xlsx differ
+diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
+new file mode 100644
+index 0000000..40e66b0
+Binary files /dev/null and b/V2/Final-Project-Test-Cases.xlsx differ
+diff --git a/V2/conversions/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
+index 43a8d2a..f447878 100644
+Binary files a/V2/conversions/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
+diff --git a/V2/main/converting.c b/V2/main/converting.c
+new file mode 100644
+index 0000000..9f0d0ac
+--- /dev/null
++++ b/V2/main/converting.c
+@@ -0,0 +1,47 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++	printf("*** Start of Converting Strings to double Demo ***\n");
++	char doubleString[BUFFER_SIZE];
++	double doubleNumber;
++	do
++	{
++		printf("Type the double numeric string (q - to quit):\n");
++		fgets(doubleString, BUFFER_SIZE, stdin);
++		doubleString[strlen(doubleString) - 1] = '\0';
++		if ((strcmp(doubleString, "q") != 0))
++		{
++			doubleNumber = atof(doubleString);
++			printf("Converted number is %f\n", doubleNumber);
++		}
++	} while (strcmp(doubleString, "q") != 0);
++	printf("*** End of Converting Strings to double Demo ***\n\n");
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/V2/main/converting.h b/V2/main/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/V2/main/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/main/manipulating.c b/V2/main/manipulating.c
+new file mode 100644
+index 0000000..7ba26cd
+--- /dev/null
++++ b/V2/main/manipulating.c
+@@ -0,0 +1,61 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// V1
++
++void manipulating(void) {
++	printf("*** Start of Concatenating Strings Demo ***\n");
++	char string1[BUFFER_SIZE];
++	char string2[BUFFER_SIZE];
++	do {
++		//Prompt for first string
++		printf("Type the 1st string (q - to quit):\n");
++		fgets(string1, BUFFER_SIZE, stdin);
++		string1[strlen(string1) - 1] = '\0';
++		//if q was entered quit program
++		if ((strcmp(string1, "q") != 0)) {
++			printf("Type the 2nd string:\n");
++			//promt for 2nd string
++			fgets(string2, BUFFER_SIZE, stdin);
++			string2[strlen(string2) - 1] = '\0';
++			//concatenate string
++			strcat(string1, string2);
++			printf("Concatenated string is \'%s\'\n", string1);
++		}
++	} while (strcmp(string1, "q") != 0);
++	printf("*** End of Concatenating Strings Demo ***\n\n");
++
++	//V2
++	printf("***Start of Comparing Strings Demon***\n");
++	char compare1[BUFFER_SIZE];
++	char compare2[BUFFER_SIZE];
++	int result;
++	do {
++		//Receive user input for the 1st string
++		printf("Type the 1st string to compare (q - to quit):\n");
++		fgets(compare1, BUFFER_SIZE, stdin);
++		//Add an ending NULL to the 1st string
++		compare1[strlen(compare1) - 1] = '\0';
++		//Check that the user did not input 'q' to quit
++		if (strcmp(compare1, "q") != 0) {
++			//Receive user input for the 2nd string
++			printf("Type the 2nd string to compare:\n");
++			fgets(compare2, BUFFER_SIZE, stdin);
++			//Add an ending NULL to the 2nd string
++			compare2[strlen(compare2) - 1] = '\0';
++			result = strcmp(compare1, compare2);
++			//Check if the 1st string < than the 2nd string
++			if (result < 0)
++				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
++			//Check if the strings are equal
++			else if (result == 0)
++				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
++			//Check if the first string is greater than the 2nd string
++			else
++				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
++
++		}
++	} while (strcmp(compare1, "q") != 0);
++	printf("*** End of Comparing Strings Demon ***\n\n");
++}
+\ No newline at end of file
+diff --git a/V2/main/manipulating.h b/V2/main/manipulating.h
+new file mode 100644
+index 0000000..434f748
+--- /dev/null
++++ b/V2/main/manipulating.h
+@@ -0,0 +1,6 @@
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++#include <stdio.h>
++#include <string.h>
++void manipulating(void);
++#endif
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
+index 323e377..dc49fc2 100644
+Binary files a/V2/manipulations/manipulation-test-cases.xlsx and b/V2/manipulations/manipulation-test-cases.xlsx differ
+
+commit a43fbc4a9b1fb232cd9c5c46d4bbff26133c5afb
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 22:05:42 2023 -0500
+
+    Add conversions module to V2
+
+diff --git a/V1/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
+deleted file mode 100644
+index ea57e7e..0000000
+Binary files a/V1/conversions/conversionsV1.zip and /dev/null differ
+diff --git a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+deleted file mode 100644
+index dc61b8f..0000000
+--- a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
++++ /dev/null
+@@ -1,4 +0,0 @@
+-Conversion Module
+-This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+-Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+-We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/V1/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
+deleted file mode 100644
+index a2cffb9..0000000
+Binary files a/V1/conversions/conversionsV1/conversions-test-cases.xlsx and /dev/null differ
+diff --git a/V1/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
+deleted file mode 100644
+index dc92171..0000000
+--- a/V1/conversions/conversionsV1/converting.c
++++ /dev/null
+@@ -1,34 +0,0 @@
+-#define _CRT_SECURE_NO_WARNINGS
+-#define BUFFER_SIZE 80
+-
+-#include "converting.h"
+-
+-// User inputs a number as a string, then it is returned as an int
+-void converting() {
+-/* Version 1 */
+-	printf("*** Start of Converting Strings to int Demo ***\n");
+-	char intString[BUFFER_SIZE];
+-	int intNumber;
+-	do
+-	{
+-		printf("Type an int numeric string (q - to quit):\n");
+-		fgets(intString, BUFFER_SIZE, stdin);
+-		intString[strlen(intString) - 1] = '\0';
+-		if (strcmp(intString, "q") != 0)
+-		{
+-			intNumber = atoi(intString);
+-			printf("Converted number is %d\n", intNumber);
+-		}
+-	}
+-	while (strcmp(intString, "q") != 0);
+-	printf("*** End of Converting Strings to int Demo ***\n\n");
+-
+-/* Version 2 */
+-//>> insert here
+-
+-
+-/* Version 3 */
+-//>> insert here
+-
+-
+-}
+diff --git a/V1/conversions/converting.c b/V1/conversions/templates/converting.c
+similarity index 100%
+rename from V1/conversions/converting.c
+rename to V1/conversions/templates/converting.c
+diff --git a/V1/conversions/converting_header.png b/V1/conversions/templates/converting_header.png
+similarity index 100%
+rename from V1/conversions/converting_header.png
+rename to V1/conversions/templates/converting_header.png
+diff --git a/V1/conversions/converting_v1.png b/V1/conversions/templates/converting_v1.png
+similarity index 100%
+rename from V1/conversions/converting_v1.png
+rename to V1/conversions/templates/converting_v1.png
+diff --git a/V1/conversions/converting_v2.png b/V1/conversions/templates/converting_v2.png
+similarity index 100%
+rename from V1/conversions/converting_v2.png
+rename to V1/conversions/templates/converting_v2.png
+diff --git a/V1/conversions/converting_v3.png b/V1/conversions/templates/converting_v3.png
+similarity index 100%
+rename from V1/conversions/converting_v3.png
+rename to V1/conversions/templates/converting_v3.png
+diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/PM-Notes-AxtonSmith.docx
+similarity index 60%
+rename from V2/conversions/V1/PM-Notes-AxtonSmith.docx
+rename to V2/conversions/PM-Notes-AxtonSmith.docx
+index dc61b8f..eb38a98 100644
+--- a/V2/conversions/V1/PM-Notes-AxtonSmith.docx
++++ b/V2/conversions/PM-Notes-AxtonSmith.docx
+@@ -2,3 +2,4 @@ Conversion Module
+ This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+ Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+ We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
++Version 2 of this module will convert the input into double values.
+diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
+deleted file mode 100644
+index 94e86ab..0000000
+--- a/V2/conversions/V1/converting.h
++++ /dev/null
+@@ -1,11 +0,0 @@
+-#ifndef _CONVERTING_H_
+-#define _CONVERTING_H_
+-
+-#include <stdio.h>
+-#include <string.h>
+-#include <stdlib.h>
+-
+-// User inputs a number as a string, then it is returned as an int
+-void converting(void);
+-
+-#endif
+\ No newline at end of file
+diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
+deleted file mode 100644
+index 6a8e436..0000000
+--- a/V2/conversions/V1/main.c
++++ /dev/null
+@@ -1,7 +0,0 @@
+-#include "converting.h"
+-
+-int main(void)
+-{
+-	converting();
+-	return 0;
+-}
+\ No newline at end of file
+diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+deleted file mode 100644
+index dc61b8f..0000000
+--- a/V2/conversions/V2/PM-Notes-AxtonSmith.docx
++++ /dev/null
+@@ -1,4 +0,0 @@
+-Conversion Module
+-This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+-Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+-We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
+deleted file mode 100644
+index a2cffb9..0000000
+Binary files a/V2/conversions/V2/conversions-test-cases.xlsx and /dev/null differ
+diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
+deleted file mode 100644
+index dc92171..0000000
+--- a/V2/conversions/V2/converting.c
++++ /dev/null
+@@ -1,34 +0,0 @@
+-#define _CRT_SECURE_NO_WARNINGS
+-#define BUFFER_SIZE 80
+-
+-#include "converting.h"
+-
+-// User inputs a number as a string, then it is returned as an int
+-void converting() {
+-/* Version 1 */
+-	printf("*** Start of Converting Strings to int Demo ***\n");
+-	char intString[BUFFER_SIZE];
+-	int intNumber;
+-	do
+-	{
+-		printf("Type an int numeric string (q - to quit):\n");
+-		fgets(intString, BUFFER_SIZE, stdin);
+-		intString[strlen(intString) - 1] = '\0';
+-		if (strcmp(intString, "q") != 0)
+-		{
+-			intNumber = atoi(intString);
+-			printf("Converted number is %d\n", intNumber);
+-		}
+-	}
+-	while (strcmp(intString, "q") != 0);
+-	printf("*** End of Converting Strings to int Demo ***\n\n");
+-
+-/* Version 2 */
+-//>> insert here
+-
+-
+-/* Version 3 */
+-//>> insert here
+-
+-
+-}
+diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
+deleted file mode 100644
+index 94e86ab..0000000
+--- a/V2/conversions/V2/converting.h
++++ /dev/null
+@@ -1,11 +0,0 @@
+-#ifndef _CONVERTING_H_
+-#define _CONVERTING_H_
+-
+-#include <stdio.h>
+-#include <string.h>
+-#include <stdlib.h>
+-
+-// User inputs a number as a string, then it is returned as an int
+-void converting(void);
+-
+-#endif
+\ No newline at end of file
+diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
+deleted file mode 100644
+index 6a8e436..0000000
+--- a/V2/conversions/V2/main.c
++++ /dev/null
+@@ -1,7 +0,0 @@
+-#include "converting.h"
+-
+-int main(void)
+-{
+-	converting();
+-	return 0;
+-}
+\ No newline at end of file
+diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
+similarity index 53%
+rename from V2/conversions/V1/conversions-test-cases.xlsx
+rename to V2/conversions/conversions-test-cases.xlsx
+index a2cffb9..43a8d2a 100644
+Binary files a/V2/conversions/V1/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
+diff --git a/V2/conversions/V1/converting.c b/V2/conversions/converting.c
+similarity index 57%
+rename from V2/conversions/V1/converting.c
+rename to V2/conversions/converting.c
+index dc92171..9f0d0ac 100644
+--- a/V2/conversions/V1/converting.c
++++ b/V2/conversions/converting.c
+@@ -24,8 +24,21 @@ void converting() {
+ 	printf("*** End of Converting Strings to int Demo ***\n\n");
+ 
+ /* Version 2 */
+-//>> insert here
+-
++	printf("*** Start of Converting Strings to double Demo ***\n");
++	char doubleString[BUFFER_SIZE];
++	double doubleNumber;
++	do
++	{
++		printf("Type the double numeric string (q - to quit):\n");
++		fgets(doubleString, BUFFER_SIZE, stdin);
++		doubleString[strlen(doubleString) - 1] = '\0';
++		if ((strcmp(doubleString, "q") != 0))
++		{
++			doubleNumber = atof(doubleString);
++			printf("Converted number is %f\n", doubleNumber);
++		}
++	} while (strcmp(doubleString, "q") != 0);
++	printf("*** End of Converting Strings to double Demo ***\n\n");
+ 
+ /* Version 3 */
+ //>> insert here
+diff --git a/V1/conversions/conversionsV1/converting.h b/V2/conversions/converting.h
+similarity index 100%
+rename from V1/conversions/conversionsV1/converting.h
+rename to V2/conversions/converting.h
+diff --git a/V1/conversions/conversionsV1/main.c b/V2/conversions/main.c
+similarity index 100%
+rename from V1/conversions/conversionsV1/main.c
+rename to V2/conversions/main.c
+diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
+deleted file mode 100644
+index 88b340e..0000000
+--- a/V2/conversions/templates/converting.c
++++ /dev/null
+@@ -1,16 +0,0 @@
+-#include "converting.h"
+-
+-void converting() {
+-/* Version 1 */
+->> insert here
+-
+-
+-/* Version 2 */
+->> insert here
+-
+-
+-/* Version 3 */
+->> insert here
+-
+-
+-}
+diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
+deleted file mode 100644
+index 4ffb3a8..0000000
+Binary files a/V2/conversions/templates/converting_header.png and /dev/null differ
+diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
+deleted file mode 100644
+index 50f5734..0000000
+Binary files a/V2/conversions/templates/converting_v1.png and /dev/null differ
+diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
+deleted file mode 100644
+index edcdf1e..0000000
+Binary files a/V2/conversions/templates/converting_v2.png and /dev/null differ
+diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
+deleted file mode 100644
+index 146285f..0000000
+Binary files a/V2/conversions/templates/converting_v3.png and /dev/null differ
+
+commit d381ca2bc9cb411356a214dcb09764517b1b8dba
+Author: brandondoray01 <117381471+brandondoray01@users.noreply.github.com>
+Date:   Fri Dec 8 18:43:36 2023 -0500
+
+    Add manipulations module to V2
+
+diff --git a/V2/manipulations/PM-Notes-Brandon-Doray.docx b/V2/manipulations/PM-Notes-Brandon-Doray.docx
+new file mode 100644
+index 0000000..f3443e8
+--- /dev/null
++++ b/V2/manipulations/PM-Notes-Brandon-Doray.docx
+@@ -0,0 +1,25 @@
++Manipulation Module
++
++//V1
++
++This module concatenates 2 strings sized to a defined macro.
++
++Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
++
++An input of `q' was tested to ensure it would result in ending the program.
++
++A string that is greater than the initialized memory was tested to ensure it would not crash the program.
++
++//V2
++
++V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
++
++This function will only compare strings up until it hits a NULL or a char that does not match.
++
++If it hits a char that does not match, anything after that will not be considered in the comparison.
++
++The chars are evaluated using their ASCII value.
++
++The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
++
++
+diff --git a/V2/manipulations/manipulatemain.c b/V2/manipulations/manipulatemain.c
+new file mode 100644
+index 0000000..1bcc78d
+--- /dev/null
++++ b/V2/manipulations/manipulatemain.c
+@@ -0,0 +1,5 @@
++int main(void) {
++
++	manipulating();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulating.c b/V2/manipulations/manipulating.c
+new file mode 100644
+index 0000000..7ba26cd
+--- /dev/null
++++ b/V2/manipulations/manipulating.c
+@@ -0,0 +1,61 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// V1
++
++void manipulating(void) {
++	printf("*** Start of Concatenating Strings Demo ***\n");
++	char string1[BUFFER_SIZE];
++	char string2[BUFFER_SIZE];
++	do {
++		//Prompt for first string
++		printf("Type the 1st string (q - to quit):\n");
++		fgets(string1, BUFFER_SIZE, stdin);
++		string1[strlen(string1) - 1] = '\0';
++		//if q was entered quit program
++		if ((strcmp(string1, "q") != 0)) {
++			printf("Type the 2nd string:\n");
++			//promt for 2nd string
++			fgets(string2, BUFFER_SIZE, stdin);
++			string2[strlen(string2) - 1] = '\0';
++			//concatenate string
++			strcat(string1, string2);
++			printf("Concatenated string is \'%s\'\n", string1);
++		}
++	} while (strcmp(string1, "q") != 0);
++	printf("*** End of Concatenating Strings Demo ***\n\n");
++
++	//V2
++	printf("***Start of Comparing Strings Demon***\n");
++	char compare1[BUFFER_SIZE];
++	char compare2[BUFFER_SIZE];
++	int result;
++	do {
++		//Receive user input for the 1st string
++		printf("Type the 1st string to compare (q - to quit):\n");
++		fgets(compare1, BUFFER_SIZE, stdin);
++		//Add an ending NULL to the 1st string
++		compare1[strlen(compare1) - 1] = '\0';
++		//Check that the user did not input 'q' to quit
++		if (strcmp(compare1, "q") != 0) {
++			//Receive user input for the 2nd string
++			printf("Type the 2nd string to compare:\n");
++			fgets(compare2, BUFFER_SIZE, stdin);
++			//Add an ending NULL to the 2nd string
++			compare2[strlen(compare2) - 1] = '\0';
++			result = strcmp(compare1, compare2);
++			//Check if the 1st string < than the 2nd string
++			if (result < 0)
++				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
++			//Check if the strings are equal
++			else if (result == 0)
++				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
++			//Check if the first string is greater than the 2nd string
++			else
++				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
++
++		}
++	} while (strcmp(compare1, "q") != 0);
++	printf("*** End of Comparing Strings Demon ***\n\n");
++}
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulating.h b/V2/manipulations/manipulating.h
+new file mode 100644
+index 0000000..434f748
+--- /dev/null
++++ b/V2/manipulations/manipulating.h
+@@ -0,0 +1,6 @@
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++#include <stdio.h>
++#include <string.h>
++void manipulating(void);
++#endif
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
+new file mode 100644
+index 0000000..323e377
+Binary files /dev/null and b/V2/manipulations/manipulation-test-cases.xlsx differ
+
+commit 762b012570748db01ca39e1b888a916f027f5c43
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 18:02:18 2023 -0500
+
+    Added main and conversions directories to V2
+
+diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..dc61b8f
+--- /dev/null
++++ b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Conversion Module
++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/V1/conversions-test-cases.xlsx
+new file mode 100644
+index 0000000..a2cffb9
+Binary files /dev/null and b/V2/conversions/V1/conversions-test-cases.xlsx differ
+diff --git a/V2/conversions/V1/converting.c b/V2/conversions/V1/converting.c
+new file mode 100644
+index 0000000..dc92171
+--- /dev/null
++++ b/V2/conversions/V1/converting.c
+@@ -0,0 +1,34 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/V2/conversions/V1/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
+new file mode 100644
+index 0000000..6a8e436
+--- /dev/null
++++ b/V2/conversions/V1/main.c
+@@ -0,0 +1,7 @@
++#include "converting.h"
++
++int main(void)
++{
++	converting();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..dc61b8f
+--- /dev/null
++++ b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Conversion Module
++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
+new file mode 100644
+index 0000000..a2cffb9
+Binary files /dev/null and b/V2/conversions/V2/conversions-test-cases.xlsx differ
+diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
+new file mode 100644
+index 0000000..dc92171
+--- /dev/null
++++ b/V2/conversions/V2/converting.c
+@@ -0,0 +1,34 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/V2/conversions/V2/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
+new file mode 100644
+index 0000000..6a8e436
+--- /dev/null
++++ b/V2/conversions/V2/main.c
+@@ -0,0 +1,7 @@
++#include "converting.h"
++
++int main(void)
++{
++	converting();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
+new file mode 100644
+index 0000000..88b340e
+--- /dev/null
++++ b/V2/conversions/templates/converting.c
+@@ -0,0 +1,16 @@
++#include "converting.h"
++
++void converting() {
++/* Version 1 */
++>> insert here
++
++
++/* Version 2 */
++>> insert here
++
++
++/* Version 3 */
++>> insert here
++
++
++}
+diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
+new file mode 100644
+index 0000000..4ffb3a8
+Binary files /dev/null and b/V2/conversions/templates/converting_header.png differ
+diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
+new file mode 100644
+index 0000000..50f5734
+Binary files /dev/null and b/V2/conversions/templates/converting_v1.png differ
+diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
+new file mode 100644
+index 0000000..edcdf1e
+Binary files /dev/null and b/V2/conversions/templates/converting_v2.png differ
+diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
+new file mode 100644
+index 0000000..146285f
+Binary files /dev/null and b/V2/conversions/templates/converting_v3.png differ
+diff --git a/V2/main/main.c b/V2/main/main.c
+new file mode 100644
+index 0000000..5062fbb
+--- /dev/null
++++ b/V2/main/main.c
+@@ -0,0 +1,12 @@
++#include "fundamentals.h"
++#include "manipulating.h"
++#include "tokenizing.h"
++#include "converting.h"
++
++int main(void)
++{
++	fundamentals();
++	manipulating();
++	tokenizing();
++	converting();
++}
+
+commit 71381063066ca1afc0b8ae3b42200293548cf6bd
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 17:55:59 2023 -0500
+
+    Moved all files to V1, Add V2 directory
+
+diff --git a/conversions/PM-Notes-AxtonSmith.docx b/V1/conversions/PM-Notes-AxtonSmith.docx
+similarity index 100%
+rename from conversions/PM-Notes-AxtonSmith.docx
+rename to V1/conversions/PM-Notes-AxtonSmith.docx
+diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+similarity index 100%
+rename from conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+similarity index 100%
+rename from conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+similarity index 100%
+rename from conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+similarity index 100%
+rename from conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+similarity index 100%
+rename from conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+diff --git a/conversions/code/.vs/v1/v17/.suo b/V1/conversions/code/.vs/v1/v17/.suo
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/.suo
+rename to V1/conversions/code/.vs/v1/v17/.suo
+diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/V1/conversions/code/.vs/v1/v17/Browse.VC.db
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/Browse.VC.db
+rename to V1/conversions/code/.vs/v1/v17/Browse.VC.db
+diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/V1/conversions/code/.vs/v1/v17/Solution.VC.db
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/Solution.VC.db
+rename to V1/conversions/code/.vs/v1/v17/Solution.VC.db
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+diff --git a/conversions/code/converting.c b/V1/conversions/code/converting.c
+similarity index 100%
+rename from conversions/code/converting.c
+rename to V1/conversions/code/converting.c
+diff --git a/conversions/code/converting.h b/V1/conversions/code/converting.h
+similarity index 100%
+rename from conversions/code/converting.h
+rename to V1/conversions/code/converting.h
+diff --git a/conversions/code/main.c b/V1/conversions/code/main.c
+similarity index 100%
+rename from conversions/code/main.c
+rename to V1/conversions/code/main.c
+diff --git a/conversions/code/v1.sln b/V1/conversions/code/v1.sln
+similarity index 100%
+rename from conversions/code/v1.sln
+rename to V1/conversions/code/v1.sln
+diff --git a/conversions/code/v1.vcxproj b/V1/conversions/code/v1.vcxproj
+similarity index 100%
+rename from conversions/code/v1.vcxproj
+rename to V1/conversions/code/v1.vcxproj
+diff --git a/conversions/code/v1.vcxproj.filters b/V1/conversions/code/v1.vcxproj.filters
+similarity index 100%
+rename from conversions/code/v1.vcxproj.filters
+rename to V1/conversions/code/v1.vcxproj.filters
+diff --git a/conversions/code/v1.vcxproj.user b/V1/conversions/code/v1.vcxproj.user
+similarity index 100%
+rename from conversions/code/v1.vcxproj.user
+rename to V1/conversions/code/v1.vcxproj.user
+diff --git a/conversions/code/x64/Debug/converting.obj b/V1/conversions/code/x64/Debug/converting.obj
+similarity index 100%
+rename from conversions/code/x64/Debug/converting.obj
+rename to V1/conversions/code/x64/Debug/converting.obj
+diff --git a/conversions/code/x64/Debug/main.obj b/V1/conversions/code/x64/Debug/main.obj
+similarity index 100%
+rename from conversions/code/x64/Debug/main.obj
+rename to V1/conversions/code/x64/Debug/main.obj
+diff --git a/conversions/code/x64/Debug/v1.exe b/V1/conversions/code/x64/Debug/v1.exe
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.exe
+rename to V1/conversions/code/x64/Debug/v1.exe
+diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/V1/conversions/code/x64/Debug/v1.exe.recipe
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.exe.recipe
+rename to V1/conversions/code/x64/Debug/v1.exe.recipe
+diff --git a/conversions/code/x64/Debug/v1.ilk b/V1/conversions/code/x64/Debug/v1.ilk
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.ilk
+rename to V1/conversions/code/x64/Debug/v1.ilk
+diff --git a/conversions/code/x64/Debug/v1.log b/V1/conversions/code/x64/Debug/v1.log
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.log
+rename to V1/conversions/code/x64/Debug/v1.log
+diff --git a/conversions/code/x64/Debug/v1.pdb b/V1/conversions/code/x64/Debug/v1.pdb
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.pdb
+rename to V1/conversions/code/x64/Debug/v1.pdb
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+rename to V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+rename to V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+diff --git a/conversions/code/x64/Debug/vc143.idb b/V1/conversions/code/x64/Debug/vc143.idb
+similarity index 100%
+rename from conversions/code/x64/Debug/vc143.idb
+rename to V1/conversions/code/x64/Debug/vc143.idb
+diff --git a/conversions/code/x64/Debug/vc143.pdb b/V1/conversions/code/x64/Debug/vc143.pdb
+similarity index 100%
+rename from conversions/code/x64/Debug/vc143.pdb
+rename to V1/conversions/code/x64/Debug/vc143.pdb
+diff --git a/conversions/conversions-test-cases.xlsx b/V1/conversions/conversions-test-cases.xlsx
+similarity index 100%
+rename from conversions/conversions-test-cases.xlsx
+rename to V1/conversions/conversions-test-cases.xlsx
+diff --git a/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
+similarity index 100%
+rename from conversions/conversionsV1.zip
+rename to V1/conversions/conversionsV1.zip
+diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+similarity index 100%
+rename from conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+rename to V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
+similarity index 100%
+rename from conversions/conversionsV1/conversions-test-cases.xlsx
+rename to V1/conversions/conversionsV1/conversions-test-cases.xlsx
+diff --git a/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
+similarity index 100%
+rename from conversions/conversionsV1/converting.c
+rename to V1/conversions/conversionsV1/converting.c
+diff --git a/conversions/conversionsV1/converting.h b/V1/conversions/conversionsV1/converting.h
+similarity index 100%
+rename from conversions/conversionsV1/converting.h
+rename to V1/conversions/conversionsV1/converting.h
+diff --git a/conversions/conversionsV1/main.c b/V1/conversions/conversionsV1/main.c
+similarity index 100%
+rename from conversions/conversionsV1/main.c
+rename to V1/conversions/conversionsV1/main.c
+diff --git a/conversions/converting.c b/V1/conversions/converting.c
+similarity index 100%
+rename from conversions/converting.c
+rename to V1/conversions/converting.c
+diff --git a/conversions/converting_header.png b/V1/conversions/converting_header.png
+similarity index 100%
+rename from conversions/converting_header.png
+rename to V1/conversions/converting_header.png
+diff --git a/conversions/converting_v1.png b/V1/conversions/converting_v1.png
+similarity index 100%
+rename from conversions/converting_v1.png
+rename to V1/conversions/converting_v1.png
+diff --git a/conversions/converting_v2.png b/V1/conversions/converting_v2.png
+similarity index 100%
+rename from conversions/converting_v2.png
+rename to V1/conversions/converting_v2.png
+diff --git a/conversions/converting_v3.png b/V1/conversions/converting_v3.png
+similarity index 100%
+rename from conversions/converting_v3.png
+rename to V1/conversions/converting_v3.png
+diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/V1/fundamentals/PM-Notes-AxtonSmith.docx
+similarity index 100%
+rename from fundamentals/PM-Notes-AxtonSmith.docx
+rename to V1/fundamentals/PM-Notes-AxtonSmith.docx
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+similarity index 100%
+rename from fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+rename to V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+similarity index 100%
+rename from fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+rename to V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+similarity index 100%
+rename from fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+rename to V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+diff --git a/fundamentals/code/.vs/project/v17/.suo b/V1/fundamentals/code/.vs/project/v17/.suo
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/.suo
+rename to V1/fundamentals/code/.vs/project/v17/.suo
+diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/V1/fundamentals/code/.vs/project/v17/Browse.VC.db
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/Browse.VC.db
+rename to V1/fundamentals/code/.vs/project/v17/Browse.VC.db
+diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/V1/fundamentals/code/.vs/project/v17/Solution.VC.db
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/Solution.VC.db
+rename to V1/fundamentals/code/.vs/project/v17/Solution.VC.db
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+diff --git a/fundamentals/code/fundamentals.c b/V1/fundamentals/code/fundamentals.c
+similarity index 100%
+rename from fundamentals/code/fundamentals.c
+rename to V1/fundamentals/code/fundamentals.c
+diff --git a/fundamentals/code/fundamentals.h b/V1/fundamentals/code/fundamentals.h
+similarity index 100%
+rename from fundamentals/code/fundamentals.h
+rename to V1/fundamentals/code/fundamentals.h
+diff --git a/fundamentals/code/main.c b/V1/fundamentals/code/main.c
+similarity index 100%
+rename from fundamentals/code/main.c
+rename to V1/fundamentals/code/main.c
+diff --git a/fundamentals/code/project.sln b/V1/fundamentals/code/project.sln
+similarity index 100%
+rename from fundamentals/code/project.sln
+rename to V1/fundamentals/code/project.sln
+diff --git a/fundamentals/code/project.vcxproj b/V1/fundamentals/code/project.vcxproj
+similarity index 100%
+rename from fundamentals/code/project.vcxproj
+rename to V1/fundamentals/code/project.vcxproj
+diff --git a/fundamentals/code/project.vcxproj.filters b/V1/fundamentals/code/project.vcxproj.filters
+similarity index 100%
+rename from fundamentals/code/project.vcxproj.filters
+rename to V1/fundamentals/code/project.vcxproj.filters
+diff --git a/fundamentals/code/project.vcxproj.user b/V1/fundamentals/code/project.vcxproj.user
+similarity index 100%
+rename from fundamentals/code/project.vcxproj.user
+rename to V1/fundamentals/code/project.vcxproj.user
+diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/V1/fundamentals/code/x64/Debug/fundamentals.obj
+similarity index 100%
+rename from fundamentals/code/x64/Debug/fundamentals.obj
+rename to V1/fundamentals/code/x64/Debug/fundamentals.obj
+diff --git a/fundamentals/code/x64/Debug/main.obj b/V1/fundamentals/code/x64/Debug/main.obj
+similarity index 100%
+rename from fundamentals/code/x64/Debug/main.obj
+rename to V1/fundamentals/code/x64/Debug/main.obj
+diff --git a/fundamentals/code/x64/Debug/project.exe b/V1/fundamentals/code/x64/Debug/project.exe
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.exe
+rename to V1/fundamentals/code/x64/Debug/project.exe
+diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/V1/fundamentals/code/x64/Debug/project.exe.recipe
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.exe.recipe
+rename to V1/fundamentals/code/x64/Debug/project.exe.recipe
+diff --git a/fundamentals/code/x64/Debug/project.ilk b/V1/fundamentals/code/x64/Debug/project.ilk
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.ilk
+rename to V1/fundamentals/code/x64/Debug/project.ilk
+diff --git a/fundamentals/code/x64/Debug/project.log b/V1/fundamentals/code/x64/Debug/project.log
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.log
+rename to V1/fundamentals/code/x64/Debug/project.log
+diff --git a/fundamentals/code/x64/Debug/project.pdb b/V1/fundamentals/code/x64/Debug/project.pdb
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.pdb
+rename to V1/fundamentals/code/x64/Debug/project.pdb
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+rename to V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+rename to V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+diff --git a/fundamentals/code/x64/Debug/vc143.idb b/V1/fundamentals/code/x64/Debug/vc143.idb
+similarity index 100%
+rename from fundamentals/code/x64/Debug/vc143.idb
+rename to V1/fundamentals/code/x64/Debug/vc143.idb
+diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/V1/fundamentals/code/x64/Debug/vc143.pdb
+similarity index 100%
+rename from fundamentals/code/x64/Debug/vc143.pdb
+rename to V1/fundamentals/code/x64/Debug/vc143.pdb
+diff --git a/fundamentals/fundamentals-test-cases.xlsx b/V1/fundamentals/fundamentals-test-cases.xlsx
+similarity index 100%
+rename from fundamentals/fundamentals-test-cases.xlsx
+rename to V1/fundamentals/fundamentals-test-cases.xlsx
+diff --git a/fundamentals/fundamentals.c b/V1/fundamentals/fundamentals.c
+similarity index 100%
+rename from fundamentals/fundamentals.c
+rename to V1/fundamentals/fundamentals.c
+diff --git a/fundamentals/fundamentals_header.png b/V1/fundamentals/fundamentals_header.png
+similarity index 100%
+rename from fundamentals/fundamentals_header.png
+rename to V1/fundamentals/fundamentals_header.png
+diff --git a/fundamentals/fundamentals_v1.png b/V1/fundamentals/fundamentals_v1.png
+similarity index 100%
+rename from fundamentals/fundamentals_v1.png
+rename to V1/fundamentals/fundamentals_v1.png
+diff --git a/fundamentals/fundamentals_v2.png b/V1/fundamentals/fundamentals_v2.png
+similarity index 100%
+rename from fundamentals/fundamentals_v2.png
+rename to V1/fundamentals/fundamentals_v2.png
+diff --git a/fundamentals/fundamentals_v3.png b/V1/fundamentals/fundamentals_v3.png
+similarity index 100%
+rename from fundamentals/fundamentals_v3.png
+rename to V1/fundamentals/fundamentals_v3.png
+diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
+similarity index 100%
+rename from fundamentals/v1/PM-Notes-AxtonSmith.docx
+rename to V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
+diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/V1/fundamentals/v1/fundamentals-test-cases.xlsx
+similarity index 100%
+rename from fundamentals/v1/fundamentals-test-cases.xlsx
+rename to V1/fundamentals/v1/fundamentals-test-cases.xlsx
+diff --git a/fundamentals/v1/fundamentals.c b/V1/fundamentals/v1/fundamentals.c
+similarity index 100%
+rename from fundamentals/v1/fundamentals.c
+rename to V1/fundamentals/v1/fundamentals.c
+diff --git a/fundamentals/v1/fundamentals.h b/V1/fundamentals/v1/fundamentals.h
+similarity index 100%
+rename from fundamentals/v1/fundamentals.h
+rename to V1/fundamentals/v1/fundamentals.h
+diff --git a/fundamentals/v1/main.c b/V1/fundamentals/v1/main.c
+similarity index 100%
+rename from fundamentals/v1/main.c
+rename to V1/fundamentals/v1/main.c
+diff --git a/main/converting.c b/V1/main/converting.c
+similarity index 100%
+rename from main/converting.c
+rename to V1/main/converting.c
+diff --git a/main/converting.h b/V1/main/converting.h
+similarity index 100%
+rename from main/converting.h
+rename to V1/main/converting.h
+diff --git a/main/fundamentals.c b/V1/main/fundamentals.c
+similarity index 100%
+rename from main/fundamentals.c
+rename to V1/main/fundamentals.c
+diff --git a/main/fundamentals.h b/V1/main/fundamentals.h
+similarity index 100%
+rename from main/fundamentals.h
+rename to V1/main/fundamentals.h
+diff --git a/main/main.c b/V1/main/main.c
+similarity index 100%
+rename from main/main.c
+rename to V1/main/main.c
+diff --git a/main/manipulating.c b/V1/main/manipulating.c
+similarity index 100%
+rename from main/manipulating.c
+rename to V1/main/manipulating.c
+diff --git a/main/manipulating.h b/V1/main/manipulating.h
+similarity index 100%
+rename from main/manipulating.h
+rename to V1/main/manipulating.h
+diff --git a/main/tokenizing.c b/V1/main/tokenizing.c
+similarity index 100%
+rename from main/tokenizing.c
+rename to V1/main/tokenizing.c
+diff --git a/main/tokenizing.h b/V1/main/tokenizing.h
+similarity index 100%
+rename from main/tokenizing.h
+rename to V1/main/tokenizing.h
+diff --git a/manipulation/PM-Notes-Brandon-Doray.docx b/V1/manipulation/PM-Notes-Brandon-Doray.docx
+similarity index 100%
+rename from manipulation/PM-Notes-Brandon-Doray.docx
+rename to V1/manipulation/PM-Notes-Brandon-Doray.docx
+diff --git a/manipulation/manipulatemain.c b/V1/manipulation/manipulatemain.c
+similarity index 100%
+rename from manipulation/manipulatemain.c
+rename to V1/manipulation/manipulatemain.c
+diff --git a/manipulation/manipulating.c b/V1/manipulation/manipulating.c
+similarity index 100%
+rename from manipulation/manipulating.c
+rename to V1/manipulation/manipulating.c
+diff --git a/manipulation/manipulating.h b/V1/manipulation/manipulating.h
+similarity index 100%
+rename from manipulation/manipulating.h
+rename to V1/manipulation/manipulating.h
+diff --git a/manipulation/manipulation-test-cases.xlsx b/V1/manipulation/manipulation-test-cases.xlsx
+similarity index 100%
+rename from manipulation/manipulation-test-cases.xlsx
+rename to V1/manipulation/manipulation-test-cases.xlsx
+diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/V1/tokenizing/PM-Notes-DarianGrijalba.docx
+similarity index 100%
+rename from tokenizing/PM-Notes-DarianGrijalba.docx
+rename to V1/tokenizing/PM-Notes-DarianGrijalba.docx
+diff --git a/tokenizing/tokenizing.c b/V1/tokenizing/tokenizing.c
+similarity index 100%
+rename from tokenizing/tokenizing.c
+rename to V1/tokenizing/tokenizing.c
+diff --git a/tokenizing/tokenizing.h b/V1/tokenizing/tokenizing.h
+similarity index 100%
+rename from tokenizing/tokenizing.h
+rename to V1/tokenizing/tokenizing.h
+
+commit 0ec0097d57c6a5d87103780c4dc8f8e6d3cc45df
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 17:52:55 2023 -0500
+
+    Fix file path in manipulation directory
+
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
+deleted file mode 100644
+index ce82fd8..0000000
+Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo and /dev/null differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
+deleted file mode 100644
+index 95cfcc7..0000000
+Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db and /dev/null differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
+deleted file mode 100644
+index b2ba1dc..0000000
+Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db and /dev/null differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/PM-Notes-Brandon-Doray.docx
+similarity index 100%
+rename from manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
+rename to manipulation/PM-Notes-Brandon-Doray.docx
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/manipulatemain.c
+similarity index 100%
+rename from manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
+rename to manipulation/manipulatemain.c
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/manipulating.c
+similarity index 100%
+rename from manipulation/Manipulation V1/Manipulation V1/manipulating.c
+rename to manipulation/manipulating.c
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/manipulating.h
+similarity index 100%
+rename from manipulation/Manipulation V1/Manipulation V1/manipulating.h
+rename to manipulation/manipulating.h
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/manipulation-test-cases.xlsx
+similarity index 100%
+rename from manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
+rename to manipulation/manipulation-test-cases.xlsx
+
+commit e40dd3d033d7164d96f9fa0ffe2668ffeb2ccfed
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 17:52:00 2023 -0500
+
+    Add V1 files
+
+diff --git a/conversions/PM-Notes-AxtonSmith.docx b/conversions/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..dc61b8f
+--- /dev/null
++++ b/conversions/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Conversion Module
++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx differ
+diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+new file mode 100644
+index 0000000..2b75f1d
+Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx differ
+diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx differ
+diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx differ
+diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx differ
+diff --git a/conversions/code/.vs/v1/v17/.suo b/conversions/code/.vs/v1/v17/.suo
+new file mode 100644
+index 0000000..218f706
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/.suo differ
+diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/conversions/code/.vs/v1/v17/Browse.VC.db
+new file mode 100644
+index 0000000..086de7c
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/Browse.VC.db differ
+diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/conversions/code/.vs/v1/v17/Solution.VC.db
+new file mode 100644
+index 0000000..da0fe73
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/Solution.VC.db differ
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+new file mode 100644
+index 0000000..137cd6f
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch differ
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+new file mode 100644
+index 0000000..e7b304a
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch differ
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+new file mode 100644
+index 0000000..934be31
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch differ
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+new file mode 100644
+index 0000000..937325b
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch differ
+diff --git a/conversions/code/converting.c b/conversions/code/converting.c
+new file mode 100644
+index 0000000..dc92171
+--- /dev/null
++++ b/conversions/code/converting.c
+@@ -0,0 +1,34 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/conversions/code/converting.h b/conversions/code/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/conversions/code/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/conversions/code/main.c b/conversions/code/main.c
+new file mode 100644
+index 0000000..6a8e436
+--- /dev/null
++++ b/conversions/code/main.c
+@@ -0,0 +1,7 @@
++#include "converting.h"
++
++int main(void)
++{
++	converting();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/conversions/code/v1.sln b/conversions/code/v1.sln
+new file mode 100644
+index 0000000..57619b4
+--- /dev/null
++++ b/conversions/code/v1.sln
+@@ -0,0 +1,31 @@
++ï»¿
++Microsoft Visual Studio Solution File, Format Version 12.00
++# Visual Studio Version 17
++VisualStudioVersion = 17.8.34322.80
++MinimumVisualStudioVersion = 10.0.40219.1
++Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "v1", "v1.vcxproj", "{DFCFF08A-27BA-4895-81DE-69DA151B79DB}"
++EndProject
++Global
++	GlobalSection(SolutionConfigurationPlatforms) = preSolution
++		Debug|x64 = Debug|x64
++		Debug|x86 = Debug|x86
++		Release|x64 = Release|x64
++		Release|x86 = Release|x86
++	EndGlobalSection
++	GlobalSection(ProjectConfigurationPlatforms) = postSolution
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.ActiveCfg = Debug|x64
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.Build.0 = Debug|x64
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.ActiveCfg = Debug|Win32
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.Build.0 = Debug|Win32
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.ActiveCfg = Release|x64
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.Build.0 = Release|x64
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.ActiveCfg = Release|Win32
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.Build.0 = Release|Win32
++	EndGlobalSection
++	GlobalSection(SolutionProperties) = preSolution
++		HideSolutionNode = FALSE
++	EndGlobalSection
++	GlobalSection(ExtensibilityGlobals) = postSolution
++		SolutionGuid = {FB5DDBE1-4B86-462E-8A71-FBB6C215BD41}
++	EndGlobalSection
++EndGlobal
+diff --git a/conversions/code/v1.vcxproj b/conversions/code/v1.vcxproj
+new file mode 100644
+index 0000000..8a35f16
+--- /dev/null
++++ b/conversions/code/v1.vcxproj
+@@ -0,0 +1,139 @@
++<?xml version="1.0" encoding="utf-8"?>
++<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup Label="ProjectConfigurations">
++    <ProjectConfiguration Include="Debug|Win32">
++      <Configuration>Debug</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|Win32">
++      <Configuration>Release</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Debug|x64">
++      <Configuration>Debug</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|x64">
++      <Configuration>Release</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++  </ItemGroup>
++  <PropertyGroup Label="Globals">
++    <VCProjectVersion>17.0</VCProjectVersion>
++    <Keyword>Win32Proj</Keyword>
++    <ProjectGuid>{dfcff08a-27ba-4895-81de-69da151b79db}</ProjectGuid>
++    <RootNamespace>v1</RootNamespace>
++    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
++  <ImportGroup Label="ExtensionSettings">
++  </ImportGroup>
++  <ImportGroup Label="Shared">
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <PropertyGroup Label="UserMacros" />
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemGroup>
++    <ClCompile Include="converting.c" />
++    <ClCompile Include="main.c" />
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="converting.h" />
++  </ItemGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
++  <ImportGroup Label="ExtensionTargets">
++  </ImportGroup>
++</Project>
+\ No newline at end of file
+diff --git a/conversions/code/v1.vcxproj.filters b/conversions/code/v1.vcxproj.filters
+new file mode 100644
+index 0000000..7ba9ae0
+--- /dev/null
++++ b/conversions/code/v1.vcxproj.filters
+@@ -0,0 +1,30 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup>
++    <Filter Include="Source Files">
++      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
++      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
++    </Filter>
++    <Filter Include="Header Files">
++      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
++      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
++    </Filter>
++    <Filter Include="Resource Files">
++      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
++      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
++    </Filter>
++  </ItemGroup>
++  <ItemGroup>
++    <ClCompile Include="converting.c">
++      <Filter>Source Files</Filter>
++    </ClCompile>
++    <ClCompile Include="main.c">
++      <Filter>Source Files</Filter>
++    </ClCompile>
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="converting.h">
++      <Filter>Header Files</Filter>
++    </ClInclude>
++  </ItemGroup>
++</Project>
+\ No newline at end of file
+diff --git a/conversions/code/v1.vcxproj.user b/conversions/code/v1.vcxproj.user
+new file mode 100644
+index 0000000..88a5509
+--- /dev/null
++++ b/conversions/code/v1.vcxproj.user
+@@ -0,0 +1,4 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <PropertyGroup />
++</Project>
+\ No newline at end of file
+diff --git a/conversions/code/x64/Debug/converting.obj b/conversions/code/x64/Debug/converting.obj
+new file mode 100644
+index 0000000..3c059c8
+Binary files /dev/null and b/conversions/code/x64/Debug/converting.obj differ
+diff --git a/conversions/code/x64/Debug/main.obj b/conversions/code/x64/Debug/main.obj
+new file mode 100644
+index 0000000..752fab6
+Binary files /dev/null and b/conversions/code/x64/Debug/main.obj differ
+diff --git a/conversions/code/x64/Debug/v1.exe b/conversions/code/x64/Debug/v1.exe
+new file mode 100644
+index 0000000..657c946
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.exe differ
+diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/conversions/code/x64/Debug/v1.exe.recipe
+new file mode 100644
+index 0000000..69be474
+--- /dev/null
++++ b/conversions/code/x64/Debug/v1.exe.recipe
+@@ -0,0 +1,11 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project>
++  <ProjectOutputs>
++    <ProjectOutput>
++      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe</FullPath>
++    </ProjectOutput>
++  </ProjectOutputs>
++  <ContentFiles />
++  <SatelliteDlls />
++  <NonRecipeFileRefs />
++</Project>
+\ No newline at end of file
+diff --git a/conversions/code/x64/Debug/v1.ilk b/conversions/code/x64/Debug/v1.ilk
+new file mode 100644
+index 0000000..18b8f11
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.ilk differ
+diff --git a/conversions/code/x64/Debug/v1.log b/conversions/code/x64/Debug/v1.log
+new file mode 100644
+index 0000000..d6ecd4a
+--- /dev/null
++++ b/conversions/code/x64/Debug/v1.log
+@@ -0,0 +1,2 @@
++ï»¿  main.c
++  v1.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
+diff --git a/conversions/code/x64/Debug/v1.pdb b/conversions/code/x64/Debug/v1.pdb
+new file mode 100644
+index 0000000..e2f8b05
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.pdb differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+new file mode 100644
+index 0000000..0f0f942
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+new file mode 100644
+index 0000000..54a5e77
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+new file mode 100644
+index 0000000..c1bc96f
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+new file mode 100644
+index 0000000..8b2c0bc
+--- /dev/null
++++ b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+@@ -0,0 +1,2 @@
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\converting.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\converting.obj
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\main.obj
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+new file mode 100644
+index 0000000..a7a084f
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+new file mode 100644
+index 0000000..3761899
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+new file mode 100644
+index 0000000..fa10a23
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+new file mode 100644
+index 0000000..fe1494c
+--- /dev/null
++++ b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+@@ -0,0 +1,2 @@
++PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
++Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\|
+diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+new file mode 100644
+index 0000000..2da24f7
+--- /dev/null
++++ b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+@@ -0,0 +1 @@
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
+diff --git a/conversions/code/x64/Debug/vc143.idb b/conversions/code/x64/Debug/vc143.idb
+new file mode 100644
+index 0000000..1fcdfe4
+Binary files /dev/null and b/conversions/code/x64/Debug/vc143.idb differ
+diff --git a/conversions/code/x64/Debug/vc143.pdb b/conversions/code/x64/Debug/vc143.pdb
+new file mode 100644
+index 0000000..2e1256c
+Binary files /dev/null and b/conversions/code/x64/Debug/vc143.pdb differ
+diff --git a/conversions/conversions-test-cases.xlsx b/conversions/conversions-test-cases.xlsx
+new file mode 100644
+index 0000000..657486d
+Binary files /dev/null and b/conversions/conversions-test-cases.xlsx differ
+diff --git a/conversions/conversionsV1.zip b/conversions/conversionsV1.zip
+new file mode 100644
+index 0000000..ea57e7e
+Binary files /dev/null and b/conversions/conversionsV1.zip differ
+diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..dc61b8f
+--- /dev/null
++++ b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Conversion Module
++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/conversions/conversionsV1/conversions-test-cases.xlsx
+new file mode 100644
+index 0000000..a2cffb9
+Binary files /dev/null and b/conversions/conversionsV1/conversions-test-cases.xlsx differ
+diff --git a/conversions/conversionsV1/converting.c b/conversions/conversionsV1/converting.c
+new file mode 100644
+index 0000000..dc92171
+--- /dev/null
++++ b/conversions/conversionsV1/converting.c
+@@ -0,0 +1,34 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/conversions/conversionsV1/converting.h b/conversions/conversionsV1/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/conversions/conversionsV1/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/conversions/conversionsV1/main.c b/conversions/conversionsV1/main.c
+new file mode 100644
+index 0000000..6a8e436
+--- /dev/null
++++ b/conversions/conversionsV1/main.c
+@@ -0,0 +1,7 @@
++#include "converting.h"
++
++int main(void)
++{
++	converting();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/conversions/converting.c b/conversions/converting.c
+new file mode 100644
+index 0000000..88b340e
+--- /dev/null
++++ b/conversions/converting.c
+@@ -0,0 +1,16 @@
++#include "converting.h"
++
++void converting() {
++/* Version 1 */
++>> insert here
++
++
++/* Version 2 */
++>> insert here
++
++
++/* Version 3 */
++>> insert here
++
++
++}
+diff --git a/conversions/converting_header.png b/conversions/converting_header.png
+new file mode 100644
+index 0000000..4ffb3a8
+Binary files /dev/null and b/conversions/converting_header.png differ
+diff --git a/conversions/converting_v1.png b/conversions/converting_v1.png
+new file mode 100644
+index 0000000..50f5734
+Binary files /dev/null and b/conversions/converting_v1.png differ
+diff --git a/conversions/converting_v2.png b/conversions/converting_v2.png
+new file mode 100644
+index 0000000..edcdf1e
+Binary files /dev/null and b/conversions/converting_v2.png differ
+diff --git a/conversions/converting_v3.png b/conversions/converting_v3.png
+new file mode 100644
+index 0000000..146285f
+Binary files /dev/null and b/conversions/converting_v3.png differ
+diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/fundamentals/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..835d958
+--- /dev/null
++++ b/fundamentals/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Fundamentals Module V1
++The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
++Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
++Negative cases will be any negative index and indexes beyond the max length of the string.
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+new file mode 100644
+index 0000000..07098b6
+Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx differ
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx differ
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx differ
+diff --git a/fundamentals/code/.vs/project/v17/.suo b/fundamentals/code/.vs/project/v17/.suo
+new file mode 100644
+index 0000000..bcfd53a
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/.suo differ
+diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/fundamentals/code/.vs/project/v17/Browse.VC.db
+new file mode 100644
+index 0000000..bcda23d
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Browse.VC.db differ
+diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/fundamentals/code/.vs/project/v17/Solution.VC.db
+new file mode 100644
+index 0000000..4478989
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Solution.VC.db differ
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+new file mode 100644
+index 0000000..14c2062
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch differ
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+new file mode 100644
+index 0000000..eb24263
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch differ
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+new file mode 100644
+index 0000000..1d0afbc
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch differ
+diff --git a/fundamentals/code/fundamentals.c b/fundamentals/code/fundamentals.c
+new file mode 100644
+index 0000000..1215375
+--- /dev/null
++++ b/fundamentals/code/fundamentals.c
+@@ -0,0 +1,40 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	//>> insert here
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/fundamentals/code/fundamentals.h b/fundamentals/code/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/fundamentals/code/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/fundamentals/code/main.c b/fundamentals/code/main.c
+new file mode 100644
+index 0000000..1225e71
+--- /dev/null
++++ b/fundamentals/code/main.c
+@@ -0,0 +1,7 @@
++#include "fundamentals.h"
++
++int main(void)
++{
++	fundamentals();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/fundamentals/code/project.sln b/fundamentals/code/project.sln
+new file mode 100644
+index 0000000..0a8bb0d
+--- /dev/null
++++ b/fundamentals/code/project.sln
+@@ -0,0 +1,31 @@
++ï»¿
++Microsoft Visual Studio Solution File, Format Version 12.00
++# Visual Studio Version 17
++VisualStudioVersion = 17.8.34322.80
++MinimumVisualStudioVersion = 10.0.40219.1
++Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "project", "project.vcxproj", "{AF362EDA-E3C1-4C36-9746-825F3A16C279}"
++EndProject
++Global
++	GlobalSection(SolutionConfigurationPlatforms) = preSolution
++		Debug|x64 = Debug|x64
++		Debug|x86 = Debug|x86
++		Release|x64 = Release|x64
++		Release|x86 = Release|x86
++	EndGlobalSection
++	GlobalSection(ProjectConfigurationPlatforms) = postSolution
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.ActiveCfg = Debug|x64
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.Build.0 = Debug|x64
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.ActiveCfg = Debug|Win32
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.Build.0 = Debug|Win32
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.ActiveCfg = Release|x64
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.Build.0 = Release|x64
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.ActiveCfg = Release|Win32
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.Build.0 = Release|Win32
++	EndGlobalSection
++	GlobalSection(SolutionProperties) = preSolution
++		HideSolutionNode = FALSE
++	EndGlobalSection
++	GlobalSection(ExtensibilityGlobals) = postSolution
++		SolutionGuid = {189AD194-2992-420A-9AC7-B6C34003EBD9}
++	EndGlobalSection
++EndGlobal
+diff --git a/fundamentals/code/project.vcxproj b/fundamentals/code/project.vcxproj
+new file mode 100644
+index 0000000..b4a7699
+--- /dev/null
++++ b/fundamentals/code/project.vcxproj
+@@ -0,0 +1,139 @@
++<?xml version="1.0" encoding="utf-8"?>
++<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup Label="ProjectConfigurations">
++    <ProjectConfiguration Include="Debug|Win32">
++      <Configuration>Debug</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|Win32">
++      <Configuration>Release</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Debug|x64">
++      <Configuration>Debug</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|x64">
++      <Configuration>Release</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++  </ItemGroup>
++  <PropertyGroup Label="Globals">
++    <VCProjectVersion>17.0</VCProjectVersion>
++    <Keyword>Win32Proj</Keyword>
++    <ProjectGuid>{af362eda-e3c1-4c36-9746-825f3a16c279}</ProjectGuid>
++    <RootNamespace>project</RootNamespace>
++    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
++  <ImportGroup Label="ExtensionSettings">
++  </ImportGroup>
++  <ImportGroup Label="Shared">
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <PropertyGroup Label="UserMacros" />
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemGroup>
++    <ClCompile Include="fundamentals.c" />
++    <ClCompile Include="main.c" />
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="fundamentals.h" />
++  </ItemGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
++  <ImportGroup Label="ExtensionTargets">
++  </ImportGroup>
++</Project>
+\ No newline at end of file
+diff --git a/fundamentals/code/project.vcxproj.filters b/fundamentals/code/project.vcxproj.filters
+new file mode 100644
+index 0000000..262ef51
+--- /dev/null
++++ b/fundamentals/code/project.vcxproj.filters
+@@ -0,0 +1,30 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup>
++    <Filter Include="Source Files">
++      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
++      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
++    </Filter>
++    <Filter Include="Header Files">
++      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
++      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
++    </Filter>
++    <Filter Include="Resource Files">
++      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
++      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
++    </Filter>
++  </ItemGroup>
++  <ItemGroup>
++    <ClCompile Include="fundamentals.c">
++      <Filter>Source Files</Filter>
++    </ClCompile>
++    <ClCompile Include="main.c">
++      <Filter>Source Files</Filter>
++    </ClCompile>
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="fundamentals.h">
++      <Filter>Source Files</Filter>
++    </ClInclude>
++  </ItemGroup>
++</Project>
+\ No newline at end of file
+diff --git a/fundamentals/code/project.vcxproj.user b/fundamentals/code/project.vcxproj.user
+new file mode 100644
+index 0000000..88a5509
+--- /dev/null
++++ b/fundamentals/code/project.vcxproj.user
+@@ -0,0 +1,4 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <PropertyGroup />
++</Project>
+\ No newline at end of file
+diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/fundamentals/code/x64/Debug/fundamentals.obj
+new file mode 100644
+index 0000000..861a383
+Binary files /dev/null and b/fundamentals/code/x64/Debug/fundamentals.obj differ
+diff --git a/fundamentals/code/x64/Debug/main.obj b/fundamentals/code/x64/Debug/main.obj
+new file mode 100644
+index 0000000..412ddd8
+Binary files /dev/null and b/fundamentals/code/x64/Debug/main.obj differ
+diff --git a/fundamentals/code/x64/Debug/project.exe b/fundamentals/code/x64/Debug/project.exe
+new file mode 100644
+index 0000000..96f3f7c
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.exe differ
+diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/fundamentals/code/x64/Debug/project.exe.recipe
+new file mode 100644
+index 0000000..d15bad6
+--- /dev/null
++++ b/fundamentals/code/x64/Debug/project.exe.recipe
+@@ -0,0 +1,11 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project>
++  <ProjectOutputs>
++    <ProjectOutput>
++      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe</FullPath>
++    </ProjectOutput>
++  </ProjectOutputs>
++  <ContentFiles />
++  <SatelliteDlls />
++  <NonRecipeFileRefs />
++</Project>
+\ No newline at end of file
+diff --git a/fundamentals/code/x64/Debug/project.ilk b/fundamentals/code/x64/Debug/project.ilk
+new file mode 100644
+index 0000000..ca8297e
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.ilk differ
+diff --git a/fundamentals/code/x64/Debug/project.log b/fundamentals/code/x64/Debug/project.log
+new file mode 100644
+index 0000000..46cbcf7
+--- /dev/null
++++ b/fundamentals/code/x64/Debug/project.log
+@@ -0,0 +1,4 @@
++ï»¿  fundamentals.c
++  main.c
++  Generating Code...
++  project.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
+diff --git a/fundamentals/code/x64/Debug/project.pdb b/fundamentals/code/x64/Debug/project.pdb
+new file mode 100644
+index 0000000..f4c9944
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.pdb differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+new file mode 100644
+index 0000000..8ce9c43
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+new file mode 100644
+index 0000000..2466d33
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+new file mode 100644
+index 0000000..a78224f
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+new file mode 100644
+index 0000000..3b8784b
+--- /dev/null
++++ b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+@@ -0,0 +1,2 @@
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\fundamentals.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\fundamentals.obj
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\main.obj
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+new file mode 100644
+index 0000000..86df9f0
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+new file mode 100644
+index 0000000..7a2ed43
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+new file mode 100644
+index 0000000..a4ba5a7
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+new file mode 100644
+index 0000000..abb6863
+--- /dev/null
++++ b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+@@ -0,0 +1,2 @@
++PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
++Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\|
+diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+new file mode 100644
+index 0000000..3ccaa35
+--- /dev/null
++++ b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+@@ -0,0 +1,2 @@
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\fundamentals\v1\project\x64\Debug\project.exe
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
+diff --git a/fundamentals/code/x64/Debug/vc143.idb b/fundamentals/code/x64/Debug/vc143.idb
+new file mode 100644
+index 0000000..6700a8c
+Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.idb differ
+diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/fundamentals/code/x64/Debug/vc143.pdb
+new file mode 100644
+index 0000000..88847b7
+Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.pdb differ
+diff --git a/fundamentals/fundamentals-test-cases.xlsx b/fundamentals/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..d625c15
+Binary files /dev/null and b/fundamentals/fundamentals-test-cases.xlsx differ
+diff --git a/fundamentals/fundamentals.c b/fundamentals/fundamentals.c
+new file mode 100644
+index 0000000..172438a
+--- /dev/null
++++ b/fundamentals/fundamentals.c
+@@ -0,0 +1,16 @@
++#include "fundamentals.h"
++
++void fundamentals() {
++/* Version 1 */
++>> insert here
++
++
++/* Version 2 */
++>> insert here
++
++
++/* Version 3 */
++>> insert here
++
++
++}
+\ No newline at end of file
+diff --git a/fundamentals/fundamentals_header.png b/fundamentals/fundamentals_header.png
+new file mode 100644
+index 0000000..aae2842
+Binary files /dev/null and b/fundamentals/fundamentals_header.png differ
+diff --git a/fundamentals/fundamentals_v1.png b/fundamentals/fundamentals_v1.png
+new file mode 100644
+index 0000000..0f519ca
+Binary files /dev/null and b/fundamentals/fundamentals_v1.png differ
+diff --git a/fundamentals/fundamentals_v2.png b/fundamentals/fundamentals_v2.png
+new file mode 100644
+index 0000000..9bc0381
+Binary files /dev/null and b/fundamentals/fundamentals_v2.png differ
+diff --git a/fundamentals/fundamentals_v3.png b/fundamentals/fundamentals_v3.png
+new file mode 100644
+index 0000000..b390188
+Binary files /dev/null and b/fundamentals/fundamentals_v3.png differ
+diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/fundamentals/v1/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..acc0ce8
+--- /dev/null
++++ b/fundamentals/v1/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Fundamentals Module V1
++The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
++Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
++Negative cases will be any indexes beyond the max length of the string.
+diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/fundamentals/v1/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..35c1eda
+Binary files /dev/null and b/fundamentals/v1/fundamentals-test-cases.xlsx differ
+diff --git a/fundamentals/v1/fundamentals.c b/fundamentals/v1/fundamentals.c
+new file mode 100644
+index 0000000..1215375
+--- /dev/null
++++ b/fundamentals/v1/fundamentals.c
+@@ -0,0 +1,40 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	//>> insert here
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/fundamentals/v1/fundamentals.h b/fundamentals/v1/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/fundamentals/v1/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/fundamentals/v1/main.c b/fundamentals/v1/main.c
+new file mode 100644
+index 0000000..1225e71
+--- /dev/null
++++ b/fundamentals/v1/main.c
+@@ -0,0 +1,7 @@
++#include "fundamentals.h"
++
++int main(void)
++{
++	fundamentals();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/main/converting.c b/main/converting.c
+new file mode 100644
+index 0000000..dc92171
+--- /dev/null
++++ b/main/converting.c
+@@ -0,0 +1,34 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/main/converting.h b/main/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/main/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/main/fundamentals.c b/main/fundamentals.c
+new file mode 100644
+index 0000000..1215375
+--- /dev/null
++++ b/main/fundamentals.c
+@@ -0,0 +1,40 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	//>> insert here
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/main/fundamentals.h b/main/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/main/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/main/main.c b/main/main.c
+new file mode 100644
+index 0000000..5062fbb
+--- /dev/null
++++ b/main/main.c
+@@ -0,0 +1,12 @@
++#include "fundamentals.h"
++#include "manipulating.h"
++#include "tokenizing.h"
++#include "converting.h"
++
++int main(void)
++{
++	fundamentals();
++	manipulating();
++	tokenizing();
++	converting();
++}
+diff --git a/main/manipulating.c b/main/manipulating.c
+new file mode 100644
+index 0000000..3de4a55
+--- /dev/null
++++ b/main/manipulating.c
+@@ -0,0 +1,28 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// V1
++
++void manipulating(void) {
++	printf("*** Start if Concatenating Strings Demo ***\n");
++	char string1[BUFFER_SIZE];
++	char string2[BUFFER_SIZE];
++	do {
++		//Prompt for first string
++		printf("Type the 1st string (q - to quit):\n");
++		fgets(string1, BUFFER_SIZE, stdin);
++		string1[strlen(string1) - 1] = '\0';
++		//if q was entered quit program
++		if ((strcmp(string1, "q") != 0)) {
++			printf("Type the 2nd string:\n");
++			//promt for 2nd string
++			fgets(string2, BUFFER_SIZE, stdin);
++			string2[strlen(string2) - 1] = '\0';
++			//concatenate string
++			strcat(string1, string2);
++			printf("Concatenated string is \'%s\'\n", string1);
++		}
++	} while (strcmp(string1, "q") != 0);
++	printf("*** End of Concatenating Strings Demo ***\n\n");
++}
+\ No newline at end of file
+diff --git a/main/manipulating.h b/main/manipulating.h
+new file mode 100644
+index 0000000..434f748
+--- /dev/null
++++ b/main/manipulating.h
+@@ -0,0 +1,6 @@
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++#include <stdio.h>
++#include <string.h>
++void manipulating(void);
++#endif
+\ No newline at end of file
+diff --git a/main/tokenizing.c b/main/tokenizing.c
+new file mode 100644
+index 0000000..97680d4
+--- /dev/null
++++ b/main/tokenizing.c
+@@ -0,0 +1,42 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "tokenizing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while(nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++}
++
++
++
++
++
++/* Version 2 */
++
++
++
++/* Version 3 */
++
++
++
++
+diff --git a/main/tokenizing.h b/main/tokenizing.h
+new file mode 100644
+index 0000000..d377740
+--- /dev/null
++++ b/main/tokenizing.h
+@@ -0,0 +1,10 @@
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++#endif 
++
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
+new file mode 100644
+index 0000000..ce82fd8
+Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
+new file mode 100644
+index 0000000..95cfcc7
+Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
+new file mode 100644
+index 0000000..b2ba1dc
+Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
+new file mode 100644
+index 0000000..6a221a6
+--- /dev/null
++++ b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx	
+@@ -0,0 +1,9 @@
++Manipulation Module
++
++This module concatenates 2 strings sized to a defined macro.
++
++Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
++
++An input of `q' was tested to ensure it would result in ending the program.
++
++A string that is greater than the initialized memory was tested to ensure it would not crash the program.
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
+new file mode 100644
+index 0000000..1bcc78d
+--- /dev/null
++++ b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c	
+@@ -0,0 +1,5 @@
++int main(void) {
++
++	manipulating();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/Manipulation V1/Manipulation V1/manipulating.c
+new file mode 100644
+index 0000000..3de4a55
+--- /dev/null
++++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.c	
+@@ -0,0 +1,28 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// V1
++
++void manipulating(void) {
++	printf("*** Start if Concatenating Strings Demo ***\n");
++	char string1[BUFFER_SIZE];
++	char string2[BUFFER_SIZE];
++	do {
++		//Prompt for first string
++		printf("Type the 1st string (q - to quit):\n");
++		fgets(string1, BUFFER_SIZE, stdin);
++		string1[strlen(string1) - 1] = '\0';
++		//if q was entered quit program
++		if ((strcmp(string1, "q") != 0)) {
++			printf("Type the 2nd string:\n");
++			//promt for 2nd string
++			fgets(string2, BUFFER_SIZE, stdin);
++			string2[strlen(string2) - 1] = '\0';
++			//concatenate string
++			strcat(string1, string2);
++			printf("Concatenated string is \'%s\'\n", string1);
++		}
++	} while (strcmp(string1, "q") != 0);
++	printf("*** End of Concatenating Strings Demo ***\n\n");
++}
+\ No newline at end of file
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/Manipulation V1/Manipulation V1/manipulating.h
+new file mode 100644
+index 0000000..434f748
+--- /dev/null
++++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.h	
+@@ -0,0 +1,6 @@
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++#include <stdio.h>
++#include <string.h>
++void manipulating(void);
++#endif
+\ No newline at end of file
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
+new file mode 100644
+index 0000000..de4db70
+Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx differ
+diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/tokenizing/PM-Notes-DarianGrijalba.docx
+new file mode 100644
+index 0000000..79615b7
+--- /dev/null
++++ b/tokenizing/PM-Notes-DarianGrijalba.docx
+@@ -0,0 +1,35 @@
++                                 Tokenizing v1
++Test Cases
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space  (q - to quit):
++Inputs: "The"
++Outputs: Word #1 is The
++Type a few words separated by space  (q - to quit):
++Inputs: "q"
++*** End of Tokenizing Words Demo ***
++
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space  (q - to quit):
++Inputs: "Have A Good Day"
++Outputs: Word #1 is Have
++	   Word #2 is A
++	   Word #3 is Good
++	   Word #4 is Day
++Type a few words separated by space  (q - to quit):
++Inputs: "q"
++*** End of Tokenizing Words Demo ***
++
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space  (q - to quit):
++Inputs: "HaveA                                Gooooooooooooood                               Day"
++Outputs: Word #1 is HaveA
++	   Word #2 is Goooooooooooooood
++	   Word #3 is Day
++Type a few words separated by space  (q - to quit):
++Inputs: "q"
++*** End of Tokenizing Words Demo ***
++
++Basically will calculate the amount of words the user inputted and list them out one by one 
++
++
++
+diff --git a/tokenizing/tokenizing.c b/tokenizing/tokenizing.c
+new file mode 100644
+index 0000000..cd11fd7
+--- /dev/null
++++ b/tokenizing/tokenizing.c
+@@ -0,0 +1,42 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "Tokenzing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while(nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++}
++
++
++
++
++
++/* Version 2 */
++
++
++
++/* Version 3 */
++
++
++
++
+diff --git a/tokenizing/tokenizing.h b/tokenizing/tokenizing.h
+new file mode 100644
+index 0000000..c136582
+--- /dev/null
++++ b/tokenizing/tokenizing.h
+@@ -0,0 +1,16 @@
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++int main() {
++    // Call your tokenizing function or include it in your main function
++    tokenizing();
++
++    return 0;
++}
++#endif 
++
+
+commit 306f1ee35754c5c7e56bc11fb2c61f66956b2f9f
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Wed Dec 6 21:02:16 2023 -0500
+
+    Initial commit
+
+diff --git a/README.md b/README.md
+new file mode 100644
+index 0000000..ec7a918
+--- /dev/null
++++ b/README.md
+@@ -0,0 +1,2 @@
++# CPR101group3
++Final project for a computer principles for programmers course

commit b40220fceed3014cb0e5078870c2638b9f68d9f4
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Sun Dec 10 21:10:36 2023 -0500

    Add comments to conversions.c

diff --git a/V3/conversions/converting.c b/V3/conversions/converting.c
index 1e8dbcb..5389ecc 100644
--- a/V3/conversions/converting.c
+++ b/V3/conversions/converting.c
@@ -23,6 +23,7 @@ void converting() {
 	while (strcmp(intString, "q") != 0);
 	printf("*** End of Converting Strings to int Demo ***\n\n");
 
+// Converts user's input into a double value
 /* Version 2 */
 	printf("*** Start of Converting Strings to double Demo ***\n");
 	char doubleString[BUFFER_SIZE];
@@ -40,6 +41,7 @@ void converting() {
 	} while (strcmp(doubleString, "q") != 0);
 	printf("*** End of Converting Strings to double Demo ***\n\n");
 
+// Converts user's input into a long value
 /* Version 3 */
 	printf("*** Start of Converting Strings to long Demo ***\n");
 	char longString[BUFFER_SIZE];

commit 1a305aea1bd6c2989d35858cb5429759f1a77deb
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Sun Dec 10 21:08:35 2023 -0500

    Add conversions module to V3

diff --git a/V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/7d43fdad-b143-4ff4-8ea2-3eaae6810440.vsidx
similarity index 85%
rename from V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
rename to V1/conversions/code/.vs/v1/FileContentIndex/7d43fdad-b143-4ff4-8ea2-3eaae6810440.vsidx
index 2b75f1d..4f4a1a9 100644
Binary files a/V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx and b/V1/conversions/code/.vs/v1/FileContentIndex/7d43fdad-b143-4ff4-8ea2-3eaae6810440.vsidx differ
diff --git a/V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/8d856348-68c9-4962-9074-de8c6ea7e840.vsidx
similarity index 100%
rename from V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
rename to V1/conversions/code/.vs/v1/FileContentIndex/8d856348-68c9-4962-9074-de8c6ea7e840.vsidx
diff --git a/V1/conversions/code/.vs/v1/v17/.suo b/V1/conversions/code/.vs/v1/v17/.suo
index 218f706..767238f 100644
Binary files a/V1/conversions/code/.vs/v1/v17/.suo and b/V1/conversions/code/.vs/v1/v17/.suo differ
diff --git a/V1/conversions/code/.vs/v1/v17/Browse.VC.db b/V1/conversions/code/.vs/v1/v17/Browse.VC.db
index 086de7c..71094dd 100644
Binary files a/V1/conversions/code/.vs/v1/v17/Browse.VC.db and b/V1/conversions/code/.vs/v1/v17/Browse.VC.db differ
diff --git a/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/57999e78823ee053/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/57999e78823ee053/CONVERTING.ipch
new file mode 100644
index 0000000..a9b54bb
Binary files /dev/null and b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/57999e78823ee053/CONVERTING.ipch differ
diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
new file mode 100644
index 0000000..b26bd94
Binary files /dev/null and b/V2/Final-Project-Plan.xlsx differ
diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
new file mode 100644
index 0000000..d7fe3d1
Binary files /dev/null and b/V2/Final-Project-Test-Cases.xlsx differ
diff --git a/V2/conversions/PM-Notes-AxtonSmith.docx b/V2/conversions/PM-Notes-AxtonSmith.docx
new file mode 100644
index 0000000..e204a90
--- /dev/null
+++ b/V2/conversions/PM-Notes-AxtonSmith.docx
@@ -0,0 +1,5 @@
+Conversion Module
+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+Version 2 of this module will convert the input into double values.
diff --git a/V2/conversions/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
new file mode 100644
index 0000000..179e6ea
Binary files /dev/null and b/V2/conversions/conversions-test-cases.xlsx differ
diff --git a/V2/conversions/converting.c b/V2/conversions/converting.c
new file mode 100644
index 0000000..9f0d0ac
--- /dev/null
+++ b/V2/conversions/converting.c
@@ -0,0 +1,47 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+
+#include "converting.h"
+
+// User inputs a number as a string, then it is returned as an int
+void converting() {
+/* Version 1 */
+	printf("*** Start of Converting Strings to int Demo ***\n");
+	char intString[BUFFER_SIZE];
+	int intNumber;
+	do
+	{
+		printf("Type an int numeric string (q - to quit):\n");
+		fgets(intString, BUFFER_SIZE, stdin);
+		intString[strlen(intString) - 1] = '\0';
+		if (strcmp(intString, "q") != 0)
+		{
+			intNumber = atoi(intString);
+			printf("Converted number is %d\n", intNumber);
+		}
+	}
+	while (strcmp(intString, "q") != 0);
+	printf("*** End of Converting Strings to int Demo ***\n\n");
+
+/* Version 2 */
+	printf("*** Start of Converting Strings to double Demo ***\n");
+	char doubleString[BUFFER_SIZE];
+	double doubleNumber;
+	do
+	{
+		printf("Type the double numeric string (q - to quit):\n");
+		fgets(doubleString, BUFFER_SIZE, stdin);
+		doubleString[strlen(doubleString) - 1] = '\0';
+		if ((strcmp(doubleString, "q") != 0))
+		{
+			doubleNumber = atof(doubleString);
+			printf("Converted number is %f\n", doubleNumber);
+		}
+	} while (strcmp(doubleString, "q") != 0);
+	printf("*** End of Converting Strings to double Demo ***\n\n");
+
+/* Version 3 */
+//>> insert here
+
+
+}
diff --git a/V2/conversions/converting.h b/V2/conversions/converting.h
new file mode 100644
index 0000000..94e86ab
--- /dev/null
+++ b/V2/conversions/converting.h
@@ -0,0 +1,11 @@
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+// User inputs a number as a string, then it is returned as an int
+void converting(void);
+
+#endif
\ No newline at end of file
diff --git a/V2/conversions/main.c b/V2/conversions/main.c
new file mode 100644
index 0000000..6a8e436
--- /dev/null
+++ b/V2/conversions/main.c
@@ -0,0 +1,7 @@
+#include "converting.h"
+
+int main(void)
+{
+	converting();
+	return 0;
+}
\ No newline at end of file
diff --git a/V2/fundamentals/Fundamentals Module V2.docx b/V2/fundamentals/Fundamentals Module V2.docx
new file mode 100644
index 0000000..f98ecba
--- /dev/null
+++ b/V2/fundamentals/Fundamentals Module V2.docx	
@@ -0,0 +1,3 @@
+Fundamentals Module V2
+This module tells you the length of an input string.
+Testing: To test the module, I will use varying lengths of string with and without spaces, as well as an empty string.
diff --git a/V2/fundamentals/fundamentals-test-cases.xlsx b/V2/fundamentals/fundamentals-test-cases.xlsx
new file mode 100644
index 0000000..5ee1fc1
Binary files /dev/null and b/V2/fundamentals/fundamentals-test-cases.xlsx differ
diff --git a/V2/fundamentals/fundamentals.c b/V2/fundamentals/fundamentals.c
new file mode 100644
index 0000000..4596c8d
--- /dev/null
+++ b/V2/fundamentals/fundamentals.c
@@ -0,0 +1,49 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#define NUM_INPUT_SIZE 10
+
+#include "fundamentals.h"
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals() {
+/* Version 1 */
+	printf("*** Start of Indexing Strings Demo ***\n");
+	char buffer1[BUFFER_SIZE];
+	char numInput[NUM_INPUT_SIZE];
+	size_t position;
+	do
+	{
+		printf("Type not empty string (q - to quit):\n");
+		fgets(buffer1, BUFFER_SIZE, stdin);
+		buffer1[strlen(buffer1) - 1] = '\0';
+		if (strcmp(buffer1, "q") != 0)
+		{
+			printf("Type the character position within the string:\n");
+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+			numInput[strlen(numInput) - 1] = '\0';
+			position = atoi(numInput);
+			if (position >= strlen(buffer1))
+			{
+				position = strlen(buffer1) - 1;
+				printf("Too big... Position reduced to max. available\n");
+			}
+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+		}
+	} while (strcmp(buffer1, "q") != 0);
+	printf("*** End of Indexing Strings Demo ***\n\n");
+
+	/* Version 2 */
+	printf("*** Start of Measuring Strings Demo ***\n");
+	char buffer2[BUFFER_SIZE];
+	do {
+		printf("Type a string (q - to quit):\n");
+		fgets(buffer2, BUFFER_SIZE, stdin);
+		buffer2[strlen(buffer2) - 1] = '\0';
+		if (strcmp(buffer2, "q") != 0)
+			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+	} while (strcmp(buffer2, "q") != 0);
+	printf("*** End of Measuring Strings Demo ***\n\n");
+
+	/* Version 3 */
+	//>> insert here
+}
\ No newline at end of file
diff --git a/V2/fundamentals/fundamentals.h b/V2/fundamentals/fundamentals.h
new file mode 100644
index 0000000..14a6f4f
--- /dev/null
+++ b/V2/fundamentals/fundamentals.h
@@ -0,0 +1,11 @@
+#ifndef _FUNDAMENTALS_H_
+#define _FUNDAMENTALS_H_
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals(void);
+
+#endif
\ No newline at end of file
diff --git a/V2/fundamentals/main.c b/V2/fundamentals/main.c
new file mode 100644
index 0000000..1225e71
--- /dev/null
+++ b/V2/fundamentals/main.c
@@ -0,0 +1,7 @@
+#include "fundamentals.h"
+
+int main(void)
+{
+	fundamentals();
+	return 0;
+}
\ No newline at end of file
diff --git a/V2/main/converting.c b/V2/main/converting.c
new file mode 100644
index 0000000..9f0d0ac
--- /dev/null
+++ b/V2/main/converting.c
@@ -0,0 +1,47 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+
+#include "converting.h"
+
+// User inputs a number as a string, then it is returned as an int
+void converting() {
+/* Version 1 */
+	printf("*** Start of Converting Strings to int Demo ***\n");
+	char intString[BUFFER_SIZE];
+	int intNumber;
+	do
+	{
+		printf("Type an int numeric string (q - to quit):\n");
+		fgets(intString, BUFFER_SIZE, stdin);
+		intString[strlen(intString) - 1] = '\0';
+		if (strcmp(intString, "q") != 0)
+		{
+			intNumber = atoi(intString);
+			printf("Converted number is %d\n", intNumber);
+		}
+	}
+	while (strcmp(intString, "q") != 0);
+	printf("*** End of Converting Strings to int Demo ***\n\n");
+
+/* Version 2 */
+	printf("*** Start of Converting Strings to double Demo ***\n");
+	char doubleString[BUFFER_SIZE];
+	double doubleNumber;
+	do
+	{
+		printf("Type the double numeric string (q - to quit):\n");
+		fgets(doubleString, BUFFER_SIZE, stdin);
+		doubleString[strlen(doubleString) - 1] = '\0';
+		if ((strcmp(doubleString, "q") != 0))
+		{
+			doubleNumber = atof(doubleString);
+			printf("Converted number is %f\n", doubleNumber);
+		}
+	} while (strcmp(doubleString, "q") != 0);
+	printf("*** End of Converting Strings to double Demo ***\n\n");
+
+/* Version 3 */
+//>> insert here
+
+
+}
diff --git a/V2/main/converting.h b/V2/main/converting.h
new file mode 100644
index 0000000..94e86ab
--- /dev/null
+++ b/V2/main/converting.h
@@ -0,0 +1,11 @@
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+// User inputs a number as a string, then it is returned as an int
+void converting(void);
+
+#endif
\ No newline at end of file
diff --git a/V2/main/fundamentals.c b/V2/main/fundamentals.c
new file mode 100644
index 0000000..4596c8d
--- /dev/null
+++ b/V2/main/fundamentals.c
@@ -0,0 +1,49 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#define NUM_INPUT_SIZE 10
+
+#include "fundamentals.h"
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals() {
+/* Version 1 */
+	printf("*** Start of Indexing Strings Demo ***\n");
+	char buffer1[BUFFER_SIZE];
+	char numInput[NUM_INPUT_SIZE];
+	size_t position;
+	do
+	{
+		printf("Type not empty string (q - to quit):\n");
+		fgets(buffer1, BUFFER_SIZE, stdin);
+		buffer1[strlen(buffer1) - 1] = '\0';
+		if (strcmp(buffer1, "q") != 0)
+		{
+			printf("Type the character position within the string:\n");
+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+			numInput[strlen(numInput) - 1] = '\0';
+			position = atoi(numInput);
+			if (position >= strlen(buffer1))
+			{
+				position = strlen(buffer1) - 1;
+				printf("Too big... Position reduced to max. available\n");
+			}
+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+		}
+	} while (strcmp(buffer1, "q") != 0);
+	printf("*** End of Indexing Strings Demo ***\n\n");
+
+	/* Version 2 */
+	printf("*** Start of Measuring Strings Demo ***\n");
+	char buffer2[BUFFER_SIZE];
+	do {
+		printf("Type a string (q - to quit):\n");
+		fgets(buffer2, BUFFER_SIZE, stdin);
+		buffer2[strlen(buffer2) - 1] = '\0';
+		if (strcmp(buffer2, "q") != 0)
+			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+	} while (strcmp(buffer2, "q") != 0);
+	printf("*** End of Measuring Strings Demo ***\n\n");
+
+	/* Version 3 */
+	//>> insert here
+}
\ No newline at end of file
diff --git a/V2/main/fundamentals.h b/V2/main/fundamentals.h
new file mode 100644
index 0000000..14a6f4f
--- /dev/null
+++ b/V2/main/fundamentals.h
@@ -0,0 +1,11 @@
+#ifndef _FUNDAMENTALS_H_
+#define _FUNDAMENTALS_H_
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals(void);
+
+#endif
\ No newline at end of file
diff --git a/V2/main/main.c b/V2/main/main.c
new file mode 100644
index 0000000..5062fbb
--- /dev/null
+++ b/V2/main/main.c
@@ -0,0 +1,12 @@
+#include "fundamentals.h"
+#include "manipulating.h"
+#include "tokenizing.h"
+#include "converting.h"
+
+int main(void)
+{
+	fundamentals();
+	manipulating();
+	tokenizing();
+	converting();
+}
diff --git a/V2/main/manipulating.c b/V2/main/manipulating.c
new file mode 100644
index 0000000..7ba26cd
--- /dev/null
+++ b/V2/main/manipulating.c
@@ -0,0 +1,61 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "manipulating.h"
+
+// V1
+
+void manipulating(void) {
+	printf("*** Start of Concatenating Strings Demo ***\n");
+	char string1[BUFFER_SIZE];
+	char string2[BUFFER_SIZE];
+	do {
+		//Prompt for first string
+		printf("Type the 1st string (q - to quit):\n");
+		fgets(string1, BUFFER_SIZE, stdin);
+		string1[strlen(string1) - 1] = '\0';
+		//if q was entered quit program
+		if ((strcmp(string1, "q") != 0)) {
+			printf("Type the 2nd string:\n");
+			//promt for 2nd string
+			fgets(string2, BUFFER_SIZE, stdin);
+			string2[strlen(string2) - 1] = '\0';
+			//concatenate string
+			strcat(string1, string2);
+			printf("Concatenated string is \'%s\'\n", string1);
+		}
+	} while (strcmp(string1, "q") != 0);
+	printf("*** End of Concatenating Strings Demo ***\n\n");
+
+	//V2
+	printf("***Start of Comparing Strings Demon***\n");
+	char compare1[BUFFER_SIZE];
+	char compare2[BUFFER_SIZE];
+	int result;
+	do {
+		//Receive user input for the 1st string
+		printf("Type the 1st string to compare (q - to quit):\n");
+		fgets(compare1, BUFFER_SIZE, stdin);
+		//Add an ending NULL to the 1st string
+		compare1[strlen(compare1) - 1] = '\0';
+		//Check that the user did not input 'q' to quit
+		if (strcmp(compare1, "q") != 0) {
+			//Receive user input for the 2nd string
+			printf("Type the 2nd string to compare:\n");
+			fgets(compare2, BUFFER_SIZE, stdin);
+			//Add an ending NULL to the 2nd string
+			compare2[strlen(compare2) - 1] = '\0';
+			result = strcmp(compare1, compare2);
+			//Check if the 1st string < than the 2nd string
+			if (result < 0)
+				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
+			//Check if the strings are equal
+			else if (result == 0)
+				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
+			//Check if the first string is greater than the 2nd string
+			else
+				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
+
+		}
+	} while (strcmp(compare1, "q") != 0);
+	printf("*** End of Comparing Strings Demon ***\n\n");
+}
\ No newline at end of file
diff --git a/V2/main/manipulating.h b/V2/main/manipulating.h
new file mode 100644
index 0000000..434f748
--- /dev/null
+++ b/V2/main/manipulating.h
@@ -0,0 +1,6 @@
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+#include <stdio.h>
+#include <string.h>
+void manipulating(void);
+#endif
\ No newline at end of file
diff --git a/V2/main/tokenizing.c b/V2/main/tokenizing.c
new file mode 100644
index 0000000..aa1e13a
--- /dev/null
+++ b/V2/main/tokenizing.c
@@ -0,0 +1,62 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 300
+#include "Tokenzing.h"
+
+/* Version 1 */
+void tokenizing(void)
+{
+	/*printf("*** Start of Tokenizing Words Demo ***\n");
+	char words[BUFFER_SIZE];
+	char* nextWord = NULL;
+	int wordsCounter;
+	do {
+		printf("Type a few words seperated by space  (q - to quit):\n");
+		fgets(words, BUFFER_SIZE, stdin);
+		words[strlen(words) - 1] = '\0';
+		if (strcmp(words, "q") != 0) {
+			nextWord = strtok(words, " ");
+			wordsCounter = 1;
+			while (nextWord) {
+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+				nextWord = strtok(NULL, " ");
+
+			}
+		}
+	} while (strcmp(words, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+
+
+
+
+
+
+
+	/* Version 2 */
+	printf("*** Start of Tokenizing Words Demo ***\n");
+	char phrases[BUFFER_SIZE];
+	char* nextphrase = NULL;
+	int phrasesCounter;
+	do
+	{
+		printf("Type a few phrases seperated by space  (q - to quit):\n");
+		fgets(phrases, BUFFER_SIZE, stdin);
+		phrases[strlen(phrases) - 1] = '\0';
+		if (strcmp(phrases, "q") != 0)
+		{
+			nextphrase = strtok(phrases, " ");
+			phrasesCounter = 1;
+			while (nextphrase)
+			{
+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+				nextphrase = strtok(NULL, " ");
+			}
+		}
+	} while (strcmp(phrases, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");
+
+	return 0;
+}
+
+
+
+	
diff --git a/V2/main/tokenizing.h b/V2/main/tokenizing.h
new file mode 100644
index 0000000..d96fde1
--- /dev/null
+++ b/V2/main/tokenizing.h
@@ -0,0 +1,15 @@
+#ifndef _TOKENIZING_H
+#define _TOKENIZING_H
+
+#include <stdio.h>
+#include <string.h>
+
+void tokenizing(void);
+
+int main() {
+    // Call your tokenizing function or include it in your main function
+    tokenizing();
+
+    return 0;
+}
+#endif 
\ No newline at end of file
diff --git a/V2/manipulations/PM-Notes-Brandon-Doray.docx b/V2/manipulations/PM-Notes-Brandon-Doray.docx
new file mode 100644
index 0000000..4d4609e
--- /dev/null
+++ b/V2/manipulations/PM-Notes-Brandon-Doray.docx
@@ -0,0 +1,25 @@
+Manipulation Module
+
+//V1
+
+This module concatenates 2 strings sized to a defined macro.
+
+Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
+
+An input of `q' was tested to ensure it would result in ending the program.
+
+A string that is greater than the initialized memory was tested to ensure it would not crash the program.
+
+//V2
+
+V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
+
+This function will only compare strings up until it hits a NULL or a char that does not match.
+
+If it hits a char that does not match, anything after that will not be considered in the comparison.
+
+The chars are evaluated using their ASCII value.
+
+The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
+
+
diff --git a/V2/manipulations/manipulatemain.c b/V2/manipulations/manipulatemain.c
new file mode 100644
index 0000000..1bcc78d
--- /dev/null
+++ b/V2/manipulations/manipulatemain.c
@@ -0,0 +1,5 @@
+int main(void) {
+
+	manipulating();
+	return 0;
+}
\ No newline at end of file
diff --git a/V2/manipulations/manipulating.c b/V2/manipulations/manipulating.c
new file mode 100644
index 0000000..7ba26cd
--- /dev/null
+++ b/V2/manipulations/manipulating.c
@@ -0,0 +1,61 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "manipulating.h"
+
+// V1
+
+void manipulating(void) {
+	printf("*** Start of Concatenating Strings Demo ***\n");
+	char string1[BUFFER_SIZE];
+	char string2[BUFFER_SIZE];
+	do {
+		//Prompt for first string
+		printf("Type the 1st string (q - to quit):\n");
+		fgets(string1, BUFFER_SIZE, stdin);
+		string1[strlen(string1) - 1] = '\0';
+		//if q was entered quit program
+		if ((strcmp(string1, "q") != 0)) {
+			printf("Type the 2nd string:\n");
+			//promt for 2nd string
+			fgets(string2, BUFFER_SIZE, stdin);
+			string2[strlen(string2) - 1] = '\0';
+			//concatenate string
+			strcat(string1, string2);
+			printf("Concatenated string is \'%s\'\n", string1);
+		}
+	} while (strcmp(string1, "q") != 0);
+	printf("*** End of Concatenating Strings Demo ***\n\n");
+
+	//V2
+	printf("***Start of Comparing Strings Demon***\n");
+	char compare1[BUFFER_SIZE];
+	char compare2[BUFFER_SIZE];
+	int result;
+	do {
+		//Receive user input for the 1st string
+		printf("Type the 1st string to compare (q - to quit):\n");
+		fgets(compare1, BUFFER_SIZE, stdin);
+		//Add an ending NULL to the 1st string
+		compare1[strlen(compare1) - 1] = '\0';
+		//Check that the user did not input 'q' to quit
+		if (strcmp(compare1, "q") != 0) {
+			//Receive user input for the 2nd string
+			printf("Type the 2nd string to compare:\n");
+			fgets(compare2, BUFFER_SIZE, stdin);
+			//Add an ending NULL to the 2nd string
+			compare2[strlen(compare2) - 1] = '\0';
+			result = strcmp(compare1, compare2);
+			//Check if the 1st string < than the 2nd string
+			if (result < 0)
+				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
+			//Check if the strings are equal
+			else if (result == 0)
+				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
+			//Check if the first string is greater than the 2nd string
+			else
+				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
+
+		}
+	} while (strcmp(compare1, "q") != 0);
+	printf("*** End of Comparing Strings Demon ***\n\n");
+}
\ No newline at end of file
diff --git a/V2/manipulations/manipulating.h b/V2/manipulations/manipulating.h
new file mode 100644
index 0000000..434f748
--- /dev/null
+++ b/V2/manipulations/manipulating.h
@@ -0,0 +1,6 @@
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+#include <stdio.h>
+#include <string.h>
+void manipulating(void);
+#endif
\ No newline at end of file
diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
new file mode 100644
index 0000000..b5427b8
Binary files /dev/null and b/V2/manipulations/manipulation-test-cases.xlsx differ
diff --git a/V2/tokenizing/Tokenizing v2 PM-notes.docx b/V2/tokenizing/Tokenizing v2 PM-notes.docx
new file mode 100644
index 0000000..819aa1e
--- /dev/null
+++ b/V2/tokenizing/Tokenizing v2 PM-notes.docx	
@@ -0,0 +1,3 @@
+                            Tokenizing v2 PM-notes
+Basically this was the same process as v1 and even the code of the Tokenizing v2 was  basically exactly the same as v1 just changed to every phrase in the sentence instead of every word that's it 
+                                       
diff --git a/V2/tokenizing/Tokenzing_v2_test-cases.xlsx b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx
new file mode 100644
index 0000000..6781d92
Binary files /dev/null and b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx differ
diff --git a/V2/tokenizing/tokenizing.c b/V2/tokenizing/tokenizing.c
new file mode 100644
index 0000000..aa1e13a
--- /dev/null
+++ b/V2/tokenizing/tokenizing.c
@@ -0,0 +1,62 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 300
+#include "Tokenzing.h"
+
+/* Version 1 */
+void tokenizing(void)
+{
+	/*printf("*** Start of Tokenizing Words Demo ***\n");
+	char words[BUFFER_SIZE];
+	char* nextWord = NULL;
+	int wordsCounter;
+	do {
+		printf("Type a few words seperated by space  (q - to quit):\n");
+		fgets(words, BUFFER_SIZE, stdin);
+		words[strlen(words) - 1] = '\0';
+		if (strcmp(words, "q") != 0) {
+			nextWord = strtok(words, " ");
+			wordsCounter = 1;
+			while (nextWord) {
+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+				nextWord = strtok(NULL, " ");
+
+			}
+		}
+	} while (strcmp(words, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+
+
+
+
+
+
+
+	/* Version 2 */
+	printf("*** Start of Tokenizing Words Demo ***\n");
+	char phrases[BUFFER_SIZE];
+	char* nextphrase = NULL;
+	int phrasesCounter;
+	do
+	{
+		printf("Type a few phrases seperated by space  (q - to quit):\n");
+		fgets(phrases, BUFFER_SIZE, stdin);
+		phrases[strlen(phrases) - 1] = '\0';
+		if (strcmp(phrases, "q") != 0)
+		{
+			nextphrase = strtok(phrases, " ");
+			phrasesCounter = 1;
+			while (nextphrase)
+			{
+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+				nextphrase = strtok(NULL, " ");
+			}
+		}
+	} while (strcmp(phrases, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");
+
+	return 0;
+}
+
+
+
+	
diff --git a/V2/tokenizing/tokenizing.h b/V2/tokenizing/tokenizing.h
new file mode 100644
index 0000000..d96fde1
--- /dev/null
+++ b/V2/tokenizing/tokenizing.h
@@ -0,0 +1,15 @@
+#ifndef _TOKENIZING_H
+#define _TOKENIZING_H
+
+#include <stdio.h>
+#include <string.h>
+
+void tokenizing(void);
+
+int main() {
+    // Call your tokenizing function or include it in your main function
+    tokenizing();
+
+    return 0;
+}
+#endif 
\ No newline at end of file
diff --git a/V3/conversions/PM-Notes-AxtonSmith.docx b/V3/conversions/PM-Notes-AxtonSmith.docx
new file mode 100644
index 0000000..65873f4
--- /dev/null
+++ b/V3/conversions/PM-Notes-AxtonSmith.docx
@@ -0,0 +1,6 @@
+Conversion Module
+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+Version 2 of this module will convert the input into double values.
+Version 3 of this module will convert input into long values.
diff --git a/V3/conversions/Screenshot 2023-12-10 210448.png b/V3/conversions/Screenshot 2023-12-10 210448.png
new file mode 100644
index 0000000..f569727
Binary files /dev/null and b/V3/conversions/Screenshot 2023-12-10 210448.png differ
diff --git a/V3/conversions/conversions-test-cases.xlsx b/V3/conversions/conversions-test-cases.xlsx
new file mode 100644
index 0000000..a9582f7
Binary files /dev/null and b/V3/conversions/conversions-test-cases.xlsx differ
diff --git a/V3/conversions/converting.c b/V3/conversions/converting.c
new file mode 100644
index 0000000..1e8dbcb
--- /dev/null
+++ b/V3/conversions/converting.c
@@ -0,0 +1,60 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+
+#include "converting.h"
+
+// User inputs a number as a string, then it is returned as an int
+void converting() {
+/* Version 1 */
+	printf("*** Start of Converting Strings to int Demo ***\n");
+	char intString[BUFFER_SIZE];
+	int intNumber;
+	do
+	{
+		printf("Type an int numeric string (q - to quit):\n");
+		fgets(intString, BUFFER_SIZE, stdin);
+		intString[strlen(intString) - 1] = '\0';
+		if (strcmp(intString, "q") != 0)
+		{
+			intNumber = atoi(intString);
+			printf("Converted number is %d\n", intNumber);
+		}
+	}
+	while (strcmp(intString, "q") != 0);
+	printf("*** End of Converting Strings to int Demo ***\n\n");
+
+/* Version 2 */
+	printf("*** Start of Converting Strings to double Demo ***\n");
+	char doubleString[BUFFER_SIZE];
+	double doubleNumber;
+	do
+	{
+		printf("Type the double numeric string (q - to quit):\n");
+		fgets(doubleString, BUFFER_SIZE, stdin);
+		doubleString[strlen(doubleString) - 1] = '\0';
+		if ((strcmp(doubleString, "q") != 0))
+		{
+			doubleNumber = atof(doubleString);
+			printf("Converted number is %f\n", doubleNumber);
+		}
+	} while (strcmp(doubleString, "q") != 0);
+	printf("*** End of Converting Strings to double Demo ***\n\n");
+
+/* Version 3 */
+	printf("*** Start of Converting Strings to long Demo ***\n");
+	char longString[BUFFER_SIZE];
+	long longNumber;
+	do
+	{
+		printf("Type the long numeric string (q - to quit):\n");
+		fgets(longString, BUFFER_SIZE, stdin);
+		longString[strlen(longString) - 1] = '\0';
+		if ((strcmp(longString, "q") != 0))
+		{
+			longNumber = atol(longString);
+			printf("Converted number is %ld\n", longNumber);
+		}
+	} while (strcmp(longString, "q") != 0);
+	printf("*** End of Converting Strings to long Demo ***\n\n");
+
+}
diff --git a/V3/conversions/converting.h b/V3/conversions/converting.h
new file mode 100644
index 0000000..94e86ab
--- /dev/null
+++ b/V3/conversions/converting.h
@@ -0,0 +1,11 @@
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+// User inputs a number as a string, then it is returned as an int
+void converting(void);
+
+#endif
\ No newline at end of file
diff --git a/V3/conversions/main.c b/V3/conversions/main.c
new file mode 100644
index 0000000..6a8e436
--- /dev/null
+++ b/V3/conversions/main.c
@@ -0,0 +1,7 @@
+#include "converting.h"
+
+int main(void)
+{
+	converting();
+	return 0;
+}
\ No newline at end of file

commit 43b6172f001dc95e8ed5986d1069805484722023
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Sat Dec 9 12:12:41 2023 -0500

    Add V3/main and copied excel sheets from V2

diff --git a/V2/conversions/PM-Notes-AxtonSmith.docx b/V2/conversions/PM-Notes-AxtonSmith.docx
deleted file mode 100644
index eb38a98..0000000
--- a/V2/conversions/PM-Notes-AxtonSmith.docx
+++ /dev/null
@@ -1,5 +0,0 @@
-Conversion Module
-This module takes string inputs that are numeric and converts it to an integer of the number in the string.
-Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
-We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
-Version 2 of this module will convert the input into double values.
diff --git a/V2/conversions/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
deleted file mode 100644
index f447878..0000000
Binary files a/V2/conversions/conversions-test-cases.xlsx and /dev/null differ
diff --git a/V2/conversions/main.c b/V2/conversions/main.c
deleted file mode 100644
index 6a8e436..0000000
--- a/V2/conversions/main.c
+++ /dev/null
@@ -1,7 +0,0 @@
-#include "converting.h"
-
-int main(void)
-{
-	converting();
-	return 0;
-}
\ No newline at end of file
diff --git a/V2/fundamentals/Fundamentals Module V2.docx b/V2/fundamentals/Fundamentals Module V2.docx
deleted file mode 100644
index f98ecba..0000000
--- a/V2/fundamentals/Fundamentals Module V2.docx	
+++ /dev/null
@@ -1,3 +0,0 @@
-Fundamentals Module V2
-This module tells you the length of an input string.
-Testing: To test the module, I will use varying lengths of string with and without spaces, as well as an empty string.
diff --git a/V2/fundamentals/fundamentals-test-cases.xlsx b/V2/fundamentals/fundamentals-test-cases.xlsx
deleted file mode 100644
index 5ee1fc1..0000000
Binary files a/V2/fundamentals/fundamentals-test-cases.xlsx and /dev/null differ
diff --git a/V2/fundamentals/main.c b/V2/fundamentals/main.c
deleted file mode 100644
index 1225e71..0000000
--- a/V2/fundamentals/main.c
+++ /dev/null
@@ -1,7 +0,0 @@
-#include "fundamentals.h"
-
-int main(void)
-{
-	fundamentals();
-	return 0;
-}
\ No newline at end of file
diff --git a/V2/main-git-log.txt b/V2/main-git-log.txt
deleted file mode 100644
index 9001aae..0000000
--- a/V2/main-git-log.txt
+++ /dev/null
@@ -1,3600 +0,0 @@
-commit 01f89458ddc774511e45d502a67641a170760617
-Author: Axton Smith <axtonsmith@gmail.com>
-Date:   Sat Dec 9 00:03:26 2023 -0500
-
-    Add fundamentals module and add to main
-
-diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
-index 814fb41..b26bd94 100644
-Binary files a/V2/Final-Project-Plan.xlsx and b/V2/Final-Project-Plan.xlsx differ
-diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
-index 40e66b0..d7fe3d1 100644
-Binary files a/V2/Final-Project-Test-Cases.xlsx and b/V2/Final-Project-Test-Cases.xlsx differ
-diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
-deleted file mode 100644
-index 92459be..0000000
-Binary files a/V2/Tokenizing.zip and /dev/null differ
-diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
-deleted file mode 100644
-index 92459be..0000000
-Binary files a/V2/Tokenzing/Tokenizing.zip and /dev/null differ
-diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
-deleted file mode 100644
-index e69de29..0000000
-diff --git a/V2/fundamentals/Fundamentals Module V2.docx b/V2/fundamentals/Fundamentals Module V2.docx
-new file mode 100644
-index 0000000..f98ecba
---- /dev/null
-+++ b/V2/fundamentals/Fundamentals Module V2.docx	
-@@ -0,0 +1,3 @@
-+Fundamentals Module V2
-+This module tells you the length of an input string.
-+Testing: To test the module, I will use varying lengths of string with and without spaces, as well as an empty string.
-diff --git a/V2/fundamentals/fundamentals-test-cases.xlsx b/V2/fundamentals/fundamentals-test-cases.xlsx
-new file mode 100644
-index 0000000..5ee1fc1
-Binary files /dev/null and b/V2/fundamentals/fundamentals-test-cases.xlsx differ
-diff --git a/V2/fundamentals/fundamentals.c b/V2/fundamentals/fundamentals.c
-new file mode 100644
-index 0000000..4596c8d
---- /dev/null
-+++ b/V2/fundamentals/fundamentals.c
-@@ -0,0 +1,49 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#define NUM_INPUT_SIZE 10
-+
-+#include "fundamentals.h"
-+
-+// Takes a string input from user, then an index number and returns the character at that index of the string
-+void fundamentals() {
-+/* Version 1 */
-+	printf("*** Start of Indexing Strings Demo ***\n");
-+	char buffer1[BUFFER_SIZE];
-+	char numInput[NUM_INPUT_SIZE];
-+	size_t position;
-+	do
-+	{
-+		printf("Type not empty string (q - to quit):\n");
-+		fgets(buffer1, BUFFER_SIZE, stdin);
-+		buffer1[strlen(buffer1) - 1] = '\0';
-+		if (strcmp(buffer1, "q") != 0)
-+		{
-+			printf("Type the character position within the string:\n");
-+			fgets(numInput, NUM_INPUT_SIZE, stdin);
-+			numInput[strlen(numInput) - 1] = '\0';
-+			position = atoi(numInput);
-+			if (position >= strlen(buffer1))
-+			{
-+				position = strlen(buffer1) - 1;
-+				printf("Too big... Position reduced to max. available\n");
-+			}
-+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
-+		}
-+	} while (strcmp(buffer1, "q") != 0);
-+	printf("*** End of Indexing Strings Demo ***\n\n");
-+
-+	/* Version 2 */
-+	printf("*** Start of Measuring Strings Demo ***\n");
-+	char buffer2[BUFFER_SIZE];
-+	do {
-+		printf("Type a string (q - to quit):\n");
-+		fgets(buffer2, BUFFER_SIZE, stdin);
-+		buffer2[strlen(buffer2) - 1] = '\0';
-+		if (strcmp(buffer2, "q") != 0)
-+			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
-+	} while (strcmp(buffer2, "q") != 0);
-+	printf("*** End of Measuring Strings Demo ***\n\n");
-+
-+	/* Version 3 */
-+	//>> insert here
-+}
-\ No newline at end of file
-diff --git a/V2/fundamentals/fundamentals.h b/V2/fundamentals/fundamentals.h
-new file mode 100644
-index 0000000..14a6f4f
---- /dev/null
-+++ b/V2/fundamentals/fundamentals.h
-@@ -0,0 +1,11 @@
-+#ifndef _FUNDAMENTALS_H_
-+#define _FUNDAMENTALS_H_
-+
-+#include <stdio.h>
-+#include <stdlib.h>
-+#include <string.h>
-+
-+// Takes a string input from user, then an index number and returns the character at that index of the string
-+void fundamentals(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/V2/fundamentals/main.c b/V2/fundamentals/main.c
-new file mode 100644
-index 0000000..1225e71
---- /dev/null
-+++ b/V2/fundamentals/main.c
-@@ -0,0 +1,7 @@
-+#include "fundamentals.h"
-+
-+int main(void)
-+{
-+	fundamentals();
-+	return 0;
-+}
-\ No newline at end of file
-diff --git a/V2/main/fundamentals.c b/V2/main/fundamentals.c
-new file mode 100644
-index 0000000..4596c8d
---- /dev/null
-+++ b/V2/main/fundamentals.c
-@@ -0,0 +1,49 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#define NUM_INPUT_SIZE 10
-+
-+#include "fundamentals.h"
-+
-+// Takes a string input from user, then an index number and returns the character at that index of the string
-+void fundamentals() {
-+/* Version 1 */
-+	printf("*** Start of Indexing Strings Demo ***\n");
-+	char buffer1[BUFFER_SIZE];
-+	char numInput[NUM_INPUT_SIZE];
-+	size_t position;
-+	do
-+	{
-+		printf("Type not empty string (q - to quit):\n");
-+		fgets(buffer1, BUFFER_SIZE, stdin);
-+		buffer1[strlen(buffer1) - 1] = '\0';
-+		if (strcmp(buffer1, "q") != 0)
-+		{
-+			printf("Type the character position within the string:\n");
-+			fgets(numInput, NUM_INPUT_SIZE, stdin);
-+			numInput[strlen(numInput) - 1] = '\0';
-+			position = atoi(numInput);
-+			if (position >= strlen(buffer1))
-+			{
-+				position = strlen(buffer1) - 1;
-+				printf("Too big... Position reduced to max. available\n");
-+			}
-+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
-+		}
-+	} while (strcmp(buffer1, "q") != 0);
-+	printf("*** End of Indexing Strings Demo ***\n\n");
-+
-+	/* Version 2 */
-+	printf("*** Start of Measuring Strings Demo ***\n");
-+	char buffer2[BUFFER_SIZE];
-+	do {
-+		printf("Type a string (q - to quit):\n");
-+		fgets(buffer2, BUFFER_SIZE, stdin);
-+		buffer2[strlen(buffer2) - 1] = '\0';
-+		if (strcmp(buffer2, "q") != 0)
-+			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
-+	} while (strcmp(buffer2, "q") != 0);
-+	printf("*** End of Measuring Strings Demo ***\n\n");
-+
-+	/* Version 3 */
-+	//>> insert here
-+}
-\ No newline at end of file
-diff --git a/V2/main/fundamentals.h b/V2/main/fundamentals.h
-new file mode 100644
-index 0000000..14a6f4f
---- /dev/null
-+++ b/V2/main/fundamentals.h
-@@ -0,0 +1,11 @@
-+#ifndef _FUNDAMENTALS_H_
-+#define _FUNDAMENTALS_H_
-+
-+#include <stdio.h>
-+#include <stdlib.h>
-+#include <string.h>
-+
-+// Takes a string input from user, then an index number and returns the character at that index of the string
-+void fundamentals(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/V2/Tokenzing/Tokenzing.c b/V2/main/tokenizing.c
-similarity index 95%
-rename from V2/Tokenzing/Tokenzing.c
-rename to V2/main/tokenizing.c
-index 734c7c6..aa1e13a 100644
---- a/V2/Tokenzing/Tokenzing.c
-+++ b/V2/main/tokenizing.c
-@@ -1,62 +1,62 @@
--#define _CRT_SECURE_NO_WARNINGS
--#define BUFFER_SIZE 300
--#include "Tokenzing.h"
--
--/* Version 1 */
--void tokenizing(void)
--{
--	/*printf("*** Start of Tokenizing Words Demo ***\n");
--	char words[BUFFER_SIZE];
--	char* nextWord = NULL;
--	int wordsCounter;
--	do {
--		printf("Type a few words seperated by space  (q - to quit):\n");
--		fgets(words, BUFFER_SIZE, stdin);
--		words[strlen(words) - 1] = '\0';
--		if (strcmp(words, "q") != 0) {
--			nextWord = strtok(words, " ");
--			wordsCounter = 1;
--			while (nextWord) {
--				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
--				nextWord = strtok(NULL, " ");
--
--			}
--		}
--	} while (strcmp(words, "q") != 0);
--	printf("*** End of Tokenizing Words Demo ***\n\n");*/
--
--
--
--
--
--
--
--	/* Version 2 */
--	printf("*** Start of Tokenizing Words Demo ***\n");
--	char phrases[BUFFER_SIZE];
--	char* nextphrase = NULL;
--	int phrasesCounter;
--	do
--	{
--		printf("Type a few phrases seperated by space  (q - to quit):\n");
--		fgets(phrases, BUFFER_SIZE, stdin);
--		phrases[strlen(phrases) - 1] = '\0';
--		if (strcmp(phrases, "q") != 0)
--		{
--			nextphrase = strtok(phrases, " ");
--			phrasesCounter = 1;
--			while (nextphrase)
--			{
--				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
--				nextphrase = strtok(NULL, " ");
--			}
--		}
--	} while (strcmp(phrases, "q") != 0);
--	printf("*** End of Tokenizing Words Demo ***\n\n");
--
--	return 0;
--}
--
--
--
--	
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 300
-+#include "Tokenzing.h"
-+
-+/* Version 1 */
-+void tokenizing(void)
-+{
-+	/*printf("*** Start of Tokenizing Words Demo ***\n");
-+	char words[BUFFER_SIZE];
-+	char* nextWord = NULL;
-+	int wordsCounter;
-+	do {
-+		printf("Type a few words seperated by space  (q - to quit):\n");
-+		fgets(words, BUFFER_SIZE, stdin);
-+		words[strlen(words) - 1] = '\0';
-+		if (strcmp(words, "q") != 0) {
-+			nextWord = strtok(words, " ");
-+			wordsCounter = 1;
-+			while (nextWord) {
-+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
-+				nextWord = strtok(NULL, " ");
-+
-+			}
-+		}
-+	} while (strcmp(words, "q") != 0);
-+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
-+
-+
-+
-+
-+
-+
-+
-+	/* Version 2 */
-+	printf("*** Start of Tokenizing Words Demo ***\n");
-+	char phrases[BUFFER_SIZE];
-+	char* nextphrase = NULL;
-+	int phrasesCounter;
-+	do
-+	{
-+		printf("Type a few phrases seperated by space  (q - to quit):\n");
-+		fgets(phrases, BUFFER_SIZE, stdin);
-+		phrases[strlen(phrases) - 1] = '\0';
-+		if (strcmp(phrases, "q") != 0)
-+		{
-+			nextphrase = strtok(phrases, " ");
-+			phrasesCounter = 1;
-+			while (nextphrase)
-+			{
-+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
-+				nextphrase = strtok(NULL, " ");
-+			}
-+		}
-+	} while (strcmp(phrases, "q") != 0);
-+	printf("*** End of Tokenizing Words Demo ***\n\n");
-+
-+	return 0;
-+}
-+
-+
-+
-+	
-diff --git a/V2/Tokenzing/Tokenzing.h b/V2/main/tokenizing.h
-similarity index 91%
-rename from V2/Tokenzing/Tokenzing.h
-rename to V2/main/tokenizing.h
-index c8bfdb8..d96fde1 100644
---- a/V2/Tokenzing/Tokenzing.h
-+++ b/V2/main/tokenizing.h
-@@ -1,15 +1,15 @@
--#ifndef _TOKENIZING_H
--#define _TOKENIZING_H
--
--#include <stdio.h>
--#include <string.h>
--
--void tokenizing(void);
--
--int main() {
--    // Call your tokenizing function or include it in your main function
--    tokenizing();
--
--    return 0;
--}
-+#ifndef _TOKENIZING_H
-+#define _TOKENIZING_H
-+
-+#include <stdio.h>
-+#include <string.h>
-+
-+void tokenizing(void);
-+
-+int main() {
-+    // Call your tokenizing function or include it in your main function
-+    tokenizing();
-+
-+    return 0;
-+}
- #endif 
-\ No newline at end of file
-diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/tokenizing/Tokenizing v2 PM-notes.docx
-similarity index 100%
-rename from V2/Tokenzing/Tokenizing v2 PM-notes.docx
-rename to V2/tokenizing/Tokenizing v2 PM-notes.docx
-diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx
-similarity index 100%
-rename from V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
-rename to V2/tokenizing/Tokenzing_v2_test-cases.xlsx
-diff --git a/V2/tokenizing/tokenizing.c b/V2/tokenizing/tokenizing.c
-new file mode 100644
-index 0000000..aa1e13a
---- /dev/null
-+++ b/V2/tokenizing/tokenizing.c
-@@ -0,0 +1,62 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 300
-+#include "Tokenzing.h"
-+
-+/* Version 1 */
-+void tokenizing(void)
-+{
-+	/*printf("*** Start of Tokenizing Words Demo ***\n");
-+	char words[BUFFER_SIZE];
-+	char* nextWord = NULL;
-+	int wordsCounter;
-+	do {
-+		printf("Type a few words seperated by space  (q - to quit):\n");
-+		fgets(words, BUFFER_SIZE, stdin);
-+		words[strlen(words) - 1] = '\0';
-+		if (strcmp(words, "q") != 0) {
-+			nextWord = strtok(words, " ");
-+			wordsCounter = 1;
-+			while (nextWord) {
-+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
-+				nextWord = strtok(NULL, " ");
-+
-+			}
-+		}
-+	} while (strcmp(words, "q") != 0);
-+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
-+
-+
-+
-+
-+
-+
-+
-+	/* Version 2 */
-+	printf("*** Start of Tokenizing Words Demo ***\n");
-+	char phrases[BUFFER_SIZE];
-+	char* nextphrase = NULL;
-+	int phrasesCounter;
-+	do
-+	{
-+		printf("Type a few phrases seperated by space  (q - to quit):\n");
-+		fgets(phrases, BUFFER_SIZE, stdin);
-+		phrases[strlen(phrases) - 1] = '\0';
-+		if (strcmp(phrases, "q") != 0)
-+		{
-+			nextphrase = strtok(phrases, " ");
-+			phrasesCounter = 1;
-+			while (nextphrase)
-+			{
-+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
-+				nextphrase = strtok(NULL, " ");
-+			}
-+		}
-+	} while (strcmp(phrases, "q") != 0);
-+	printf("*** End of Tokenizing Words Demo ***\n\n");
-+
-+	return 0;
-+}
-+
-+
-+
-+	
-diff --git a/V2/tokenizing/tokenizing.h b/V2/tokenizing/tokenizing.h
-new file mode 100644
-index 0000000..d96fde1
---- /dev/null
-+++ b/V2/tokenizing/tokenizing.h
-@@ -0,0 +1,15 @@
-+#ifndef _TOKENIZING_H
-+#define _TOKENIZING_H
-+
-+#include <stdio.h>
-+#include <string.h>
-+
-+void tokenizing(void);
-+
-+int main() {
-+    // Call your tokenizing function or include it in your main function
-+    tokenizing();
-+
-+    return 0;
-+}
-+#endif 
-\ No newline at end of file
-
-commit b3a93cc2072faf105ab22552011b51ace61475d4
-Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
-Date:   Fri Dec 8 23:48:26 2023 -0500
-
-    Add files via upload
-
-diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/Tokenzing/Tokenizing v2 PM-notes.docx
-new file mode 100644
-index 0000000..a9a5ded
---- /dev/null
-+++ b/V2/Tokenzing/Tokenizing v2 PM-notes.docx	
-@@ -0,0 +1,3 @@
-+                            Tokenizing v2 PM-notes
-+Basically this was the same process as v1 and even the code of the Tokenizing v2 was  basically exactly the same as v1 just changed to every phrase in the sentence instead of every word that's it 
-+                                       
-diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
-new file mode 100644
-index 0000000..92459be
-Binary files /dev/null and b/V2/Tokenzing/Tokenizing.zip differ
-diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
-new file mode 100644
-index 0000000..e69de29
-diff --git a/V2/Tokenzing/Tokenzing.c b/V2/Tokenzing/Tokenzing.c
-new file mode 100644
-index 0000000..734c7c6
---- /dev/null
-+++ b/V2/Tokenzing/Tokenzing.c
-@@ -0,0 +1,62 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 300
-+#include "Tokenzing.h"
-+
-+/* Version 1 */
-+void tokenizing(void)
-+{
-+	/*printf("*** Start of Tokenizing Words Demo ***\n");
-+	char words[BUFFER_SIZE];
-+	char* nextWord = NULL;
-+	int wordsCounter;
-+	do {
-+		printf("Type a few words seperated by space  (q - to quit):\n");
-+		fgets(words, BUFFER_SIZE, stdin);
-+		words[strlen(words) - 1] = '\0';
-+		if (strcmp(words, "q") != 0) {
-+			nextWord = strtok(words, " ");
-+			wordsCounter = 1;
-+			while (nextWord) {
-+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
-+				nextWord = strtok(NULL, " ");
-+
-+			}
-+		}
-+	} while (strcmp(words, "q") != 0);
-+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
-+
-+
-+
-+
-+
-+
-+
-+	/* Version 2 */
-+	printf("*** Start of Tokenizing Words Demo ***\n");
-+	char phrases[BUFFER_SIZE];
-+	char* nextphrase = NULL;
-+	int phrasesCounter;
-+	do
-+	{
-+		printf("Type a few phrases seperated by space  (q - to quit):\n");
-+		fgets(phrases, BUFFER_SIZE, stdin);
-+		phrases[strlen(phrases) - 1] = '\0';
-+		if (strcmp(phrases, "q") != 0)
-+		{
-+			nextphrase = strtok(phrases, " ");
-+			phrasesCounter = 1;
-+			while (nextphrase)
-+			{
-+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
-+				nextphrase = strtok(NULL, " ");
-+			}
-+		}
-+	} while (strcmp(phrases, "q") != 0);
-+	printf("*** End of Tokenizing Words Demo ***\n\n");
-+
-+	return 0;
-+}
-+
-+
-+
-+	
-diff --git a/V2/Tokenzing/Tokenzing.h b/V2/Tokenzing/Tokenzing.h
-new file mode 100644
-index 0000000..c8bfdb8
---- /dev/null
-+++ b/V2/Tokenzing/Tokenzing.h
-@@ -0,0 +1,15 @@
-+#ifndef _TOKENIZING_H
-+#define _TOKENIZING_H
-+
-+#include <stdio.h>
-+#include <string.h>
-+
-+void tokenizing(void);
-+
-+int main() {
-+    // Call your tokenizing function or include it in your main function
-+    tokenizing();
-+
-+    return 0;
-+}
-+#endif 
-\ No newline at end of file
-diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
-new file mode 100644
-index 0000000..cb18ef6
-Binary files /dev/null and b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx differ
-
-commit a59e9df43a0eb5e8a9a56bf396fa2e938c3698ad
-Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
-Date:   Fri Dec 8 23:47:17 2023 -0500
-
-    Add files via upload
-
-diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
-new file mode 100644
-index 0000000..92459be
-Binary files /dev/null and b/V2/Tokenizing.zip differ
-
-commit 91039924c420b1f4e2573bfb2371b23dc5645a4e
-Author: Axton Smith <axtonsmith@gmail.com>
-Date:   Fri Dec 8 22:22:30 2023 -0500
-
-    Add manipulations and conversions test cases to Final-Project-Test-Cases.xlsx
-
-diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
-new file mode 100644
-index 0000000..814fb41
-Binary files /dev/null and b/V2/Final-Project-Plan.xlsx differ
-diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
-new file mode 100644
-index 0000000..40e66b0
-Binary files /dev/null and b/V2/Final-Project-Test-Cases.xlsx differ
-diff --git a/V2/conversions/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
-index 43a8d2a..f447878 100644
-Binary files a/V2/conversions/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
-diff --git a/V2/main/converting.c b/V2/main/converting.c
-new file mode 100644
-index 0000000..9f0d0ac
---- /dev/null
-+++ b/V2/main/converting.c
-@@ -0,0 +1,47 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+
-+#include "converting.h"
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting() {
-+/* Version 1 */
-+	printf("*** Start of Converting Strings to int Demo ***\n");
-+	char intString[BUFFER_SIZE];
-+	int intNumber;
-+	do
-+	{
-+		printf("Type an int numeric string (q - to quit):\n");
-+		fgets(intString, BUFFER_SIZE, stdin);
-+		intString[strlen(intString) - 1] = '\0';
-+		if (strcmp(intString, "q") != 0)
-+		{
-+			intNumber = atoi(intString);
-+			printf("Converted number is %d\n", intNumber);
-+		}
-+	}
-+	while (strcmp(intString, "q") != 0);
-+	printf("*** End of Converting Strings to int Demo ***\n\n");
-+
-+/* Version 2 */
-+	printf("*** Start of Converting Strings to double Demo ***\n");
-+	char doubleString[BUFFER_SIZE];
-+	double doubleNumber;
-+	do
-+	{
-+		printf("Type the double numeric string (q - to quit):\n");
-+		fgets(doubleString, BUFFER_SIZE, stdin);
-+		doubleString[strlen(doubleString) - 1] = '\0';
-+		if ((strcmp(doubleString, "q") != 0))
-+		{
-+			doubleNumber = atof(doubleString);
-+			printf("Converted number is %f\n", doubleNumber);
-+		}
-+	} while (strcmp(doubleString, "q") != 0);
-+	printf("*** End of Converting Strings to double Demo ***\n\n");
-+
-+/* Version 3 */
-+//>> insert here
-+
-+
-+}
-diff --git a/V2/main/converting.h b/V2/main/converting.h
-new file mode 100644
-index 0000000..94e86ab
---- /dev/null
-+++ b/V2/main/converting.h
-@@ -0,0 +1,11 @@
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+#include <stdio.h>
-+#include <string.h>
-+#include <stdlib.h>
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/V2/main/manipulating.c b/V2/main/manipulating.c
-new file mode 100644
-index 0000000..7ba26cd
---- /dev/null
-+++ b/V2/main/manipulating.c
-@@ -0,0 +1,61 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#include "manipulating.h"
-+
-+// V1
-+
-+void manipulating(void) {
-+	printf("*** Start of Concatenating Strings Demo ***\n");
-+	char string1[BUFFER_SIZE];
-+	char string2[BUFFER_SIZE];
-+	do {
-+		//Prompt for first string
-+		printf("Type the 1st string (q - to quit):\n");
-+		fgets(string1, BUFFER_SIZE, stdin);
-+		string1[strlen(string1) - 1] = '\0';
-+		//if q was entered quit program
-+		if ((strcmp(string1, "q") != 0)) {
-+			printf("Type the 2nd string:\n");
-+			//promt for 2nd string
-+			fgets(string2, BUFFER_SIZE, stdin);
-+			string2[strlen(string2) - 1] = '\0';
-+			//concatenate string
-+			strcat(string1, string2);
-+			printf("Concatenated string is \'%s\'\n", string1);
-+		}
-+	} while (strcmp(string1, "q") != 0);
-+	printf("*** End of Concatenating Strings Demo ***\n\n");
-+
-+	//V2
-+	printf("***Start of Comparing Strings Demon***\n");
-+	char compare1[BUFFER_SIZE];
-+	char compare2[BUFFER_SIZE];
-+	int result;
-+	do {
-+		//Receive user input for the 1st string
-+		printf("Type the 1st string to compare (q - to quit):\n");
-+		fgets(compare1, BUFFER_SIZE, stdin);
-+		//Add an ending NULL to the 1st string
-+		compare1[strlen(compare1) - 1] = '\0';
-+		//Check that the user did not input 'q' to quit
-+		if (strcmp(compare1, "q") != 0) {
-+			//Receive user input for the 2nd string
-+			printf("Type the 2nd string to compare:\n");
-+			fgets(compare2, BUFFER_SIZE, stdin);
-+			//Add an ending NULL to the 2nd string
-+			compare2[strlen(compare2) - 1] = '\0';
-+			result = strcmp(compare1, compare2);
-+			//Check if the 1st string < than the 2nd string
-+			if (result < 0)
-+				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
-+			//Check if the strings are equal
-+			else if (result == 0)
-+				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
-+			//Check if the first string is greater than the 2nd string
-+			else
-+				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
-+
-+		}
-+	} while (strcmp(compare1, "q") != 0);
-+	printf("*** End of Comparing Strings Demon ***\n\n");
-+}
-\ No newline at end of file
-diff --git a/V2/main/manipulating.h b/V2/main/manipulating.h
-new file mode 100644
-index 0000000..434f748
---- /dev/null
-+++ b/V2/main/manipulating.h
-@@ -0,0 +1,6 @@
-+#ifndef _MANIPULATING_H_
-+#define _MANIPULATING_H_
-+#include <stdio.h>
-+#include <string.h>
-+void manipulating(void);
-+#endif
-\ No newline at end of file
-diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
-index 323e377..dc49fc2 100644
-Binary files a/V2/manipulations/manipulation-test-cases.xlsx and b/V2/manipulations/manipulation-test-cases.xlsx differ
-
-commit a43fbc4a9b1fb232cd9c5c46d4bbff26133c5afb
-Author: Axton Smith <axtonsmith@gmail.com>
-Date:   Fri Dec 8 22:05:42 2023 -0500
-
-    Add conversions module to V2
-
-diff --git a/V1/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
-deleted file mode 100644
-index ea57e7e..0000000
-Binary files a/V1/conversions/conversionsV1.zip and /dev/null differ
-diff --git a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
-deleted file mode 100644
-index dc61b8f..0000000
---- a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
-+++ /dev/null
-@@ -1,4 +0,0 @@
--Conversion Module
--This module takes string inputs that are numeric and converts it to an integer of the number in the string.
--Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
--We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
-diff --git a/V1/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
-deleted file mode 100644
-index a2cffb9..0000000
-Binary files a/V1/conversions/conversionsV1/conversions-test-cases.xlsx and /dev/null differ
-diff --git a/V1/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
-deleted file mode 100644
-index dc92171..0000000
---- a/V1/conversions/conversionsV1/converting.c
-+++ /dev/null
-@@ -1,34 +0,0 @@
--#define _CRT_SECURE_NO_WARNINGS
--#define BUFFER_SIZE 80
--
--#include "converting.h"
--
--// User inputs a number as a string, then it is returned as an int
--void converting() {
--/* Version 1 */
--	printf("*** Start of Converting Strings to int Demo ***\n");
--	char intString[BUFFER_SIZE];
--	int intNumber;
--	do
--	{
--		printf("Type an int numeric string (q - to quit):\n");
--		fgets(intString, BUFFER_SIZE, stdin);
--		intString[strlen(intString) - 1] = '\0';
--		if (strcmp(intString, "q") != 0)
--		{
--			intNumber = atoi(intString);
--			printf("Converted number is %d\n", intNumber);
--		}
--	}
--	while (strcmp(intString, "q") != 0);
--	printf("*** End of Converting Strings to int Demo ***\n\n");
--
--/* Version 2 */
--//>> insert here
--
--
--/* Version 3 */
--//>> insert here
--
--
--}
-diff --git a/V1/conversions/converting.c b/V1/conversions/templates/converting.c
-similarity index 100%
-rename from V1/conversions/converting.c
-rename to V1/conversions/templates/converting.c
-diff --git a/V1/conversions/converting_header.png b/V1/conversions/templates/converting_header.png
-similarity index 100%
-rename from V1/conversions/converting_header.png
-rename to V1/conversions/templates/converting_header.png
-diff --git a/V1/conversions/converting_v1.png b/V1/conversions/templates/converting_v1.png
-similarity index 100%
-rename from V1/conversions/converting_v1.png
-rename to V1/conversions/templates/converting_v1.png
-diff --git a/V1/conversions/converting_v2.png b/V1/conversions/templates/converting_v2.png
-similarity index 100%
-rename from V1/conversions/converting_v2.png
-rename to V1/conversions/templates/converting_v2.png
-diff --git a/V1/conversions/converting_v3.png b/V1/conversions/templates/converting_v3.png
-similarity index 100%
-rename from V1/conversions/converting_v3.png
-rename to V1/conversions/templates/converting_v3.png
-diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/PM-Notes-AxtonSmith.docx
-similarity index 60%
-rename from V2/conversions/V1/PM-Notes-AxtonSmith.docx
-rename to V2/conversions/PM-Notes-AxtonSmith.docx
-index dc61b8f..eb38a98 100644
---- a/V2/conversions/V1/PM-Notes-AxtonSmith.docx
-+++ b/V2/conversions/PM-Notes-AxtonSmith.docx
-@@ -2,3 +2,4 @@ Conversion Module
- This module takes string inputs that are numeric and converts it to an integer of the number in the string.
- Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
- We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
-+Version 2 of this module will convert the input into double values.
-diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
-deleted file mode 100644
-index 94e86ab..0000000
---- a/V2/conversions/V1/converting.h
-+++ /dev/null
-@@ -1,11 +0,0 @@
--#ifndef _CONVERTING_H_
--#define _CONVERTING_H_
--
--#include <stdio.h>
--#include <string.h>
--#include <stdlib.h>
--
--// User inputs a number as a string, then it is returned as an int
--void converting(void);
--
--#endif
-\ No newline at end of file
-diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
-deleted file mode 100644
-index 6a8e436..0000000
---- a/V2/conversions/V1/main.c
-+++ /dev/null
-@@ -1,7 +0,0 @@
--#include "converting.h"
--
--int main(void)
--{
--	converting();
--	return 0;
--}
-\ No newline at end of file
-diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
-deleted file mode 100644
-index dc61b8f..0000000
---- a/V2/conversions/V2/PM-Notes-AxtonSmith.docx
-+++ /dev/null
-@@ -1,4 +0,0 @@
--Conversion Module
--This module takes string inputs that are numeric and converts it to an integer of the number in the string.
--Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
--We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
-diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
-deleted file mode 100644
-index a2cffb9..0000000
-Binary files a/V2/conversions/V2/conversions-test-cases.xlsx and /dev/null differ
-diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
-deleted file mode 100644
-index dc92171..0000000
---- a/V2/conversions/V2/converting.c
-+++ /dev/null
-@@ -1,34 +0,0 @@
--#define _CRT_SECURE_NO_WARNINGS
--#define BUFFER_SIZE 80
--
--#include "converting.h"
--
--// User inputs a number as a string, then it is returned as an int
--void converting() {
--/* Version 1 */
--	printf("*** Start of Converting Strings to int Demo ***\n");
--	char intString[BUFFER_SIZE];
--	int intNumber;
--	do
--	{
--		printf("Type an int numeric string (q - to quit):\n");
--		fgets(intString, BUFFER_SIZE, stdin);
--		intString[strlen(intString) - 1] = '\0';
--		if (strcmp(intString, "q") != 0)
--		{
--			intNumber = atoi(intString);
--			printf("Converted number is %d\n", intNumber);
--		}
--	}
--	while (strcmp(intString, "q") != 0);
--	printf("*** End of Converting Strings to int Demo ***\n\n");
--
--/* Version 2 */
--//>> insert here
--
--
--/* Version 3 */
--//>> insert here
--
--
--}
-diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
-deleted file mode 100644
-index 94e86ab..0000000
---- a/V2/conversions/V2/converting.h
-+++ /dev/null
-@@ -1,11 +0,0 @@
--#ifndef _CONVERTING_H_
--#define _CONVERTING_H_
--
--#include <stdio.h>
--#include <string.h>
--#include <stdlib.h>
--
--// User inputs a number as a string, then it is returned as an int
--void converting(void);
--
--#endif
-\ No newline at end of file
-diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
-deleted file mode 100644
-index 6a8e436..0000000
---- a/V2/conversions/V2/main.c
-+++ /dev/null
-@@ -1,7 +0,0 @@
--#include "converting.h"
--
--int main(void)
--{
--	converting();
--	return 0;
--}
-\ No newline at end of file
-diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
-similarity index 53%
-rename from V2/conversions/V1/conversions-test-cases.xlsx
-rename to V2/conversions/conversions-test-cases.xlsx
-index a2cffb9..43a8d2a 100644
-Binary files a/V2/conversions/V1/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
-diff --git a/V2/conversions/V1/converting.c b/V2/conversions/converting.c
-similarity index 57%
-rename from V2/conversions/V1/converting.c
-rename to V2/conversions/converting.c
-index dc92171..9f0d0ac 100644
---- a/V2/conversions/V1/converting.c
-+++ b/V2/conversions/converting.c
-@@ -24,8 +24,21 @@ void converting() {
- 	printf("*** End of Converting Strings to int Demo ***\n\n");
- 
- /* Version 2 */
--//>> insert here
--
-+	printf("*** Start of Converting Strings to double Demo ***\n");
-+	char doubleString[BUFFER_SIZE];
-+	double doubleNumber;
-+	do
-+	{
-+		printf("Type the double numeric string (q - to quit):\n");
-+		fgets(doubleString, BUFFER_SIZE, stdin);
-+		doubleString[strlen(doubleString) - 1] = '\0';
-+		if ((strcmp(doubleString, "q") != 0))
-+		{
-+			doubleNumber = atof(doubleString);
-+			printf("Converted number is %f\n", doubleNumber);
-+		}
-+	} while (strcmp(doubleString, "q") != 0);
-+	printf("*** End of Converting Strings to double Demo ***\n\n");
- 
- /* Version 3 */
- //>> insert here
-diff --git a/V1/conversions/conversionsV1/converting.h b/V2/conversions/converting.h
-similarity index 100%
-rename from V1/conversions/conversionsV1/converting.h
-rename to V2/conversions/converting.h
-diff --git a/V1/conversions/conversionsV1/main.c b/V2/conversions/main.c
-similarity index 100%
-rename from V1/conversions/conversionsV1/main.c
-rename to V2/conversions/main.c
-diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
-deleted file mode 100644
-index 88b340e..0000000
---- a/V2/conversions/templates/converting.c
-+++ /dev/null
-@@ -1,16 +0,0 @@
--#include "converting.h"
--
--void converting() {
--/* Version 1 */
-->> insert here
--
--
--/* Version 2 */
-->> insert here
--
--
--/* Version 3 */
-->> insert here
--
--
--}
-diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
-deleted file mode 100644
-index 4ffb3a8..0000000
-Binary files a/V2/conversions/templates/converting_header.png and /dev/null differ
-diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
-deleted file mode 100644
-index 50f5734..0000000
-Binary files a/V2/conversions/templates/converting_v1.png and /dev/null differ
-diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
-deleted file mode 100644
-index edcdf1e..0000000
-Binary files a/V2/conversions/templates/converting_v2.png and /dev/null differ
-diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
-deleted file mode 100644
-index 146285f..0000000
-Binary files a/V2/conversions/templates/converting_v3.png and /dev/null differ
-
-commit d381ca2bc9cb411356a214dcb09764517b1b8dba
-Author: brandondoray01 <117381471+brandondoray01@users.noreply.github.com>
-Date:   Fri Dec 8 18:43:36 2023 -0500
-
-    Add manipulations module to V2
-
-diff --git a/V2/manipulations/PM-Notes-Brandon-Doray.docx b/V2/manipulations/PM-Notes-Brandon-Doray.docx
-new file mode 100644
-index 0000000..f3443e8
---- /dev/null
-+++ b/V2/manipulations/PM-Notes-Brandon-Doray.docx
-@@ -0,0 +1,25 @@
-+Manipulation Module
-+
-+//V1
-+
-+This module concatenates 2 strings sized to a defined macro.
-+
-+Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
-+
-+An input of `q' was tested to ensure it would result in ending the program.
-+
-+A string that is greater than the initialized memory was tested to ensure it would not crash the program.
-+
-+//V2
-+
-+V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
-+
-+This function will only compare strings up until it hits a NULL or a char that does not match.
-+
-+If it hits a char that does not match, anything after that will not be considered in the comparison.
-+
-+The chars are evaluated using their ASCII value.
-+
-+The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
-+
-+
-diff --git a/V2/manipulations/manipulatemain.c b/V2/manipulations/manipulatemain.c
-new file mode 100644
-index 0000000..1bcc78d
---- /dev/null
-+++ b/V2/manipulations/manipulatemain.c
-@@ -0,0 +1,5 @@
-+int main(void) {
-+
-+	manipulating();
-+	return 0;
-+}
-\ No newline at end of file
-diff --git a/V2/manipulations/manipulating.c b/V2/manipulations/manipulating.c
-new file mode 100644
-index 0000000..7ba26cd
---- /dev/null
-+++ b/V2/manipulations/manipulating.c
-@@ -0,0 +1,61 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#include "manipulating.h"
-+
-+// V1
-+
-+void manipulating(void) {
-+	printf("*** Start of Concatenating Strings Demo ***\n");
-+	char string1[BUFFER_SIZE];
-+	char string2[BUFFER_SIZE];
-+	do {
-+		//Prompt for first string
-+		printf("Type the 1st string (q - to quit):\n");
-+		fgets(string1, BUFFER_SIZE, stdin);
-+		string1[strlen(string1) - 1] = '\0';
-+		//if q was entered quit program
-+		if ((strcmp(string1, "q") != 0)) {
-+			printf("Type the 2nd string:\n");
-+			//promt for 2nd string
-+			fgets(string2, BUFFER_SIZE, stdin);
-+			string2[strlen(string2) - 1] = '\0';
-+			//concatenate string
-+			strcat(string1, string2);
-+			printf("Concatenated string is \'%s\'\n", string1);
-+		}
-+	} while (strcmp(string1, "q") != 0);
-+	printf("*** End of Concatenating Strings Demo ***\n\n");
-+
-+	//V2
-+	printf("***Start of Comparing Strings Demon***\n");
-+	char compare1[BUFFER_SIZE];
-+	char compare2[BUFFER_SIZE];
-+	int result;
-+	do {
-+		//Receive user input for the 1st string
-+		printf("Type the 1st string to compare (q - to quit):\n");
-+		fgets(compare1, BUFFER_SIZE, stdin);
-+		//Add an ending NULL to the 1st string
-+		compare1[strlen(compare1) - 1] = '\0';
-+		//Check that the user did not input 'q' to quit
-+		if (strcmp(compare1, "q") != 0) {
-+			//Receive user input for the 2nd string
-+			printf("Type the 2nd string to compare:\n");
-+			fgets(compare2, BUFFER_SIZE, stdin);
-+			//Add an ending NULL to the 2nd string
-+			compare2[strlen(compare2) - 1] = '\0';
-+			result = strcmp(compare1, compare2);
-+			//Check if the 1st string < than the 2nd string
-+			if (result < 0)
-+				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
-+			//Check if the strings are equal
-+			else if (result == 0)
-+				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
-+			//Check if the first string is greater than the 2nd string
-+			else
-+				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
-+
-+		}
-+	} while (strcmp(compare1, "q") != 0);
-+	printf("*** End of Comparing Strings Demon ***\n\n");
-+}
-\ No newline at end of file
-diff --git a/V2/manipulations/manipulating.h b/V2/manipulations/manipulating.h
-new file mode 100644
-index 0000000..434f748
---- /dev/null
-+++ b/V2/manipulations/manipulating.h
-@@ -0,0 +1,6 @@
-+#ifndef _MANIPULATING_H_
-+#define _MANIPULATING_H_
-+#include <stdio.h>
-+#include <string.h>
-+void manipulating(void);
-+#endif
-\ No newline at end of file
-diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
-new file mode 100644
-index 0000000..323e377
-Binary files /dev/null and b/V2/manipulations/manipulation-test-cases.xlsx differ
-
-commit 762b012570748db01ca39e1b888a916f027f5c43
-Author: Axton Smith <axtonsmith@gmail.com>
-Date:   Fri Dec 8 18:02:18 2023 -0500
-
-    Added main and conversions directories to V2
-
-diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
-new file mode 100644
-index 0000000..dc61b8f
---- /dev/null
-+++ b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
-@@ -0,0 +1,4 @@
-+Conversion Module
-+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
-+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
-+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
-diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/V1/conversions-test-cases.xlsx
-new file mode 100644
-index 0000000..a2cffb9
-Binary files /dev/null and b/V2/conversions/V1/conversions-test-cases.xlsx differ
-diff --git a/V2/conversions/V1/converting.c b/V2/conversions/V1/converting.c
-new file mode 100644
-index 0000000..dc92171
---- /dev/null
-+++ b/V2/conversions/V1/converting.c
-@@ -0,0 +1,34 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+
-+#include "converting.h"
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting() {
-+/* Version 1 */
-+	printf("*** Start of Converting Strings to int Demo ***\n");
-+	char intString[BUFFER_SIZE];
-+	int intNumber;
-+	do
-+	{
-+		printf("Type an int numeric string (q - to quit):\n");
-+		fgets(intString, BUFFER_SIZE, stdin);
-+		intString[strlen(intString) - 1] = '\0';
-+		if (strcmp(intString, "q") != 0)
-+		{
-+			intNumber = atoi(intString);
-+			printf("Converted number is %d\n", intNumber);
-+		}
-+	}
-+	while (strcmp(intString, "q") != 0);
-+	printf("*** End of Converting Strings to int Demo ***\n\n");
-+
-+/* Version 2 */
-+//>> insert here
-+
-+
-+/* Version 3 */
-+//>> insert here
-+
-+
-+}
-diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
-new file mode 100644
-index 0000000..94e86ab
---- /dev/null
-+++ b/V2/conversions/V1/converting.h
-@@ -0,0 +1,11 @@
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+#include <stdio.h>
-+#include <string.h>
-+#include <stdlib.h>
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
-new file mode 100644
-index 0000000..6a8e436
---- /dev/null
-+++ b/V2/conversions/V1/main.c
-@@ -0,0 +1,7 @@
-+#include "converting.h"
-+
-+int main(void)
-+{
-+	converting();
-+	return 0;
-+}
-\ No newline at end of file
-diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
-new file mode 100644
-index 0000000..dc61b8f
---- /dev/null
-+++ b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
-@@ -0,0 +1,4 @@
-+Conversion Module
-+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
-+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
-+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
-diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
-new file mode 100644
-index 0000000..a2cffb9
-Binary files /dev/null and b/V2/conversions/V2/conversions-test-cases.xlsx differ
-diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
-new file mode 100644
-index 0000000..dc92171
---- /dev/null
-+++ b/V2/conversions/V2/converting.c
-@@ -0,0 +1,34 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+
-+#include "converting.h"
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting() {
-+/* Version 1 */
-+	printf("*** Start of Converting Strings to int Demo ***\n");
-+	char intString[BUFFER_SIZE];
-+	int intNumber;
-+	do
-+	{
-+		printf("Type an int numeric string (q - to quit):\n");
-+		fgets(intString, BUFFER_SIZE, stdin);
-+		intString[strlen(intString) - 1] = '\0';
-+		if (strcmp(intString, "q") != 0)
-+		{
-+			intNumber = atoi(intString);
-+			printf("Converted number is %d\n", intNumber);
-+		}
-+	}
-+	while (strcmp(intString, "q") != 0);
-+	printf("*** End of Converting Strings to int Demo ***\n\n");
-+
-+/* Version 2 */
-+//>> insert here
-+
-+
-+/* Version 3 */
-+//>> insert here
-+
-+
-+}
-diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
-new file mode 100644
-index 0000000..94e86ab
---- /dev/null
-+++ b/V2/conversions/V2/converting.h
-@@ -0,0 +1,11 @@
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+#include <stdio.h>
-+#include <string.h>
-+#include <stdlib.h>
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
-new file mode 100644
-index 0000000..6a8e436
---- /dev/null
-+++ b/V2/conversions/V2/main.c
-@@ -0,0 +1,7 @@
-+#include "converting.h"
-+
-+int main(void)
-+{
-+	converting();
-+	return 0;
-+}
-\ No newline at end of file
-diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
-new file mode 100644
-index 0000000..88b340e
---- /dev/null
-+++ b/V2/conversions/templates/converting.c
-@@ -0,0 +1,16 @@
-+#include "converting.h"
-+
-+void converting() {
-+/* Version 1 */
-+>> insert here
-+
-+
-+/* Version 2 */
-+>> insert here
-+
-+
-+/* Version 3 */
-+>> insert here
-+
-+
-+}
-diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
-new file mode 100644
-index 0000000..4ffb3a8
-Binary files /dev/null and b/V2/conversions/templates/converting_header.png differ
-diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
-new file mode 100644
-index 0000000..50f5734
-Binary files /dev/null and b/V2/conversions/templates/converting_v1.png differ
-diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
-new file mode 100644
-index 0000000..edcdf1e
-Binary files /dev/null and b/V2/conversions/templates/converting_v2.png differ
-diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
-new file mode 100644
-index 0000000..146285f
-Binary files /dev/null and b/V2/conversions/templates/converting_v3.png differ
-diff --git a/V2/main/main.c b/V2/main/main.c
-new file mode 100644
-index 0000000..5062fbb
---- /dev/null
-+++ b/V2/main/main.c
-@@ -0,0 +1,12 @@
-+#include "fundamentals.h"
-+#include "manipulating.h"
-+#include "tokenizing.h"
-+#include "converting.h"
-+
-+int main(void)
-+{
-+	fundamentals();
-+	manipulating();
-+	tokenizing();
-+	converting();
-+}
-
-commit 71381063066ca1afc0b8ae3b42200293548cf6bd
-Author: Axton Smith <axtonsmith@gmail.com>
-Date:   Fri Dec 8 17:55:59 2023 -0500
-
-    Moved all files to V1, Add V2 directory
-
-diff --git a/conversions/PM-Notes-AxtonSmith.docx b/V1/conversions/PM-Notes-AxtonSmith.docx
-similarity index 100%
-rename from conversions/PM-Notes-AxtonSmith.docx
-rename to V1/conversions/PM-Notes-AxtonSmith.docx
-diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
-similarity index 100%
-rename from conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
-rename to V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
-diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
-similarity index 100%
-rename from conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
-rename to V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
-diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
-similarity index 100%
-rename from conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
-rename to V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
-diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
-similarity index 100%
-rename from conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
-rename to V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
-diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
-similarity index 100%
-rename from conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
-rename to V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
-diff --git a/conversions/code/.vs/v1/v17/.suo b/V1/conversions/code/.vs/v1/v17/.suo
-similarity index 100%
-rename from conversions/code/.vs/v1/v17/.suo
-rename to V1/conversions/code/.vs/v1/v17/.suo
-diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/V1/conversions/code/.vs/v1/v17/Browse.VC.db
-similarity index 100%
-rename from conversions/code/.vs/v1/v17/Browse.VC.db
-rename to V1/conversions/code/.vs/v1/v17/Browse.VC.db
-diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/V1/conversions/code/.vs/v1/v17/Solution.VC.db
-similarity index 100%
-rename from conversions/code/.vs/v1/v17/Solution.VC.db
-rename to V1/conversions/code/.vs/v1/v17/Solution.VC.db
-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
-similarity index 100%
-rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
-rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
-similarity index 100%
-rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
-rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
-similarity index 100%
-rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
-rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
-similarity index 100%
-rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
-rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
-diff --git a/conversions/code/converting.c b/V1/conversions/code/converting.c
-similarity index 100%
-rename from conversions/code/converting.c
-rename to V1/conversions/code/converting.c
-diff --git a/conversions/code/converting.h b/V1/conversions/code/converting.h
-similarity index 100%
-rename from conversions/code/converting.h
-rename to V1/conversions/code/converting.h
-diff --git a/conversions/code/main.c b/V1/conversions/code/main.c
-similarity index 100%
-rename from conversions/code/main.c
-rename to V1/conversions/code/main.c
-diff --git a/conversions/code/v1.sln b/V1/conversions/code/v1.sln
-similarity index 100%
-rename from conversions/code/v1.sln
-rename to V1/conversions/code/v1.sln
-diff --git a/conversions/code/v1.vcxproj b/V1/conversions/code/v1.vcxproj
-similarity index 100%
-rename from conversions/code/v1.vcxproj
-rename to V1/conversions/code/v1.vcxproj
-diff --git a/conversions/code/v1.vcxproj.filters b/V1/conversions/code/v1.vcxproj.filters
-similarity index 100%
-rename from conversions/code/v1.vcxproj.filters
-rename to V1/conversions/code/v1.vcxproj.filters
-diff --git a/conversions/code/v1.vcxproj.user b/V1/conversions/code/v1.vcxproj.user
-similarity index 100%
-rename from conversions/code/v1.vcxproj.user
-rename to V1/conversions/code/v1.vcxproj.user
-diff --git a/conversions/code/x64/Debug/converting.obj b/V1/conversions/code/x64/Debug/converting.obj
-similarity index 100%
-rename from conversions/code/x64/Debug/converting.obj
-rename to V1/conversions/code/x64/Debug/converting.obj
-diff --git a/conversions/code/x64/Debug/main.obj b/V1/conversions/code/x64/Debug/main.obj
-similarity index 100%
-rename from conversions/code/x64/Debug/main.obj
-rename to V1/conversions/code/x64/Debug/main.obj
-diff --git a/conversions/code/x64/Debug/v1.exe b/V1/conversions/code/x64/Debug/v1.exe
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.exe
-rename to V1/conversions/code/x64/Debug/v1.exe
-diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/V1/conversions/code/x64/Debug/v1.exe.recipe
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.exe.recipe
-rename to V1/conversions/code/x64/Debug/v1.exe.recipe
-diff --git a/conversions/code/x64/Debug/v1.ilk b/V1/conversions/code/x64/Debug/v1.ilk
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.ilk
-rename to V1/conversions/code/x64/Debug/v1.ilk
-diff --git a/conversions/code/x64/Debug/v1.log b/V1/conversions/code/x64/Debug/v1.log
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.log
-rename to V1/conversions/code/x64/Debug/v1.log
-diff --git a/conversions/code/x64/Debug/v1.pdb b/V1/conversions/code/x64/Debug/v1.pdb
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.pdb
-rename to V1/conversions/code/x64/Debug/v1.pdb
-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
-rename to V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
-rename to V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
-rename to V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
-diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
-rename to V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
-diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
-rename to V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
-diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
-rename to V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
-diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
-rename to V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
-diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
-rename to V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
-diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
-similarity index 100%
-rename from conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
-rename to V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
-diff --git a/conversions/code/x64/Debug/vc143.idb b/V1/conversions/code/x64/Debug/vc143.idb
-similarity index 100%
-rename from conversions/code/x64/Debug/vc143.idb
-rename to V1/conversions/code/x64/Debug/vc143.idb
-diff --git a/conversions/code/x64/Debug/vc143.pdb b/V1/conversions/code/x64/Debug/vc143.pdb
-similarity index 100%
-rename from conversions/code/x64/Debug/vc143.pdb
-rename to V1/conversions/code/x64/Debug/vc143.pdb
-diff --git a/conversions/conversions-test-cases.xlsx b/V1/conversions/conversions-test-cases.xlsx
-similarity index 100%
-rename from conversions/conversions-test-cases.xlsx
-rename to V1/conversions/conversions-test-cases.xlsx
-diff --git a/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
-similarity index 100%
-rename from conversions/conversionsV1.zip
-rename to V1/conversions/conversionsV1.zip
-diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
-similarity index 100%
-rename from conversions/conversionsV1/PM-Notes-AxtonSmith.docx
-rename to V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
-diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
-similarity index 100%
-rename from conversions/conversionsV1/conversions-test-cases.xlsx
-rename to V1/conversions/conversionsV1/conversions-test-cases.xlsx
-diff --git a/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
-similarity index 100%
-rename from conversions/conversionsV1/converting.c
-rename to V1/conversions/conversionsV1/converting.c
-diff --git a/conversions/conversionsV1/converting.h b/V1/conversions/conversionsV1/converting.h
-similarity index 100%
-rename from conversions/conversionsV1/converting.h
-rename to V1/conversions/conversionsV1/converting.h
-diff --git a/conversions/conversionsV1/main.c b/V1/conversions/conversionsV1/main.c
-similarity index 100%
-rename from conversions/conversionsV1/main.c
-rename to V1/conversions/conversionsV1/main.c
-diff --git a/conversions/converting.c b/V1/conversions/converting.c
-similarity index 100%
-rename from conversions/converting.c
-rename to V1/conversions/converting.c
-diff --git a/conversions/converting_header.png b/V1/conversions/converting_header.png
-similarity index 100%
-rename from conversions/converting_header.png
-rename to V1/conversions/converting_header.png
-diff --git a/conversions/converting_v1.png b/V1/conversions/converting_v1.png
-similarity index 100%
-rename from conversions/converting_v1.png
-rename to V1/conversions/converting_v1.png
-diff --git a/conversions/converting_v2.png b/V1/conversions/converting_v2.png
-similarity index 100%
-rename from conversions/converting_v2.png
-rename to V1/conversions/converting_v2.png
-diff --git a/conversions/converting_v3.png b/V1/conversions/converting_v3.png
-similarity index 100%
-rename from conversions/converting_v3.png
-rename to V1/conversions/converting_v3.png
-diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/V1/fundamentals/PM-Notes-AxtonSmith.docx
-similarity index 100%
-rename from fundamentals/PM-Notes-AxtonSmith.docx
-rename to V1/fundamentals/PM-Notes-AxtonSmith.docx
-diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
-similarity index 100%
-rename from fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
-rename to V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
-diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
-similarity index 100%
-rename from fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
-rename to V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
-diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
-similarity index 100%
-rename from fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
-rename to V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
-diff --git a/fundamentals/code/.vs/project/v17/.suo b/V1/fundamentals/code/.vs/project/v17/.suo
-similarity index 100%
-rename from fundamentals/code/.vs/project/v17/.suo
-rename to V1/fundamentals/code/.vs/project/v17/.suo
-diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/V1/fundamentals/code/.vs/project/v17/Browse.VC.db
-similarity index 100%
-rename from fundamentals/code/.vs/project/v17/Browse.VC.db
-rename to V1/fundamentals/code/.vs/project/v17/Browse.VC.db
-diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/V1/fundamentals/code/.vs/project/v17/Solution.VC.db
-similarity index 100%
-rename from fundamentals/code/.vs/project/v17/Solution.VC.db
-rename to V1/fundamentals/code/.vs/project/v17/Solution.VC.db
-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
-similarity index 100%
-rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
-rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
-similarity index 100%
-rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
-rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
-similarity index 100%
-rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
-rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
-diff --git a/fundamentals/code/fundamentals.c b/V1/fundamentals/code/fundamentals.c
-similarity index 100%
-rename from fundamentals/code/fundamentals.c
-rename to V1/fundamentals/code/fundamentals.c
-diff --git a/fundamentals/code/fundamentals.h b/V1/fundamentals/code/fundamentals.h
-similarity index 100%
-rename from fundamentals/code/fundamentals.h
-rename to V1/fundamentals/code/fundamentals.h
-diff --git a/fundamentals/code/main.c b/V1/fundamentals/code/main.c
-similarity index 100%
-rename from fundamentals/code/main.c
-rename to V1/fundamentals/code/main.c
-diff --git a/fundamentals/code/project.sln b/V1/fundamentals/code/project.sln
-similarity index 100%
-rename from fundamentals/code/project.sln
-rename to V1/fundamentals/code/project.sln
-diff --git a/fundamentals/code/project.vcxproj b/V1/fundamentals/code/project.vcxproj
-similarity index 100%
-rename from fundamentals/code/project.vcxproj
-rename to V1/fundamentals/code/project.vcxproj
-diff --git a/fundamentals/code/project.vcxproj.filters b/V1/fundamentals/code/project.vcxproj.filters
-similarity index 100%
-rename from fundamentals/code/project.vcxproj.filters
-rename to V1/fundamentals/code/project.vcxproj.filters
-diff --git a/fundamentals/code/project.vcxproj.user b/V1/fundamentals/code/project.vcxproj.user
-similarity index 100%
-rename from fundamentals/code/project.vcxproj.user
-rename to V1/fundamentals/code/project.vcxproj.user
-diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/V1/fundamentals/code/x64/Debug/fundamentals.obj
-similarity index 100%
-rename from fundamentals/code/x64/Debug/fundamentals.obj
-rename to V1/fundamentals/code/x64/Debug/fundamentals.obj
-diff --git a/fundamentals/code/x64/Debug/main.obj b/V1/fundamentals/code/x64/Debug/main.obj
-similarity index 100%
-rename from fundamentals/code/x64/Debug/main.obj
-rename to V1/fundamentals/code/x64/Debug/main.obj
-diff --git a/fundamentals/code/x64/Debug/project.exe b/V1/fundamentals/code/x64/Debug/project.exe
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.exe
-rename to V1/fundamentals/code/x64/Debug/project.exe
-diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/V1/fundamentals/code/x64/Debug/project.exe.recipe
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.exe.recipe
-rename to V1/fundamentals/code/x64/Debug/project.exe.recipe
-diff --git a/fundamentals/code/x64/Debug/project.ilk b/V1/fundamentals/code/x64/Debug/project.ilk
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.ilk
-rename to V1/fundamentals/code/x64/Debug/project.ilk
-diff --git a/fundamentals/code/x64/Debug/project.log b/V1/fundamentals/code/x64/Debug/project.log
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.log
-rename to V1/fundamentals/code/x64/Debug/project.log
-diff --git a/fundamentals/code/x64/Debug/project.pdb b/V1/fundamentals/code/x64/Debug/project.pdb
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.pdb
-rename to V1/fundamentals/code/x64/Debug/project.pdb
-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
-rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
-rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
-rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
-diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
-rename to V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
-rename to V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
-rename to V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
-rename to V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
-diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
-rename to V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
-diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
-similarity index 100%
-rename from fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
-rename to V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
-diff --git a/fundamentals/code/x64/Debug/vc143.idb b/V1/fundamentals/code/x64/Debug/vc143.idb
-similarity index 100%
-rename from fundamentals/code/x64/Debug/vc143.idb
-rename to V1/fundamentals/code/x64/Debug/vc143.idb
-diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/V1/fundamentals/code/x64/Debug/vc143.pdb
-similarity index 100%
-rename from fundamentals/code/x64/Debug/vc143.pdb
-rename to V1/fundamentals/code/x64/Debug/vc143.pdb
-diff --git a/fundamentals/fundamentals-test-cases.xlsx b/V1/fundamentals/fundamentals-test-cases.xlsx
-similarity index 100%
-rename from fundamentals/fundamentals-test-cases.xlsx
-rename to V1/fundamentals/fundamentals-test-cases.xlsx
-diff --git a/fundamentals/fundamentals.c b/V1/fundamentals/fundamentals.c
-similarity index 100%
-rename from fundamentals/fundamentals.c
-rename to V1/fundamentals/fundamentals.c
-diff --git a/fundamentals/fundamentals_header.png b/V1/fundamentals/fundamentals_header.png
-similarity index 100%
-rename from fundamentals/fundamentals_header.png
-rename to V1/fundamentals/fundamentals_header.png
-diff --git a/fundamentals/fundamentals_v1.png b/V1/fundamentals/fundamentals_v1.png
-similarity index 100%
-rename from fundamentals/fundamentals_v1.png
-rename to V1/fundamentals/fundamentals_v1.png
-diff --git a/fundamentals/fundamentals_v2.png b/V1/fundamentals/fundamentals_v2.png
-similarity index 100%
-rename from fundamentals/fundamentals_v2.png
-rename to V1/fundamentals/fundamentals_v2.png
-diff --git a/fundamentals/fundamentals_v3.png b/V1/fundamentals/fundamentals_v3.png
-similarity index 100%
-rename from fundamentals/fundamentals_v3.png
-rename to V1/fundamentals/fundamentals_v3.png
-diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
-similarity index 100%
-rename from fundamentals/v1/PM-Notes-AxtonSmith.docx
-rename to V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
-diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/V1/fundamentals/v1/fundamentals-test-cases.xlsx
-similarity index 100%
-rename from fundamentals/v1/fundamentals-test-cases.xlsx
-rename to V1/fundamentals/v1/fundamentals-test-cases.xlsx
-diff --git a/fundamentals/v1/fundamentals.c b/V1/fundamentals/v1/fundamentals.c
-similarity index 100%
-rename from fundamentals/v1/fundamentals.c
-rename to V1/fundamentals/v1/fundamentals.c
-diff --git a/fundamentals/v1/fundamentals.h b/V1/fundamentals/v1/fundamentals.h
-similarity index 100%
-rename from fundamentals/v1/fundamentals.h
-rename to V1/fundamentals/v1/fundamentals.h
-diff --git a/fundamentals/v1/main.c b/V1/fundamentals/v1/main.c
-similarity index 100%
-rename from fundamentals/v1/main.c
-rename to V1/fundamentals/v1/main.c
-diff --git a/main/converting.c b/V1/main/converting.c
-similarity index 100%
-rename from main/converting.c
-rename to V1/main/converting.c
-diff --git a/main/converting.h b/V1/main/converting.h
-similarity index 100%
-rename from main/converting.h
-rename to V1/main/converting.h
-diff --git a/main/fundamentals.c b/V1/main/fundamentals.c
-similarity index 100%
-rename from main/fundamentals.c
-rename to V1/main/fundamentals.c
-diff --git a/main/fundamentals.h b/V1/main/fundamentals.h
-similarity index 100%
-rename from main/fundamentals.h
-rename to V1/main/fundamentals.h
-diff --git a/main/main.c b/V1/main/main.c
-similarity index 100%
-rename from main/main.c
-rename to V1/main/main.c
-diff --git a/main/manipulating.c b/V1/main/manipulating.c
-similarity index 100%
-rename from main/manipulating.c
-rename to V1/main/manipulating.c
-diff --git a/main/manipulating.h b/V1/main/manipulating.h
-similarity index 100%
-rename from main/manipulating.h
-rename to V1/main/manipulating.h
-diff --git a/main/tokenizing.c b/V1/main/tokenizing.c
-similarity index 100%
-rename from main/tokenizing.c
-rename to V1/main/tokenizing.c
-diff --git a/main/tokenizing.h b/V1/main/tokenizing.h
-similarity index 100%
-rename from main/tokenizing.h
-rename to V1/main/tokenizing.h
-diff --git a/manipulation/PM-Notes-Brandon-Doray.docx b/V1/manipulation/PM-Notes-Brandon-Doray.docx
-similarity index 100%
-rename from manipulation/PM-Notes-Brandon-Doray.docx
-rename to V1/manipulation/PM-Notes-Brandon-Doray.docx
-diff --git a/manipulation/manipulatemain.c b/V1/manipulation/manipulatemain.c
-similarity index 100%
-rename from manipulation/manipulatemain.c
-rename to V1/manipulation/manipulatemain.c
-diff --git a/manipulation/manipulating.c b/V1/manipulation/manipulating.c
-similarity index 100%
-rename from manipulation/manipulating.c
-rename to V1/manipulation/manipulating.c
-diff --git a/manipulation/manipulating.h b/V1/manipulation/manipulating.h
-similarity index 100%
-rename from manipulation/manipulating.h
-rename to V1/manipulation/manipulating.h
-diff --git a/manipulation/manipulation-test-cases.xlsx b/V1/manipulation/manipulation-test-cases.xlsx
-similarity index 100%
-rename from manipulation/manipulation-test-cases.xlsx
-rename to V1/manipulation/manipulation-test-cases.xlsx
-diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/V1/tokenizing/PM-Notes-DarianGrijalba.docx
-similarity index 100%
-rename from tokenizing/PM-Notes-DarianGrijalba.docx
-rename to V1/tokenizing/PM-Notes-DarianGrijalba.docx
-diff --git a/tokenizing/tokenizing.c b/V1/tokenizing/tokenizing.c
-similarity index 100%
-rename from tokenizing/tokenizing.c
-rename to V1/tokenizing/tokenizing.c
-diff --git a/tokenizing/tokenizing.h b/V1/tokenizing/tokenizing.h
-similarity index 100%
-rename from tokenizing/tokenizing.h
-rename to V1/tokenizing/tokenizing.h
-
-commit 0ec0097d57c6a5d87103780c4dc8f8e6d3cc45df
-Author: Axton Smith <axtonsmith@gmail.com>
-Date:   Fri Dec 8 17:52:55 2023 -0500
-
-    Fix file path in manipulation directory
-
-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
-deleted file mode 100644
-index ce82fd8..0000000
-Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo and /dev/null differ
-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
-deleted file mode 100644
-index 95cfcc7..0000000
-Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db and /dev/null differ
-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
-deleted file mode 100644
-index b2ba1dc..0000000
-Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db and /dev/null differ
-diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/PM-Notes-Brandon-Doray.docx
-similarity index 100%
-rename from manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
-rename to manipulation/PM-Notes-Brandon-Doray.docx
-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/manipulatemain.c
-similarity index 100%
-rename from manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
-rename to manipulation/manipulatemain.c
-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/manipulating.c
-similarity index 100%
-rename from manipulation/Manipulation V1/Manipulation V1/manipulating.c
-rename to manipulation/manipulating.c
-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/manipulating.h
-similarity index 100%
-rename from manipulation/Manipulation V1/Manipulation V1/manipulating.h
-rename to manipulation/manipulating.h
-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/manipulation-test-cases.xlsx
-similarity index 100%
-rename from manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
-rename to manipulation/manipulation-test-cases.xlsx
-
-commit e40dd3d033d7164d96f9fa0ffe2668ffeb2ccfed
-Author: Axton Smith <axtonsmith@gmail.com>
-Date:   Fri Dec 8 17:52:00 2023 -0500
-
-    Add V1 files
-
-diff --git a/conversions/PM-Notes-AxtonSmith.docx b/conversions/PM-Notes-AxtonSmith.docx
-new file mode 100644
-index 0000000..dc61b8f
---- /dev/null
-+++ b/conversions/PM-Notes-AxtonSmith.docx
-@@ -0,0 +1,4 @@
-+Conversion Module
-+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
-+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
-+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
-diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
-new file mode 100644
-index 0000000..70aef67
-Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx differ
-diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
-new file mode 100644
-index 0000000..2b75f1d
-Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx differ
-diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
-new file mode 100644
-index 0000000..70aef67
-Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx differ
-diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
-new file mode 100644
-index 0000000..70aef67
-Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx differ
-diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
-new file mode 100644
-index 0000000..70aef67
-Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx differ
-diff --git a/conversions/code/.vs/v1/v17/.suo b/conversions/code/.vs/v1/v17/.suo
-new file mode 100644
-index 0000000..218f706
-Binary files /dev/null and b/conversions/code/.vs/v1/v17/.suo differ
-diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/conversions/code/.vs/v1/v17/Browse.VC.db
-new file mode 100644
-index 0000000..086de7c
-Binary files /dev/null and b/conversions/code/.vs/v1/v17/Browse.VC.db differ
-diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/conversions/code/.vs/v1/v17/Solution.VC.db
-new file mode 100644
-index 0000000..da0fe73
-Binary files /dev/null and b/conversions/code/.vs/v1/v17/Solution.VC.db differ
-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
-new file mode 100644
-index 0000000..137cd6f
-Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch differ
-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
-new file mode 100644
-index 0000000..e7b304a
-Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch differ
-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
-new file mode 100644
-index 0000000..934be31
-Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch differ
-diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
-new file mode 100644
-index 0000000..937325b
-Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch differ
-diff --git a/conversions/code/converting.c b/conversions/code/converting.c
-new file mode 100644
-index 0000000..dc92171
---- /dev/null
-+++ b/conversions/code/converting.c
-@@ -0,0 +1,34 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+
-+#include "converting.h"
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting() {
-+/* Version 1 */
-+	printf("*** Start of Converting Strings to int Demo ***\n");
-+	char intString[BUFFER_SIZE];
-+	int intNumber;
-+	do
-+	{
-+		printf("Type an int numeric string (q - to quit):\n");
-+		fgets(intString, BUFFER_SIZE, stdin);
-+		intString[strlen(intString) - 1] = '\0';
-+		if (strcmp(intString, "q") != 0)
-+		{
-+			intNumber = atoi(intString);
-+			printf("Converted number is %d\n", intNumber);
-+		}
-+	}
-+	while (strcmp(intString, "q") != 0);
-+	printf("*** End of Converting Strings to int Demo ***\n\n");
-+
-+/* Version 2 */
-+//>> insert here
-+
-+
-+/* Version 3 */
-+//>> insert here
-+
-+
-+}
-diff --git a/conversions/code/converting.h b/conversions/code/converting.h
-new file mode 100644
-index 0000000..94e86ab
---- /dev/null
-+++ b/conversions/code/converting.h
-@@ -0,0 +1,11 @@
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+#include <stdio.h>
-+#include <string.h>
-+#include <stdlib.h>
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/conversions/code/main.c b/conversions/code/main.c
-new file mode 100644
-index 0000000..6a8e436
---- /dev/null
-+++ b/conversions/code/main.c
-@@ -0,0 +1,7 @@
-+#include "converting.h"
-+
-+int main(void)
-+{
-+	converting();
-+	return 0;
-+}
-\ No newline at end of file
-diff --git a/conversions/code/v1.sln b/conversions/code/v1.sln
-new file mode 100644
-index 0000000..57619b4
---- /dev/null
-+++ b/conversions/code/v1.sln
-@@ -0,0 +1,31 @@
-+ï»¿
-+Microsoft Visual Studio Solution File, Format Version 12.00
-+# Visual Studio Version 17
-+VisualStudioVersion = 17.8.34322.80
-+MinimumVisualStudioVersion = 10.0.40219.1
-+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "v1", "v1.vcxproj", "{DFCFF08A-27BA-4895-81DE-69DA151B79DB}"
-+EndProject
-+Global
-+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
-+		Debug|x64 = Debug|x64
-+		Debug|x86 = Debug|x86
-+		Release|x64 = Release|x64
-+		Release|x86 = Release|x86
-+	EndGlobalSection
-+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.ActiveCfg = Debug|x64
-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.Build.0 = Debug|x64
-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.ActiveCfg = Debug|Win32
-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.Build.0 = Debug|Win32
-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.ActiveCfg = Release|x64
-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.Build.0 = Release|x64
-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.ActiveCfg = Release|Win32
-+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.Build.0 = Release|Win32
-+	EndGlobalSection
-+	GlobalSection(SolutionProperties) = preSolution
-+		HideSolutionNode = FALSE
-+	EndGlobalSection
-+	GlobalSection(ExtensibilityGlobals) = postSolution
-+		SolutionGuid = {FB5DDBE1-4B86-462E-8A71-FBB6C215BD41}
-+	EndGlobalSection
-+EndGlobal
-diff --git a/conversions/code/v1.vcxproj b/conversions/code/v1.vcxproj
-new file mode 100644
-index 0000000..8a35f16
---- /dev/null
-+++ b/conversions/code/v1.vcxproj
-@@ -0,0 +1,139 @@
-+<?xml version="1.0" encoding="utf-8"?>
-+<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-+  <ItemGroup Label="ProjectConfigurations">
-+    <ProjectConfiguration Include="Debug|Win32">
-+      <Configuration>Debug</Configuration>
-+      <Platform>Win32</Platform>
-+    </ProjectConfiguration>
-+    <ProjectConfiguration Include="Release|Win32">
-+      <Configuration>Release</Configuration>
-+      <Platform>Win32</Platform>
-+    </ProjectConfiguration>
-+    <ProjectConfiguration Include="Debug|x64">
-+      <Configuration>Debug</Configuration>
-+      <Platform>x64</Platform>
-+    </ProjectConfiguration>
-+    <ProjectConfiguration Include="Release|x64">
-+      <Configuration>Release</Configuration>
-+      <Platform>x64</Platform>
-+    </ProjectConfiguration>
-+  </ItemGroup>
-+  <PropertyGroup Label="Globals">
-+    <VCProjectVersion>17.0</VCProjectVersion>
-+    <Keyword>Win32Proj</Keyword>
-+    <ProjectGuid>{dfcff08a-27ba-4895-81de-69da151b79db}</ProjectGuid>
-+    <RootNamespace>v1</RootNamespace>
-+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
-+  </PropertyGroup>
-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
-+    <ConfigurationType>Application</ConfigurationType>
-+    <UseDebugLibraries>true</UseDebugLibraries>
-+    <PlatformToolset>v143</PlatformToolset>
-+    <CharacterSet>Unicode</CharacterSet>
-+  </PropertyGroup>
-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
-+    <ConfigurationType>Application</ConfigurationType>
-+    <UseDebugLibraries>false</UseDebugLibraries>
-+    <PlatformToolset>v143</PlatformToolset>
-+    <WholeProgramOptimization>true</WholeProgramOptimization>
-+    <CharacterSet>Unicode</CharacterSet>
-+  </PropertyGroup>
-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
-+    <ConfigurationType>Application</ConfigurationType>
-+    <UseDebugLibraries>true</UseDebugLibraries>
-+    <PlatformToolset>v143</PlatformToolset>
-+    <CharacterSet>Unicode</CharacterSet>
-+  </PropertyGroup>
-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
-+    <ConfigurationType>Application</ConfigurationType>
-+    <UseDebugLibraries>false</UseDebugLibraries>
-+    <PlatformToolset>v143</PlatformToolset>
-+    <WholeProgramOptimization>true</WholeProgramOptimization>
-+    <CharacterSet>Unicode</CharacterSet>
-+  </PropertyGroup>
-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
-+  <ImportGroup Label="ExtensionSettings">
-+  </ImportGroup>
-+  <ImportGroup Label="Shared">
-+  </ImportGroup>
-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-+  </ImportGroup>
-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-+  </ImportGroup>
-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-+  </ImportGroup>
-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-+  </ImportGroup>
-+  <PropertyGroup Label="UserMacros" />
-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
-+    <ClCompile>
-+      <WarningLevel>Level3</WarningLevel>
-+      <SDLCheck>true</SDLCheck>
-+      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-+      <ConformanceMode>true</ConformanceMode>
-+    </ClCompile>
-+    <Link>
-+      <SubSystem>Console</SubSystem>
-+      <GenerateDebugInformation>true</GenerateDebugInformation>
-+    </Link>
-+  </ItemDefinitionGroup>
-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
-+    <ClCompile>
-+      <WarningLevel>Level3</WarningLevel>
-+      <FunctionLevelLinking>true</FunctionLevelLinking>
-+      <IntrinsicFunctions>true</IntrinsicFunctions>
-+      <SDLCheck>true</SDLCheck>
-+      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-+      <ConformanceMode>true</ConformanceMode>
-+    </ClCompile>
-+    <Link>
-+      <SubSystem>Console</SubSystem>
-+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
-+      <OptimizeReferences>true</OptimizeReferences>
-+      <GenerateDebugInformation>true</GenerateDebugInformation>
-+    </Link>
-+  </ItemDefinitionGroup>
-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
-+    <ClCompile>
-+      <WarningLevel>Level3</WarningLevel>
-+      <SDLCheck>true</SDLCheck>
-+      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-+      <ConformanceMode>true</ConformanceMode>
-+    </ClCompile>
-+    <Link>
-+      <SubSystem>Console</SubSystem>
-+      <GenerateDebugInformation>true</GenerateDebugInformation>
-+    </Link>
-+  </ItemDefinitionGroup>
-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
-+    <ClCompile>
-+      <WarningLevel>Level3</WarningLevel>
-+      <FunctionLevelLinking>true</FunctionLevelLinking>
-+      <IntrinsicFunctions>true</IntrinsicFunctions>
-+      <SDLCheck>true</SDLCheck>
-+      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-+      <ConformanceMode>true</ConformanceMode>
-+    </ClCompile>
-+    <Link>
-+      <SubSystem>Console</SubSystem>
-+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
-+      <OptimizeReferences>true</OptimizeReferences>
-+      <GenerateDebugInformation>true</GenerateDebugInformation>
-+    </Link>
-+  </ItemDefinitionGroup>
-+  <ItemGroup>
-+    <ClCompile Include="converting.c" />
-+    <ClCompile Include="main.c" />
-+  </ItemGroup>
-+  <ItemGroup>
-+    <ClInclude Include="converting.h" />
-+  </ItemGroup>
-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
-+  <ImportGroup Label="ExtensionTargets">
-+  </ImportGroup>
-+</Project>
-\ No newline at end of file
-diff --git a/conversions/code/v1.vcxproj.filters b/conversions/code/v1.vcxproj.filters
-new file mode 100644
-index 0000000..7ba9ae0
---- /dev/null
-+++ b/conversions/code/v1.vcxproj.filters
-@@ -0,0 +1,30 @@
-+ï»¿<?xml version="1.0" encoding="utf-8"?>
-+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-+  <ItemGroup>
-+    <Filter Include="Source Files">
-+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
-+      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
-+    </Filter>
-+    <Filter Include="Header Files">
-+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
-+      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
-+    </Filter>
-+    <Filter Include="Resource Files">
-+      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
-+      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
-+    </Filter>
-+  </ItemGroup>
-+  <ItemGroup>
-+    <ClCompile Include="converting.c">
-+      <Filter>Source Files</Filter>
-+    </ClCompile>
-+    <ClCompile Include="main.c">
-+      <Filter>Source Files</Filter>
-+    </ClCompile>
-+  </ItemGroup>
-+  <ItemGroup>
-+    <ClInclude Include="converting.h">
-+      <Filter>Header Files</Filter>
-+    </ClInclude>
-+  </ItemGroup>
-+</Project>
-\ No newline at end of file
-diff --git a/conversions/code/v1.vcxproj.user b/conversions/code/v1.vcxproj.user
-new file mode 100644
-index 0000000..88a5509
---- /dev/null
-+++ b/conversions/code/v1.vcxproj.user
-@@ -0,0 +1,4 @@
-+ï»¿<?xml version="1.0" encoding="utf-8"?>
-+<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-+  <PropertyGroup />
-+</Project>
-\ No newline at end of file
-diff --git a/conversions/code/x64/Debug/converting.obj b/conversions/code/x64/Debug/converting.obj
-new file mode 100644
-index 0000000..3c059c8
-Binary files /dev/null and b/conversions/code/x64/Debug/converting.obj differ
-diff --git a/conversions/code/x64/Debug/main.obj b/conversions/code/x64/Debug/main.obj
-new file mode 100644
-index 0000000..752fab6
-Binary files /dev/null and b/conversions/code/x64/Debug/main.obj differ
-diff --git a/conversions/code/x64/Debug/v1.exe b/conversions/code/x64/Debug/v1.exe
-new file mode 100644
-index 0000000..657c946
-Binary files /dev/null and b/conversions/code/x64/Debug/v1.exe differ
-diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/conversions/code/x64/Debug/v1.exe.recipe
-new file mode 100644
-index 0000000..69be474
---- /dev/null
-+++ b/conversions/code/x64/Debug/v1.exe.recipe
-@@ -0,0 +1,11 @@
-+ï»¿<?xml version="1.0" encoding="utf-8"?>
-+<Project>
-+  <ProjectOutputs>
-+    <ProjectOutput>
-+      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe</FullPath>
-+    </ProjectOutput>
-+  </ProjectOutputs>
-+  <ContentFiles />
-+  <SatelliteDlls />
-+  <NonRecipeFileRefs />
-+</Project>
-\ No newline at end of file
-diff --git a/conversions/code/x64/Debug/v1.ilk b/conversions/code/x64/Debug/v1.ilk
-new file mode 100644
-index 0000000..18b8f11
-Binary files /dev/null and b/conversions/code/x64/Debug/v1.ilk differ
-diff --git a/conversions/code/x64/Debug/v1.log b/conversions/code/x64/Debug/v1.log
-new file mode 100644
-index 0000000..d6ecd4a
---- /dev/null
-+++ b/conversions/code/x64/Debug/v1.log
-@@ -0,0 +1,2 @@
-+ï»¿  main.c
-+  v1.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
-diff --git a/conversions/code/x64/Debug/v1.pdb b/conversions/code/x64/Debug/v1.pdb
-new file mode 100644
-index 0000000..e2f8b05
-Binary files /dev/null and b/conversions/code/x64/Debug/v1.pdb differ
-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
-new file mode 100644
-index 0000000..0f0f942
-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog differ
-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
-new file mode 100644
-index 0000000..54a5e77
-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog differ
-diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
-new file mode 100644
-index 0000000..c1bc96f
-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog differ
-diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
-new file mode 100644
-index 0000000..8b2c0bc
---- /dev/null
-+++ b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
-@@ -0,0 +1,2 @@
-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\converting.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\converting.obj
-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\main.obj
-diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
-new file mode 100644
-index 0000000..a7a084f
-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog differ
-diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
-new file mode 100644
-index 0000000..3761899
-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog differ
-diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
-new file mode 100644
-index 0000000..fa10a23
-Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog differ
-diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
-new file mode 100644
-index 0000000..fe1494c
---- /dev/null
-+++ b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
-@@ -0,0 +1,2 @@
-+PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
-+Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\|
-diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
-new file mode 100644
-index 0000000..2da24f7
---- /dev/null
-+++ b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
-@@ -0,0 +1 @@
-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
-diff --git a/conversions/code/x64/Debug/vc143.idb b/conversions/code/x64/Debug/vc143.idb
-new file mode 100644
-index 0000000..1fcdfe4
-Binary files /dev/null and b/conversions/code/x64/Debug/vc143.idb differ
-diff --git a/conversions/code/x64/Debug/vc143.pdb b/conversions/code/x64/Debug/vc143.pdb
-new file mode 100644
-index 0000000..2e1256c
-Binary files /dev/null and b/conversions/code/x64/Debug/vc143.pdb differ
-diff --git a/conversions/conversions-test-cases.xlsx b/conversions/conversions-test-cases.xlsx
-new file mode 100644
-index 0000000..657486d
-Binary files /dev/null and b/conversions/conversions-test-cases.xlsx differ
-diff --git a/conversions/conversionsV1.zip b/conversions/conversionsV1.zip
-new file mode 100644
-index 0000000..ea57e7e
-Binary files /dev/null and b/conversions/conversionsV1.zip differ
-diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
-new file mode 100644
-index 0000000..dc61b8f
---- /dev/null
-+++ b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
-@@ -0,0 +1,4 @@
-+Conversion Module
-+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
-+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
-+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
-diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/conversions/conversionsV1/conversions-test-cases.xlsx
-new file mode 100644
-index 0000000..a2cffb9
-Binary files /dev/null and b/conversions/conversionsV1/conversions-test-cases.xlsx differ
-diff --git a/conversions/conversionsV1/converting.c b/conversions/conversionsV1/converting.c
-new file mode 100644
-index 0000000..dc92171
---- /dev/null
-+++ b/conversions/conversionsV1/converting.c
-@@ -0,0 +1,34 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+
-+#include "converting.h"
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting() {
-+/* Version 1 */
-+	printf("*** Start of Converting Strings to int Demo ***\n");
-+	char intString[BUFFER_SIZE];
-+	int intNumber;
-+	do
-+	{
-+		printf("Type an int numeric string (q - to quit):\n");
-+		fgets(intString, BUFFER_SIZE, stdin);
-+		intString[strlen(intString) - 1] = '\0';
-+		if (strcmp(intString, "q") != 0)
-+		{
-+			intNumber = atoi(intString);
-+			printf("Converted number is %d\n", intNumber);
-+		}
-+	}
-+	while (strcmp(intString, "q") != 0);
-+	printf("*** End of Converting Strings to int Demo ***\n\n");
-+
-+/* Version 2 */
-+//>> insert here
-+
-+
-+/* Version 3 */
-+//>> insert here
-+
-+
-+}
-diff --git a/conversions/conversionsV1/converting.h b/conversions/conversionsV1/converting.h
-new file mode 100644
-index 0000000..94e86ab
---- /dev/null
-+++ b/conversions/conversionsV1/converting.h
-@@ -0,0 +1,11 @@
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+#include <stdio.h>
-+#include <string.h>
-+#include <stdlib.h>
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/conversions/conversionsV1/main.c b/conversions/conversionsV1/main.c
-new file mode 100644
-index 0000000..6a8e436
---- /dev/null
-+++ b/conversions/conversionsV1/main.c
-@@ -0,0 +1,7 @@
-+#include "converting.h"
-+
-+int main(void)
-+{
-+	converting();
-+	return 0;
-+}
-\ No newline at end of file
-diff --git a/conversions/converting.c b/conversions/converting.c
-new file mode 100644
-index 0000000..88b340e
---- /dev/null
-+++ b/conversions/converting.c
-@@ -0,0 +1,16 @@
-+#include "converting.h"
-+
-+void converting() {
-+/* Version 1 */
-+>> insert here
-+
-+
-+/* Version 2 */
-+>> insert here
-+
-+
-+/* Version 3 */
-+>> insert here
-+
-+
-+}
-diff --git a/conversions/converting_header.png b/conversions/converting_header.png
-new file mode 100644
-index 0000000..4ffb3a8
-Binary files /dev/null and b/conversions/converting_header.png differ
-diff --git a/conversions/converting_v1.png b/conversions/converting_v1.png
-new file mode 100644
-index 0000000..50f5734
-Binary files /dev/null and b/conversions/converting_v1.png differ
-diff --git a/conversions/converting_v2.png b/conversions/converting_v2.png
-new file mode 100644
-index 0000000..edcdf1e
-Binary files /dev/null and b/conversions/converting_v2.png differ
-diff --git a/conversions/converting_v3.png b/conversions/converting_v3.png
-new file mode 100644
-index 0000000..146285f
-Binary files /dev/null and b/conversions/converting_v3.png differ
-diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/fundamentals/PM-Notes-AxtonSmith.docx
-new file mode 100644
-index 0000000..835d958
---- /dev/null
-+++ b/fundamentals/PM-Notes-AxtonSmith.docx
-@@ -0,0 +1,4 @@
-+Fundamentals Module V1
-+The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
-+Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
-+Negative cases will be any negative index and indexes beyond the max length of the string.
-diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
-new file mode 100644
-index 0000000..07098b6
-Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx differ
-diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
-new file mode 100644
-index 0000000..70aef67
-Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx differ
-diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
-new file mode 100644
-index 0000000..70aef67
-Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx differ
-diff --git a/fundamentals/code/.vs/project/v17/.suo b/fundamentals/code/.vs/project/v17/.suo
-new file mode 100644
-index 0000000..bcfd53a
-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/.suo differ
-diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/fundamentals/code/.vs/project/v17/Browse.VC.db
-new file mode 100644
-index 0000000..bcda23d
-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Browse.VC.db differ
-diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/fundamentals/code/.vs/project/v17/Solution.VC.db
-new file mode 100644
-index 0000000..4478989
-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Solution.VC.db differ
-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
-new file mode 100644
-index 0000000..14c2062
-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch differ
-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
-new file mode 100644
-index 0000000..eb24263
-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch differ
-diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
-new file mode 100644
-index 0000000..1d0afbc
-Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch differ
-diff --git a/fundamentals/code/fundamentals.c b/fundamentals/code/fundamentals.c
-new file mode 100644
-index 0000000..1215375
---- /dev/null
-+++ b/fundamentals/code/fundamentals.c
-@@ -0,0 +1,40 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#define NUM_INPUT_SIZE 10
-+
-+#include "fundamentals.h"
-+
-+// Takes a string input from user, then an index number and returns the character at that index of the string
-+void fundamentals() {
-+/* Version 1 */
-+	printf("*** Start of Indexing Strings Demo ***\n");
-+	char buffer1[BUFFER_SIZE];
-+	char numInput[NUM_INPUT_SIZE];
-+	size_t position;
-+	do
-+	{
-+		printf("Type not empty string (q - to quit):\n");
-+		fgets(buffer1, BUFFER_SIZE, stdin);
-+		buffer1[strlen(buffer1) - 1] = '\0';
-+		if (strcmp(buffer1, "q") != 0)
-+		{
-+			printf("Type the character position within the string:\n");
-+			fgets(numInput, NUM_INPUT_SIZE, stdin);
-+			numInput[strlen(numInput) - 1] = '\0';
-+			position = atoi(numInput);
-+			if (position >= strlen(buffer1))
-+			{
-+				position = strlen(buffer1) - 1;
-+				printf("Too big... Position reduced to max. available\n");
-+			}
-+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
-+		}
-+	} while (strcmp(buffer1, "q") != 0);
-+	printf("*** End of Indexing Strings Demo ***\n\n");
-+
-+	/* Version 2 */
-+	//>> insert here
-+
-+	/* Version 3 */
-+	//>> insert here
-+}
-\ No newline at end of file
-diff --git a/fundamentals/code/fundamentals.h b/fundamentals/code/fundamentals.h
-new file mode 100644
-index 0000000..14a6f4f
---- /dev/null
-+++ b/fundamentals/code/fundamentals.h
-@@ -0,0 +1,11 @@
-+#ifndef _FUNDAMENTALS_H_
-+#define _FUNDAMENTALS_H_
-+
-+#include <stdio.h>
-+#include <stdlib.h>
-+#include <string.h>
-+
-+// Takes a string input from user, then an index number and returns the character at that index of the string
-+void fundamentals(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/fundamentals/code/main.c b/fundamentals/code/main.c
-new file mode 100644
-index 0000000..1225e71
---- /dev/null
-+++ b/fundamentals/code/main.c
-@@ -0,0 +1,7 @@
-+#include "fundamentals.h"
-+
-+int main(void)
-+{
-+	fundamentals();
-+	return 0;
-+}
-\ No newline at end of file
-diff --git a/fundamentals/code/project.sln b/fundamentals/code/project.sln
-new file mode 100644
-index 0000000..0a8bb0d
---- /dev/null
-+++ b/fundamentals/code/project.sln
-@@ -0,0 +1,31 @@
-+ï»¿
-+Microsoft Visual Studio Solution File, Format Version 12.00
-+# Visual Studio Version 17
-+VisualStudioVersion = 17.8.34322.80
-+MinimumVisualStudioVersion = 10.0.40219.1
-+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "project", "project.vcxproj", "{AF362EDA-E3C1-4C36-9746-825F3A16C279}"
-+EndProject
-+Global
-+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
-+		Debug|x64 = Debug|x64
-+		Debug|x86 = Debug|x86
-+		Release|x64 = Release|x64
-+		Release|x86 = Release|x86
-+	EndGlobalSection
-+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.ActiveCfg = Debug|x64
-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.Build.0 = Debug|x64
-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.ActiveCfg = Debug|Win32
-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.Build.0 = Debug|Win32
-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.ActiveCfg = Release|x64
-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.Build.0 = Release|x64
-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.ActiveCfg = Release|Win32
-+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.Build.0 = Release|Win32
-+	EndGlobalSection
-+	GlobalSection(SolutionProperties) = preSolution
-+		HideSolutionNode = FALSE
-+	EndGlobalSection
-+	GlobalSection(ExtensibilityGlobals) = postSolution
-+		SolutionGuid = {189AD194-2992-420A-9AC7-B6C34003EBD9}
-+	EndGlobalSection
-+EndGlobal
-diff --git a/fundamentals/code/project.vcxproj b/fundamentals/code/project.vcxproj
-new file mode 100644
-index 0000000..b4a7699
---- /dev/null
-+++ b/fundamentals/code/project.vcxproj
-@@ -0,0 +1,139 @@
-+<?xml version="1.0" encoding="utf-8"?>
-+<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-+  <ItemGroup Label="ProjectConfigurations">
-+    <ProjectConfiguration Include="Debug|Win32">
-+      <Configuration>Debug</Configuration>
-+      <Platform>Win32</Platform>
-+    </ProjectConfiguration>
-+    <ProjectConfiguration Include="Release|Win32">
-+      <Configuration>Release</Configuration>
-+      <Platform>Win32</Platform>
-+    </ProjectConfiguration>
-+    <ProjectConfiguration Include="Debug|x64">
-+      <Configuration>Debug</Configuration>
-+      <Platform>x64</Platform>
-+    </ProjectConfiguration>
-+    <ProjectConfiguration Include="Release|x64">
-+      <Configuration>Release</Configuration>
-+      <Platform>x64</Platform>
-+    </ProjectConfiguration>
-+  </ItemGroup>
-+  <PropertyGroup Label="Globals">
-+    <VCProjectVersion>17.0</VCProjectVersion>
-+    <Keyword>Win32Proj</Keyword>
-+    <ProjectGuid>{af362eda-e3c1-4c36-9746-825f3a16c279}</ProjectGuid>
-+    <RootNamespace>project</RootNamespace>
-+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
-+  </PropertyGroup>
-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
-+    <ConfigurationType>Application</ConfigurationType>
-+    <UseDebugLibraries>true</UseDebugLibraries>
-+    <PlatformToolset>v143</PlatformToolset>
-+    <CharacterSet>Unicode</CharacterSet>
-+  </PropertyGroup>
-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
-+    <ConfigurationType>Application</ConfigurationType>
-+    <UseDebugLibraries>false</UseDebugLibraries>
-+    <PlatformToolset>v143</PlatformToolset>
-+    <WholeProgramOptimization>true</WholeProgramOptimization>
-+    <CharacterSet>Unicode</CharacterSet>
-+  </PropertyGroup>
-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
-+    <ConfigurationType>Application</ConfigurationType>
-+    <UseDebugLibraries>true</UseDebugLibraries>
-+    <PlatformToolset>v143</PlatformToolset>
-+    <CharacterSet>Unicode</CharacterSet>
-+  </PropertyGroup>
-+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
-+    <ConfigurationType>Application</ConfigurationType>
-+    <UseDebugLibraries>false</UseDebugLibraries>
-+    <PlatformToolset>v143</PlatformToolset>
-+    <WholeProgramOptimization>true</WholeProgramOptimization>
-+    <CharacterSet>Unicode</CharacterSet>
-+  </PropertyGroup>
-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
-+  <ImportGroup Label="ExtensionSettings">
-+  </ImportGroup>
-+  <ImportGroup Label="Shared">
-+  </ImportGroup>
-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-+  </ImportGroup>
-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-+  </ImportGroup>
-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-+  </ImportGroup>
-+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
-+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-+  </ImportGroup>
-+  <PropertyGroup Label="UserMacros" />
-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
-+    <ClCompile>
-+      <WarningLevel>Level3</WarningLevel>
-+      <SDLCheck>true</SDLCheck>
-+      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-+      <ConformanceMode>true</ConformanceMode>
-+    </ClCompile>
-+    <Link>
-+      <SubSystem>Console</SubSystem>
-+      <GenerateDebugInformation>true</GenerateDebugInformation>
-+    </Link>
-+  </ItemDefinitionGroup>
-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
-+    <ClCompile>
-+      <WarningLevel>Level3</WarningLevel>
-+      <FunctionLevelLinking>true</FunctionLevelLinking>
-+      <IntrinsicFunctions>true</IntrinsicFunctions>
-+      <SDLCheck>true</SDLCheck>
-+      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-+      <ConformanceMode>true</ConformanceMode>
-+    </ClCompile>
-+    <Link>
-+      <SubSystem>Console</SubSystem>
-+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
-+      <OptimizeReferences>true</OptimizeReferences>
-+      <GenerateDebugInformation>true</GenerateDebugInformation>
-+    </Link>
-+  </ItemDefinitionGroup>
-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
-+    <ClCompile>
-+      <WarningLevel>Level3</WarningLevel>
-+      <SDLCheck>true</SDLCheck>
-+      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-+      <ConformanceMode>true</ConformanceMode>
-+    </ClCompile>
-+    <Link>
-+      <SubSystem>Console</SubSystem>
-+      <GenerateDebugInformation>true</GenerateDebugInformation>
-+    </Link>
-+  </ItemDefinitionGroup>
-+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
-+    <ClCompile>
-+      <WarningLevel>Level3</WarningLevel>
-+      <FunctionLevelLinking>true</FunctionLevelLinking>
-+      <IntrinsicFunctions>true</IntrinsicFunctions>
-+      <SDLCheck>true</SDLCheck>
-+      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-+      <ConformanceMode>true</ConformanceMode>
-+    </ClCompile>
-+    <Link>
-+      <SubSystem>Console</SubSystem>
-+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
-+      <OptimizeReferences>true</OptimizeReferences>
-+      <GenerateDebugInformation>true</GenerateDebugInformation>
-+    </Link>
-+  </ItemDefinitionGroup>
-+  <ItemGroup>
-+    <ClCompile Include="fundamentals.c" />
-+    <ClCompile Include="main.c" />
-+  </ItemGroup>
-+  <ItemGroup>
-+    <ClInclude Include="fundamentals.h" />
-+  </ItemGroup>
-+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
-+  <ImportGroup Label="ExtensionTargets">
-+  </ImportGroup>
-+</Project>
-\ No newline at end of file
-diff --git a/fundamentals/code/project.vcxproj.filters b/fundamentals/code/project.vcxproj.filters
-new file mode 100644
-index 0000000..262ef51
---- /dev/null
-+++ b/fundamentals/code/project.vcxproj.filters
-@@ -0,0 +1,30 @@
-+ï»¿<?xml version="1.0" encoding="utf-8"?>
-+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-+  <ItemGroup>
-+    <Filter Include="Source Files">
-+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
-+      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
-+    </Filter>
-+    <Filter Include="Header Files">
-+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
-+      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
-+    </Filter>
-+    <Filter Include="Resource Files">
-+      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
-+      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
-+    </Filter>
-+  </ItemGroup>
-+  <ItemGroup>
-+    <ClCompile Include="fundamentals.c">
-+      <Filter>Source Files</Filter>
-+    </ClCompile>
-+    <ClCompile Include="main.c">
-+      <Filter>Source Files</Filter>
-+    </ClCompile>
-+  </ItemGroup>
-+  <ItemGroup>
-+    <ClInclude Include="fundamentals.h">
-+      <Filter>Source Files</Filter>
-+    </ClInclude>
-+  </ItemGroup>
-+</Project>
-\ No newline at end of file
-diff --git a/fundamentals/code/project.vcxproj.user b/fundamentals/code/project.vcxproj.user
-new file mode 100644
-index 0000000..88a5509
---- /dev/null
-+++ b/fundamentals/code/project.vcxproj.user
-@@ -0,0 +1,4 @@
-+ï»¿<?xml version="1.0" encoding="utf-8"?>
-+<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-+  <PropertyGroup />
-+</Project>
-\ No newline at end of file
-diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/fundamentals/code/x64/Debug/fundamentals.obj
-new file mode 100644
-index 0000000..861a383
-Binary files /dev/null and b/fundamentals/code/x64/Debug/fundamentals.obj differ
-diff --git a/fundamentals/code/x64/Debug/main.obj b/fundamentals/code/x64/Debug/main.obj
-new file mode 100644
-index 0000000..412ddd8
-Binary files /dev/null and b/fundamentals/code/x64/Debug/main.obj differ
-diff --git a/fundamentals/code/x64/Debug/project.exe b/fundamentals/code/x64/Debug/project.exe
-new file mode 100644
-index 0000000..96f3f7c
-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.exe differ
-diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/fundamentals/code/x64/Debug/project.exe.recipe
-new file mode 100644
-index 0000000..d15bad6
---- /dev/null
-+++ b/fundamentals/code/x64/Debug/project.exe.recipe
-@@ -0,0 +1,11 @@
-+ï»¿<?xml version="1.0" encoding="utf-8"?>
-+<Project>
-+  <ProjectOutputs>
-+    <ProjectOutput>
-+      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe</FullPath>
-+    </ProjectOutput>
-+  </ProjectOutputs>
-+  <ContentFiles />
-+  <SatelliteDlls />
-+  <NonRecipeFileRefs />
-+</Project>
-\ No newline at end of file
-diff --git a/fundamentals/code/x64/Debug/project.ilk b/fundamentals/code/x64/Debug/project.ilk
-new file mode 100644
-index 0000000..ca8297e
-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.ilk differ
-diff --git a/fundamentals/code/x64/Debug/project.log b/fundamentals/code/x64/Debug/project.log
-new file mode 100644
-index 0000000..46cbcf7
---- /dev/null
-+++ b/fundamentals/code/x64/Debug/project.log
-@@ -0,0 +1,4 @@
-+ï»¿  fundamentals.c
-+  main.c
-+  Generating Code...
-+  project.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
-diff --git a/fundamentals/code/x64/Debug/project.pdb b/fundamentals/code/x64/Debug/project.pdb
-new file mode 100644
-index 0000000..f4c9944
-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.pdb differ
-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
-new file mode 100644
-index 0000000..8ce9c43
-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog differ
-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
-new file mode 100644
-index 0000000..2466d33
-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog differ
-diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
-new file mode 100644
-index 0000000..a78224f
-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog differ
-diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
-new file mode 100644
-index 0000000..3b8784b
---- /dev/null
-+++ b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
-@@ -0,0 +1,2 @@
-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\fundamentals.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\fundamentals.obj
-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\main.obj
-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
-new file mode 100644
-index 0000000..86df9f0
-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog differ
-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
-new file mode 100644
-index 0000000..7a2ed43
-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog differ
-diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
-new file mode 100644
-index 0000000..a4ba5a7
-Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog differ
-diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
-new file mode 100644
-index 0000000..abb6863
---- /dev/null
-+++ b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
-@@ -0,0 +1,2 @@
-+PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
-+Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\|
-diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
-new file mode 100644
-index 0000000..3ccaa35
---- /dev/null
-+++ b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
-@@ -0,0 +1,2 @@
-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\fundamentals\v1\project\x64\Debug\project.exe
-+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
-diff --git a/fundamentals/code/x64/Debug/vc143.idb b/fundamentals/code/x64/Debug/vc143.idb
-new file mode 100644
-index 0000000..6700a8c
-Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.idb differ
-diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/fundamentals/code/x64/Debug/vc143.pdb
-new file mode 100644
-index 0000000..88847b7
-Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.pdb differ
-diff --git a/fundamentals/fundamentals-test-cases.xlsx b/fundamentals/fundamentals-test-cases.xlsx
-new file mode 100644
-index 0000000..d625c15
-Binary files /dev/null and b/fundamentals/fundamentals-test-cases.xlsx differ
-diff --git a/fundamentals/fundamentals.c b/fundamentals/fundamentals.c
-new file mode 100644
-index 0000000..172438a
---- /dev/null
-+++ b/fundamentals/fundamentals.c
-@@ -0,0 +1,16 @@
-+#include "fundamentals.h"
-+
-+void fundamentals() {
-+/* Version 1 */
-+>> insert here
-+
-+
-+/* Version 2 */
-+>> insert here
-+
-+
-+/* Version 3 */
-+>> insert here
-+
-+
-+}
-\ No newline at end of file
-diff --git a/fundamentals/fundamentals_header.png b/fundamentals/fundamentals_header.png
-new file mode 100644
-index 0000000..aae2842
-Binary files /dev/null and b/fundamentals/fundamentals_header.png differ
-diff --git a/fundamentals/fundamentals_v1.png b/fundamentals/fundamentals_v1.png
-new file mode 100644
-index 0000000..0f519ca
-Binary files /dev/null and b/fundamentals/fundamentals_v1.png differ
-diff --git a/fundamentals/fundamentals_v2.png b/fundamentals/fundamentals_v2.png
-new file mode 100644
-index 0000000..9bc0381
-Binary files /dev/null and b/fundamentals/fundamentals_v2.png differ
-diff --git a/fundamentals/fundamentals_v3.png b/fundamentals/fundamentals_v3.png
-new file mode 100644
-index 0000000..b390188
-Binary files /dev/null and b/fundamentals/fundamentals_v3.png differ
-diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/fundamentals/v1/PM-Notes-AxtonSmith.docx
-new file mode 100644
-index 0000000..acc0ce8
---- /dev/null
-+++ b/fundamentals/v1/PM-Notes-AxtonSmith.docx
-@@ -0,0 +1,4 @@
-+Fundamentals Module V1
-+The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
-+Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
-+Negative cases will be any indexes beyond the max length of the string.
-diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/fundamentals/v1/fundamentals-test-cases.xlsx
-new file mode 100644
-index 0000000..35c1eda
-Binary files /dev/null and b/fundamentals/v1/fundamentals-test-cases.xlsx differ
-diff --git a/fundamentals/v1/fundamentals.c b/fundamentals/v1/fundamentals.c
-new file mode 100644
-index 0000000..1215375
---- /dev/null
-+++ b/fundamentals/v1/fundamentals.c
-@@ -0,0 +1,40 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#define NUM_INPUT_SIZE 10
-+
-+#include "fundamentals.h"
-+
-+// Takes a string input from user, then an index number and returns the character at that index of the string
-+void fundamentals() {
-+/* Version 1 */
-+	printf("*** Start of Indexing Strings Demo ***\n");
-+	char buffer1[BUFFER_SIZE];
-+	char numInput[NUM_INPUT_SIZE];
-+	size_t position;
-+	do
-+	{
-+		printf("Type not empty string (q - to quit):\n");
-+		fgets(buffer1, BUFFER_SIZE, stdin);
-+		buffer1[strlen(buffer1) - 1] = '\0';
-+		if (strcmp(buffer1, "q") != 0)
-+		{
-+			printf("Type the character position within the string:\n");
-+			fgets(numInput, NUM_INPUT_SIZE, stdin);
-+			numInput[strlen(numInput) - 1] = '\0';
-+			position = atoi(numInput);
-+			if (position >= strlen(buffer1))
-+			{
-+				position = strlen(buffer1) - 1;
-+				printf("Too big... Position reduced to max. available\n");
-+			}
-+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
-+		}
-+	} while (strcmp(buffer1, "q") != 0);
-+	printf("*** End of Indexing Strings Demo ***\n\n");
-+
-+	/* Version 2 */
-+	//>> insert here
-+
-+	/* Version 3 */
-+	//>> insert here
-+}
-\ No newline at end of file
-diff --git a/fundamentals/v1/fundamentals.h b/fundamentals/v1/fundamentals.h
-new file mode 100644
-index 0000000..14a6f4f
---- /dev/null
-+++ b/fundamentals/v1/fundamentals.h
-@@ -0,0 +1,11 @@
-+#ifndef _FUNDAMENTALS_H_
-+#define _FUNDAMENTALS_H_
-+
-+#include <stdio.h>
-+#include <stdlib.h>
-+#include <string.h>
-+
-+// Takes a string input from user, then an index number and returns the character at that index of the string
-+void fundamentals(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/fundamentals/v1/main.c b/fundamentals/v1/main.c
-new file mode 100644
-index 0000000..1225e71
---- /dev/null
-+++ b/fundamentals/v1/main.c
-@@ -0,0 +1,7 @@
-+#include "fundamentals.h"
-+
-+int main(void)
-+{
-+	fundamentals();
-+	return 0;
-+}
-\ No newline at end of file
-diff --git a/main/converting.c b/main/converting.c
-new file mode 100644
-index 0000000..dc92171
---- /dev/null
-+++ b/main/converting.c
-@@ -0,0 +1,34 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+
-+#include "converting.h"
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting() {
-+/* Version 1 */
-+	printf("*** Start of Converting Strings to int Demo ***\n");
-+	char intString[BUFFER_SIZE];
-+	int intNumber;
-+	do
-+	{
-+		printf("Type an int numeric string (q - to quit):\n");
-+		fgets(intString, BUFFER_SIZE, stdin);
-+		intString[strlen(intString) - 1] = '\0';
-+		if (strcmp(intString, "q") != 0)
-+		{
-+			intNumber = atoi(intString);
-+			printf("Converted number is %d\n", intNumber);
-+		}
-+	}
-+	while (strcmp(intString, "q") != 0);
-+	printf("*** End of Converting Strings to int Demo ***\n\n");
-+
-+/* Version 2 */
-+//>> insert here
-+
-+
-+/* Version 3 */
-+//>> insert here
-+
-+
-+}
-diff --git a/main/converting.h b/main/converting.h
-new file mode 100644
-index 0000000..94e86ab
---- /dev/null
-+++ b/main/converting.h
-@@ -0,0 +1,11 @@
-+#ifndef _CONVERTING_H_
-+#define _CONVERTING_H_
-+
-+#include <stdio.h>
-+#include <string.h>
-+#include <stdlib.h>
-+
-+// User inputs a number as a string, then it is returned as an int
-+void converting(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/main/fundamentals.c b/main/fundamentals.c
-new file mode 100644
-index 0000000..1215375
---- /dev/null
-+++ b/main/fundamentals.c
-@@ -0,0 +1,40 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#define NUM_INPUT_SIZE 10
-+
-+#include "fundamentals.h"
-+
-+// Takes a string input from user, then an index number and returns the character at that index of the string
-+void fundamentals() {
-+/* Version 1 */
-+	printf("*** Start of Indexing Strings Demo ***\n");
-+	char buffer1[BUFFER_SIZE];
-+	char numInput[NUM_INPUT_SIZE];
-+	size_t position;
-+	do
-+	{
-+		printf("Type not empty string (q - to quit):\n");
-+		fgets(buffer1, BUFFER_SIZE, stdin);
-+		buffer1[strlen(buffer1) - 1] = '\0';
-+		if (strcmp(buffer1, "q") != 0)
-+		{
-+			printf("Type the character position within the string:\n");
-+			fgets(numInput, NUM_INPUT_SIZE, stdin);
-+			numInput[strlen(numInput) - 1] = '\0';
-+			position = atoi(numInput);
-+			if (position >= strlen(buffer1))
-+			{
-+				position = strlen(buffer1) - 1;
-+				printf("Too big... Position reduced to max. available\n");
-+			}
-+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
-+		}
-+	} while (strcmp(buffer1, "q") != 0);
-+	printf("*** End of Indexing Strings Demo ***\n\n");
-+
-+	/* Version 2 */
-+	//>> insert here
-+
-+	/* Version 3 */
-+	//>> insert here
-+}
-\ No newline at end of file
-diff --git a/main/fundamentals.h b/main/fundamentals.h
-new file mode 100644
-index 0000000..14a6f4f
---- /dev/null
-+++ b/main/fundamentals.h
-@@ -0,0 +1,11 @@
-+#ifndef _FUNDAMENTALS_H_
-+#define _FUNDAMENTALS_H_
-+
-+#include <stdio.h>
-+#include <stdlib.h>
-+#include <string.h>
-+
-+// Takes a string input from user, then an index number and returns the character at that index of the string
-+void fundamentals(void);
-+
-+#endif
-\ No newline at end of file
-diff --git a/main/main.c b/main/main.c
-new file mode 100644
-index 0000000..5062fbb
---- /dev/null
-+++ b/main/main.c
-@@ -0,0 +1,12 @@
-+#include "fundamentals.h"
-+#include "manipulating.h"
-+#include "tokenizing.h"
-+#include "converting.h"
-+
-+int main(void)
-+{
-+	fundamentals();
-+	manipulating();
-+	tokenizing();
-+	converting();
-+}
-diff --git a/main/manipulating.c b/main/manipulating.c
-new file mode 100644
-index 0000000..3de4a55
---- /dev/null
-+++ b/main/manipulating.c
-@@ -0,0 +1,28 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#include "manipulating.h"
-+
-+// V1
-+
-+void manipulating(void) {
-+	printf("*** Start if Concatenating Strings Demo ***\n");
-+	char string1[BUFFER_SIZE];
-+	char string2[BUFFER_SIZE];
-+	do {
-+		//Prompt for first string
-+		printf("Type the 1st string (q - to quit):\n");
-+		fgets(string1, BUFFER_SIZE, stdin);
-+		string1[strlen(string1) - 1] = '\0';
-+		//if q was entered quit program
-+		if ((strcmp(string1, "q") != 0)) {
-+			printf("Type the 2nd string:\n");
-+			//promt for 2nd string
-+			fgets(string2, BUFFER_SIZE, stdin);
-+			string2[strlen(string2) - 1] = '\0';
-+			//concatenate string
-+			strcat(string1, string2);
-+			printf("Concatenated string is \'%s\'\n", string1);
-+		}
-+	} while (strcmp(string1, "q") != 0);
-+	printf("*** End of Concatenating Strings Demo ***\n\n");
-+}
-\ No newline at end of file
-diff --git a/main/manipulating.h b/main/manipulating.h
-new file mode 100644
-index 0000000..434f748
---- /dev/null
-+++ b/main/manipulating.h
-@@ -0,0 +1,6 @@
-+#ifndef _MANIPULATING_H_
-+#define _MANIPULATING_H_
-+#include <stdio.h>
-+#include <string.h>
-+void manipulating(void);
-+#endif
-\ No newline at end of file
-diff --git a/main/tokenizing.c b/main/tokenizing.c
-new file mode 100644
-index 0000000..97680d4
---- /dev/null
-+++ b/main/tokenizing.c
-@@ -0,0 +1,42 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 300
-+#include "tokenizing.h"
-+
-+/* Version 1 */
-+void tokenizing(void)
-+{
-+	printf("*** Start of Tokenizing Words Demo ***\n");
-+	char words[BUFFER_SIZE];
-+	char* nextWord = NULL;
-+	int wordsCounter;
-+	do {
-+		printf("Type a few words seperated by space  (q - to quit):\n");
-+		fgets(words, BUFFER_SIZE, stdin);
-+		words[strlen(words) - 1] = '\0';
-+		if (strcmp(words, "q") != 0) {
-+			nextWord = strtok(words, " ");
-+			wordsCounter = 1;
-+			while(nextWord) {
-+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
-+				nextWord = strtok(NULL, " ");
-+
-+			}
-+		}
-+	} while (strcmp(words, "q") != 0);
-+	printf("*** End of Tokenizing Words Demo ***\n\n");
-+
-+}
-+
-+
-+
-+
-+
-+/* Version 2 */
-+
-+
-+
-+/* Version 3 */
-+
-+
-+
-+
-diff --git a/main/tokenizing.h b/main/tokenizing.h
-new file mode 100644
-index 0000000..d377740
---- /dev/null
-+++ b/main/tokenizing.h
-@@ -0,0 +1,10 @@
-+#ifndef _TOKENIZING_H
-+#define _TOKENIZING_H
-+
-+#include <stdio.h>
-+#include <string.h>
-+
-+void tokenizing(void);
-+
-+#endif 
-+
-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
-new file mode 100644
-index 0000000..ce82fd8
-Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo differ
-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
-new file mode 100644
-index 0000000..95cfcc7
-Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db differ
-diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
-new file mode 100644
-index 0000000..b2ba1dc
-Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db differ
-diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
-new file mode 100644
-index 0000000..6a221a6
---- /dev/null
-+++ b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx	
-@@ -0,0 +1,9 @@
-+Manipulation Module
-+
-+This module concatenates 2 strings sized to a defined macro.
-+
-+Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
-+
-+An input of `q' was tested to ensure it would result in ending the program.
-+
-+A string that is greater than the initialized memory was tested to ensure it would not crash the program.
-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
-new file mode 100644
-index 0000000..1bcc78d
---- /dev/null
-+++ b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c	
-@@ -0,0 +1,5 @@
-+int main(void) {
-+
-+	manipulating();
-+	return 0;
-+}
-\ No newline at end of file
-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/Manipulation V1/Manipulation V1/manipulating.c
-new file mode 100644
-index 0000000..3de4a55
---- /dev/null
-+++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.c	
-@@ -0,0 +1,28 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 80
-+#include "manipulating.h"
-+
-+// V1
-+
-+void manipulating(void) {
-+	printf("*** Start if Concatenating Strings Demo ***\n");
-+	char string1[BUFFER_SIZE];
-+	char string2[BUFFER_SIZE];
-+	do {
-+		//Prompt for first string
-+		printf("Type the 1st string (q - to quit):\n");
-+		fgets(string1, BUFFER_SIZE, stdin);
-+		string1[strlen(string1) - 1] = '\0';
-+		//if q was entered quit program
-+		if ((strcmp(string1, "q") != 0)) {
-+			printf("Type the 2nd string:\n");
-+			//promt for 2nd string
-+			fgets(string2, BUFFER_SIZE, stdin);
-+			string2[strlen(string2) - 1] = '\0';
-+			//concatenate string
-+			strcat(string1, string2);
-+			printf("Concatenated string is \'%s\'\n", string1);
-+		}
-+	} while (strcmp(string1, "q") != 0);
-+	printf("*** End of Concatenating Strings Demo ***\n\n");
-+}
-\ No newline at end of file
-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/Manipulation V1/Manipulation V1/manipulating.h
-new file mode 100644
-index 0000000..434f748
---- /dev/null
-+++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.h	
-@@ -0,0 +1,6 @@
-+#ifndef _MANIPULATING_H_
-+#define _MANIPULATING_H_
-+#include <stdio.h>
-+#include <string.h>
-+void manipulating(void);
-+#endif
-\ No newline at end of file
-diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
-new file mode 100644
-index 0000000..de4db70
-Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx differ
-diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/tokenizing/PM-Notes-DarianGrijalba.docx
-new file mode 100644
-index 0000000..79615b7
---- /dev/null
-+++ b/tokenizing/PM-Notes-DarianGrijalba.docx
-@@ -0,0 +1,35 @@
-+                                 Tokenizing v1
-+Test Cases
-+*** Start of Tokenizing Words Demo ***
-+Type a few words separated by space  (q - to quit):
-+Inputs: "The"
-+Outputs: Word #1 is The
-+Type a few words separated by space  (q - to quit):
-+Inputs: "q"
-+*** End of Tokenizing Words Demo ***
-+
-+*** Start of Tokenizing Words Demo ***
-+Type a few words separated by space  (q - to quit):
-+Inputs: "Have A Good Day"
-+Outputs: Word #1 is Have
-+	   Word #2 is A
-+	   Word #3 is Good
-+	   Word #4 is Day
-+Type a few words separated by space  (q - to quit):
-+Inputs: "q"
-+*** End of Tokenizing Words Demo ***
-+
-+*** Start of Tokenizing Words Demo ***
-+Type a few words separated by space  (q - to quit):
-+Inputs: "HaveA                                Gooooooooooooood                               Day"
-+Outputs: Word #1 is HaveA
-+	   Word #2 is Goooooooooooooood
-+	   Word #3 is Day
-+Type a few words separated by space  (q - to quit):
-+Inputs: "q"
-+*** End of Tokenizing Words Demo ***
-+
-+Basically will calculate the amount of words the user inputted and list them out one by one 
-+
-+
-+
-diff --git a/tokenizing/tokenizing.c b/tokenizing/tokenizing.c
-new file mode 100644
-index 0000000..cd11fd7
---- /dev/null
-+++ b/tokenizing/tokenizing.c
-@@ -0,0 +1,42 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+#define BUFFER_SIZE 300
-+#include "Tokenzing.h"
-+
-+/* Version 1 */
-+void tokenizing(void)
-+{
-+	printf("*** Start of Tokenizing Words Demo ***\n");
-+	char words[BUFFER_SIZE];
-+	char* nextWord = NULL;
-+	int wordsCounter;
-+	do {
-+		printf("Type a few words seperated by space  (q - to quit):\n");
-+		fgets(words, BUFFER_SIZE, stdin);
-+		words[strlen(words) - 1] = '\0';
-+		if (strcmp(words, "q") != 0) {
-+			nextWord = strtok(words, " ");
-+			wordsCounter = 1;
-+			while(nextWord) {
-+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
-+				nextWord = strtok(NULL, " ");
-+
-+			}
-+		}
-+	} while (strcmp(words, "q") != 0);
-+	printf("*** End of Tokenizing Words Demo ***\n\n");
-+
-+}
-+
-+
-+
-+
-+
-+/* Version 2 */
-+
-+
-+
-+/* Version 3 */
-+
-+
-+
-+
-diff --git a/tokenizing/tokenizing.h b/tokenizing/tokenizing.h
-new file mode 100644
-index 0000000..c136582
---- /dev/null
-+++ b/tokenizing/tokenizing.h
-@@ -0,0 +1,16 @@
-+#ifndef _TOKENIZING_H
-+#define _TOKENIZING_H
-+
-+#include <stdio.h>
-+#include <string.h>
-+
-+void tokenizing(void);
-+
-+int main() {
-+    // Call your tokenizing function or include it in your main function
-+    tokenizing();
-+
-+    return 0;
-+}
-+#endif 
-+
-
-commit 306f1ee35754c5c7e56bc11fb2c61f66956b2f9f
-Author: Axton Smith <axtonsmith@gmail.com>
-Date:   Wed Dec 6 21:02:16 2023 -0500
-
-    Initial commit
-
-diff --git a/README.md b/README.md
-new file mode 100644
-index 0000000..ec7a918
---- /dev/null
-+++ b/README.md
-@@ -0,0 +1,2 @@
-+# CPR101group3
-+Final project for a computer principles for programmers course
diff --git a/V2/main/converting.c b/V2/main/converting.c
deleted file mode 100644
index 9f0d0ac..0000000
--- a/V2/main/converting.c
+++ /dev/null
@@ -1,47 +0,0 @@
-#define _CRT_SECURE_NO_WARNINGS
-#define BUFFER_SIZE 80
-
-#include "converting.h"
-
-// User inputs a number as a string, then it is returned as an int
-void converting() {
-/* Version 1 */
-	printf("*** Start of Converting Strings to int Demo ***\n");
-	char intString[BUFFER_SIZE];
-	int intNumber;
-	do
-	{
-		printf("Type an int numeric string (q - to quit):\n");
-		fgets(intString, BUFFER_SIZE, stdin);
-		intString[strlen(intString) - 1] = '\0';
-		if (strcmp(intString, "q") != 0)
-		{
-			intNumber = atoi(intString);
-			printf("Converted number is %d\n", intNumber);
-		}
-	}
-	while (strcmp(intString, "q") != 0);
-	printf("*** End of Converting Strings to int Demo ***\n\n");
-
-/* Version 2 */
-	printf("*** Start of Converting Strings to double Demo ***\n");
-	char doubleString[BUFFER_SIZE];
-	double doubleNumber;
-	do
-	{
-		printf("Type the double numeric string (q - to quit):\n");
-		fgets(doubleString, BUFFER_SIZE, stdin);
-		doubleString[strlen(doubleString) - 1] = '\0';
-		if ((strcmp(doubleString, "q") != 0))
-		{
-			doubleNumber = atof(doubleString);
-			printf("Converted number is %f\n", doubleNumber);
-		}
-	} while (strcmp(doubleString, "q") != 0);
-	printf("*** End of Converting Strings to double Demo ***\n\n");
-
-/* Version 3 */
-//>> insert here
-
-
-}
diff --git a/V2/main/converting.h b/V2/main/converting.h
deleted file mode 100644
index 94e86ab..0000000
--- a/V2/main/converting.h
+++ /dev/null
@@ -1,11 +0,0 @@
-#ifndef _CONVERTING_H_
-#define _CONVERTING_H_
-
-#include <stdio.h>
-#include <string.h>
-#include <stdlib.h>
-
-// User inputs a number as a string, then it is returned as an int
-void converting(void);
-
-#endif
\ No newline at end of file
diff --git a/V2/main/fundamentals.c b/V2/main/fundamentals.c
deleted file mode 100644
index 4596c8d..0000000
--- a/V2/main/fundamentals.c
+++ /dev/null
@@ -1,49 +0,0 @@
-#define _CRT_SECURE_NO_WARNINGS
-#define BUFFER_SIZE 80
-#define NUM_INPUT_SIZE 10
-
-#include "fundamentals.h"
-
-// Takes a string input from user, then an index number and returns the character at that index of the string
-void fundamentals() {
-/* Version 1 */
-	printf("*** Start of Indexing Strings Demo ***\n");
-	char buffer1[BUFFER_SIZE];
-	char numInput[NUM_INPUT_SIZE];
-	size_t position;
-	do
-	{
-		printf("Type not empty string (q - to quit):\n");
-		fgets(buffer1, BUFFER_SIZE, stdin);
-		buffer1[strlen(buffer1) - 1] = '\0';
-		if (strcmp(buffer1, "q") != 0)
-		{
-			printf("Type the character position within the string:\n");
-			fgets(numInput, NUM_INPUT_SIZE, stdin);
-			numInput[strlen(numInput) - 1] = '\0';
-			position = atoi(numInput);
-			if (position >= strlen(buffer1))
-			{
-				position = strlen(buffer1) - 1;
-				printf("Too big... Position reduced to max. available\n");
-			}
-			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
-		}
-	} while (strcmp(buffer1, "q") != 0);
-	printf("*** End of Indexing Strings Demo ***\n\n");
-
-	/* Version 2 */
-	printf("*** Start of Measuring Strings Demo ***\n");
-	char buffer2[BUFFER_SIZE];
-	do {
-		printf("Type a string (q - to quit):\n");
-		fgets(buffer2, BUFFER_SIZE, stdin);
-		buffer2[strlen(buffer2) - 1] = '\0';
-		if (strcmp(buffer2, "q") != 0)
-			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
-	} while (strcmp(buffer2, "q") != 0);
-	printf("*** End of Measuring Strings Demo ***\n\n");
-
-	/* Version 3 */
-	//>> insert here
-}
\ No newline at end of file
diff --git a/V2/main/fundamentals.h b/V2/main/fundamentals.h
deleted file mode 100644
index 14a6f4f..0000000
--- a/V2/main/fundamentals.h
+++ /dev/null
@@ -1,11 +0,0 @@
-#ifndef _FUNDAMENTALS_H_
-#define _FUNDAMENTALS_H_
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-// Takes a string input from user, then an index number and returns the character at that index of the string
-void fundamentals(void);
-
-#endif
\ No newline at end of file
diff --git a/V2/manipulations/PM-Notes-Brandon-Doray.docx b/V2/manipulations/PM-Notes-Brandon-Doray.docx
deleted file mode 100644
index f3443e8..0000000
--- a/V2/manipulations/PM-Notes-Brandon-Doray.docx
+++ /dev/null
@@ -1,25 +0,0 @@
-Manipulation Module
-
-//V1
-
-This module concatenates 2 strings sized to a defined macro.
-
-Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
-
-An input of `q' was tested to ensure it would result in ending the program.
-
-A string that is greater than the initialized memory was tested to ensure it would not crash the program.
-
-//V2
-
-V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
-
-This function will only compare strings up until it hits a NULL or a char that does not match.
-
-If it hits a char that does not match, anything after that will not be considered in the comparison.
-
-The chars are evaluated using their ASCII value.
-
-The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
-
-
diff --git a/V2/manipulations/manipulatemain.c b/V2/manipulations/manipulatemain.c
deleted file mode 100644
index 1bcc78d..0000000
--- a/V2/manipulations/manipulatemain.c
+++ /dev/null
@@ -1,5 +0,0 @@
-int main(void) {
-
-	manipulating();
-	return 0;
-}
\ No newline at end of file
diff --git a/V2/manipulations/manipulating.c b/V2/manipulations/manipulating.c
deleted file mode 100644
index 7ba26cd..0000000
--- a/V2/manipulations/manipulating.c
+++ /dev/null
@@ -1,61 +0,0 @@
-#define _CRT_SECURE_NO_WARNINGS
-#define BUFFER_SIZE 80
-#include "manipulating.h"
-
-// V1
-
-void manipulating(void) {
-	printf("*** Start of Concatenating Strings Demo ***\n");
-	char string1[BUFFER_SIZE];
-	char string2[BUFFER_SIZE];
-	do {
-		//Prompt for first string
-		printf("Type the 1st string (q - to quit):\n");
-		fgets(string1, BUFFER_SIZE, stdin);
-		string1[strlen(string1) - 1] = '\0';
-		//if q was entered quit program
-		if ((strcmp(string1, "q") != 0)) {
-			printf("Type the 2nd string:\n");
-			//promt for 2nd string
-			fgets(string2, BUFFER_SIZE, stdin);
-			string2[strlen(string2) - 1] = '\0';
-			//concatenate string
-			strcat(string1, string2);
-			printf("Concatenated string is \'%s\'\n", string1);
-		}
-	} while (strcmp(string1, "q") != 0);
-	printf("*** End of Concatenating Strings Demo ***\n\n");
-
-	//V2
-	printf("***Start of Comparing Strings Demon***\n");
-	char compare1[BUFFER_SIZE];
-	char compare2[BUFFER_SIZE];
-	int result;
-	do {
-		//Receive user input for the 1st string
-		printf("Type the 1st string to compare (q - to quit):\n");
-		fgets(compare1, BUFFER_SIZE, stdin);
-		//Add an ending NULL to the 1st string
-		compare1[strlen(compare1) - 1] = '\0';
-		//Check that the user did not input 'q' to quit
-		if (strcmp(compare1, "q") != 0) {
-			//Receive user input for the 2nd string
-			printf("Type the 2nd string to compare:\n");
-			fgets(compare2, BUFFER_SIZE, stdin);
-			//Add an ending NULL to the 2nd string
-			compare2[strlen(compare2) - 1] = '\0';
-			result = strcmp(compare1, compare2);
-			//Check if the 1st string < than the 2nd string
-			if (result < 0)
-				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
-			//Check if the strings are equal
-			else if (result == 0)
-				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
-			//Check if the first string is greater than the 2nd string
-			else
-				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
-
-		}
-	} while (strcmp(compare1, "q") != 0);
-	printf("*** End of Comparing Strings Demon ***\n\n");
-}
\ No newline at end of file
diff --git a/V2/manipulations/manipulating.h b/V2/manipulations/manipulating.h
deleted file mode 100644
index 434f748..0000000
--- a/V2/manipulations/manipulating.h
+++ /dev/null
@@ -1,6 +0,0 @@
-#ifndef _MANIPULATING_H_
-#define _MANIPULATING_H_
-#include <stdio.h>
-#include <string.h>
-void manipulating(void);
-#endif
\ No newline at end of file
diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
deleted file mode 100644
index dc49fc2..0000000
Binary files a/V2/manipulations/manipulation-test-cases.xlsx and /dev/null differ
diff --git a/V2/tokenizing/Tokenizing v2 PM-notes.docx b/V2/tokenizing/Tokenizing v2 PM-notes.docx
deleted file mode 100644
index a9a5ded..0000000
--- a/V2/tokenizing/Tokenizing v2 PM-notes.docx	
+++ /dev/null
@@ -1,3 +0,0 @@
-                            Tokenizing v2 PM-notes
-Basically this was the same process as v1 and even the code of the Tokenizing v2 was  basically exactly the same as v1 just changed to every phrase in the sentence instead of every word that's it 
-                                       
diff --git a/V2/tokenizing/Tokenzing_v2_test-cases.xlsx b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx
deleted file mode 100644
index cb18ef6..0000000
Binary files a/V2/tokenizing/Tokenzing_v2_test-cases.xlsx and /dev/null differ
diff --git a/V2/tokenizing/tokenizing.c b/V2/tokenizing/tokenizing.c
deleted file mode 100644
index aa1e13a..0000000
--- a/V2/tokenizing/tokenizing.c
+++ /dev/null
@@ -1,62 +0,0 @@
-#define _CRT_SECURE_NO_WARNINGS
-#define BUFFER_SIZE 300
-#include "Tokenzing.h"
-
-/* Version 1 */
-void tokenizing(void)
-{
-	/*printf("*** Start of Tokenizing Words Demo ***\n");
-	char words[BUFFER_SIZE];
-	char* nextWord = NULL;
-	int wordsCounter;
-	do {
-		printf("Type a few words seperated by space  (q - to quit):\n");
-		fgets(words, BUFFER_SIZE, stdin);
-		words[strlen(words) - 1] = '\0';
-		if (strcmp(words, "q") != 0) {
-			nextWord = strtok(words, " ");
-			wordsCounter = 1;
-			while (nextWord) {
-				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
-				nextWord = strtok(NULL, " ");
-
-			}
-		}
-	} while (strcmp(words, "q") != 0);
-	printf("*** End of Tokenizing Words Demo ***\n\n");*/
-
-
-
-
-
-
-
-	/* Version 2 */
-	printf("*** Start of Tokenizing Words Demo ***\n");
-	char phrases[BUFFER_SIZE];
-	char* nextphrase = NULL;
-	int phrasesCounter;
-	do
-	{
-		printf("Type a few phrases seperated by space  (q - to quit):\n");
-		fgets(phrases, BUFFER_SIZE, stdin);
-		phrases[strlen(phrases) - 1] = '\0';
-		if (strcmp(phrases, "q") != 0)
-		{
-			nextphrase = strtok(phrases, " ");
-			phrasesCounter = 1;
-			while (nextphrase)
-			{
-				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
-				nextphrase = strtok(NULL, " ");
-			}
-		}
-	} while (strcmp(phrases, "q") != 0);
-	printf("*** End of Tokenizing Words Demo ***\n\n");
-
-	return 0;
-}
-
-
-
-	
diff --git a/V2/tokenizing/tokenizing.h b/V2/tokenizing/tokenizing.h
deleted file mode 100644
index d96fde1..0000000
--- a/V2/tokenizing/tokenizing.h
+++ /dev/null
@@ -1,15 +0,0 @@
-#ifndef _TOKENIZING_H
-#define _TOKENIZING_H
-
-#include <stdio.h>
-#include <string.h>
-
-void tokenizing(void);
-
-int main() {
-    // Call your tokenizing function or include it in your main function
-    tokenizing();
-
-    return 0;
-}
-#endif 
\ No newline at end of file
diff --git a/V2/Final-Project-Plan.xlsx b/V3/Final-Project-Plan.xlsx
similarity index 100%
rename from V2/Final-Project-Plan.xlsx
rename to V3/Final-Project-Plan.xlsx
diff --git a/V2/Final-Project-Test-Cases.xlsx b/V3/Final-Project-Test-Cases.xlsx
similarity index 100%
rename from V2/Final-Project-Test-Cases.xlsx
rename to V3/Final-Project-Test-Cases.xlsx
diff --git a/V2/conversions/converting.c b/V3/main/converting.c
similarity index 100%
rename from V2/conversions/converting.c
rename to V3/main/converting.c
diff --git a/V2/conversions/converting.h b/V3/main/converting.h
similarity index 100%
rename from V2/conversions/converting.h
rename to V3/main/converting.h
diff --git a/V2/fundamentals/fundamentals.c b/V3/main/fundamentals.c
similarity index 100%
rename from V2/fundamentals/fundamentals.c
rename to V3/main/fundamentals.c
diff --git a/V2/fundamentals/fundamentals.h b/V3/main/fundamentals.h
similarity index 100%
rename from V2/fundamentals/fundamentals.h
rename to V3/main/fundamentals.h
diff --git a/V2/main/main.c b/V3/main/main.c
similarity index 100%
rename from V2/main/main.c
rename to V3/main/main.c
diff --git a/V2/main/manipulating.c b/V3/main/manipulating.c
similarity index 100%
rename from V2/main/manipulating.c
rename to V3/main/manipulating.c
diff --git a/V2/main/manipulating.h b/V3/main/manipulating.h
similarity index 100%
rename from V2/main/manipulating.h
rename to V3/main/manipulating.h
diff --git a/V2/main/tokenizing.c b/V3/main/tokenizing.c
similarity index 100%
rename from V2/main/tokenizing.c
rename to V3/main/tokenizing.c
diff --git a/V2/main/tokenizing.h b/V3/main/tokenizing.h
similarity index 100%
rename from V2/main/tokenizing.h
rename to V3/main/tokenizing.h

commit 6f45f0cb9bcdfca57945e1b7a38db8e4617770b9
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Sat Dec 9 12:03:25 2023 -0500

    Add main-git-log.txt to V2

diff --git a/V2/main-git-log.txt b/V2/main-git-log.txt
new file mode 100644
index 0000000..9001aae
--- /dev/null
+++ b/V2/main-git-log.txt
@@ -0,0 +1,3600 @@
+commit 01f89458ddc774511e45d502a67641a170760617
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Sat Dec 9 00:03:26 2023 -0500
+
+    Add fundamentals module and add to main
+
+diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
+index 814fb41..b26bd94 100644
+Binary files a/V2/Final-Project-Plan.xlsx and b/V2/Final-Project-Plan.xlsx differ
+diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
+index 40e66b0..d7fe3d1 100644
+Binary files a/V2/Final-Project-Test-Cases.xlsx and b/V2/Final-Project-Test-Cases.xlsx differ
+diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
+deleted file mode 100644
+index 92459be..0000000
+Binary files a/V2/Tokenizing.zip and /dev/null differ
+diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
+deleted file mode 100644
+index 92459be..0000000
+Binary files a/V2/Tokenzing/Tokenizing.zip and /dev/null differ
+diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
+deleted file mode 100644
+index e69de29..0000000
+diff --git a/V2/fundamentals/Fundamentals Module V2.docx b/V2/fundamentals/Fundamentals Module V2.docx
+new file mode 100644
+index 0000000..f98ecba
+--- /dev/null
++++ b/V2/fundamentals/Fundamentals Module V2.docx	
+@@ -0,0 +1,3 @@
++Fundamentals Module V2
++This module tells you the length of an input string.
++Testing: To test the module, I will use varying lengths of string with and without spaces, as well as an empty string.
+diff --git a/V2/fundamentals/fundamentals-test-cases.xlsx b/V2/fundamentals/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..5ee1fc1
+Binary files /dev/null and b/V2/fundamentals/fundamentals-test-cases.xlsx differ
+diff --git a/V2/fundamentals/fundamentals.c b/V2/fundamentals/fundamentals.c
+new file mode 100644
+index 0000000..4596c8d
+--- /dev/null
++++ b/V2/fundamentals/fundamentals.c
+@@ -0,0 +1,49 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	printf("*** Start of Measuring Strings Demo ***\n");
++	char buffer2[BUFFER_SIZE];
++	do {
++		printf("Type a string (q - to quit):\n");
++		fgets(buffer2, BUFFER_SIZE, stdin);
++		buffer2[strlen(buffer2) - 1] = '\0';
++		if (strcmp(buffer2, "q") != 0)
++			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
++	} while (strcmp(buffer2, "q") != 0);
++	printf("*** End of Measuring Strings Demo ***\n\n");
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/V2/fundamentals/fundamentals.h b/V2/fundamentals/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/V2/fundamentals/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/fundamentals/main.c b/V2/fundamentals/main.c
+new file mode 100644
+index 0000000..1225e71
+--- /dev/null
++++ b/V2/fundamentals/main.c
+@@ -0,0 +1,7 @@
++#include "fundamentals.h"
++
++int main(void)
++{
++	fundamentals();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/main/fundamentals.c b/V2/main/fundamentals.c
+new file mode 100644
+index 0000000..4596c8d
+--- /dev/null
++++ b/V2/main/fundamentals.c
+@@ -0,0 +1,49 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	printf("*** Start of Measuring Strings Demo ***\n");
++	char buffer2[BUFFER_SIZE];
++	do {
++		printf("Type a string (q - to quit):\n");
++		fgets(buffer2, BUFFER_SIZE, stdin);
++		buffer2[strlen(buffer2) - 1] = '\0';
++		if (strcmp(buffer2, "q") != 0)
++			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
++	} while (strcmp(buffer2, "q") != 0);
++	printf("*** End of Measuring Strings Demo ***\n\n");
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/V2/main/fundamentals.h b/V2/main/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/V2/main/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/Tokenzing/Tokenzing.c b/V2/main/tokenizing.c
+similarity index 95%
+rename from V2/Tokenzing/Tokenzing.c
+rename to V2/main/tokenizing.c
+index 734c7c6..aa1e13a 100644
+--- a/V2/Tokenzing/Tokenzing.c
++++ b/V2/main/tokenizing.c
+@@ -1,62 +1,62 @@
+-#define _CRT_SECURE_NO_WARNINGS
+-#define BUFFER_SIZE 300
+-#include "Tokenzing.h"
+-
+-/* Version 1 */
+-void tokenizing(void)
+-{
+-	/*printf("*** Start of Tokenizing Words Demo ***\n");
+-	char words[BUFFER_SIZE];
+-	char* nextWord = NULL;
+-	int wordsCounter;
+-	do {
+-		printf("Type a few words seperated by space  (q - to quit):\n");
+-		fgets(words, BUFFER_SIZE, stdin);
+-		words[strlen(words) - 1] = '\0';
+-		if (strcmp(words, "q") != 0) {
+-			nextWord = strtok(words, " ");
+-			wordsCounter = 1;
+-			while (nextWord) {
+-				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+-				nextWord = strtok(NULL, " ");
+-
+-			}
+-		}
+-	} while (strcmp(words, "q") != 0);
+-	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+-
+-
+-
+-
+-
+-
+-
+-	/* Version 2 */
+-	printf("*** Start of Tokenizing Words Demo ***\n");
+-	char phrases[BUFFER_SIZE];
+-	char* nextphrase = NULL;
+-	int phrasesCounter;
+-	do
+-	{
+-		printf("Type a few phrases seperated by space  (q - to quit):\n");
+-		fgets(phrases, BUFFER_SIZE, stdin);
+-		phrases[strlen(phrases) - 1] = '\0';
+-		if (strcmp(phrases, "q") != 0)
+-		{
+-			nextphrase = strtok(phrases, " ");
+-			phrasesCounter = 1;
+-			while (nextphrase)
+-			{
+-				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+-				nextphrase = strtok(NULL, " ");
+-			}
+-		}
+-	} while (strcmp(phrases, "q") != 0);
+-	printf("*** End of Tokenizing Words Demo ***\n\n");
+-
+-	return 0;
+-}
+-
+-
+-
+-	
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "Tokenzing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	/*printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while (nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
++
++
++
++
++
++
++
++	/* Version 2 */
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char phrases[BUFFER_SIZE];
++	char* nextphrase = NULL;
++	int phrasesCounter;
++	do
++	{
++		printf("Type a few phrases seperated by space  (q - to quit):\n");
++		fgets(phrases, BUFFER_SIZE, stdin);
++		phrases[strlen(phrases) - 1] = '\0';
++		if (strcmp(phrases, "q") != 0)
++		{
++			nextphrase = strtok(phrases, " ");
++			phrasesCounter = 1;
++			while (nextphrase)
++			{
++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
++				nextphrase = strtok(NULL, " ");
++			}
++		}
++	} while (strcmp(phrases, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++	return 0;
++}
++
++
++
++	
+diff --git a/V2/Tokenzing/Tokenzing.h b/V2/main/tokenizing.h
+similarity index 91%
+rename from V2/Tokenzing/Tokenzing.h
+rename to V2/main/tokenizing.h
+index c8bfdb8..d96fde1 100644
+--- a/V2/Tokenzing/Tokenzing.h
++++ b/V2/main/tokenizing.h
+@@ -1,15 +1,15 @@
+-#ifndef _TOKENIZING_H
+-#define _TOKENIZING_H
+-
+-#include <stdio.h>
+-#include <string.h>
+-
+-void tokenizing(void);
+-
+-int main() {
+-    // Call your tokenizing function or include it in your main function
+-    tokenizing();
+-
+-    return 0;
+-}
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++int main() {
++    // Call your tokenizing function or include it in your main function
++    tokenizing();
++
++    return 0;
++}
+ #endif 
+\ No newline at end of file
+diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/tokenizing/Tokenizing v2 PM-notes.docx
+similarity index 100%
+rename from V2/Tokenzing/Tokenizing v2 PM-notes.docx
+rename to V2/tokenizing/Tokenizing v2 PM-notes.docx
+diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx
+similarity index 100%
+rename from V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
+rename to V2/tokenizing/Tokenzing_v2_test-cases.xlsx
+diff --git a/V2/tokenizing/tokenizing.c b/V2/tokenizing/tokenizing.c
+new file mode 100644
+index 0000000..aa1e13a
+--- /dev/null
++++ b/V2/tokenizing/tokenizing.c
+@@ -0,0 +1,62 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "Tokenzing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	/*printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while (nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
++
++
++
++
++
++
++
++	/* Version 2 */
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char phrases[BUFFER_SIZE];
++	char* nextphrase = NULL;
++	int phrasesCounter;
++	do
++	{
++		printf("Type a few phrases seperated by space  (q - to quit):\n");
++		fgets(phrases, BUFFER_SIZE, stdin);
++		phrases[strlen(phrases) - 1] = '\0';
++		if (strcmp(phrases, "q") != 0)
++		{
++			nextphrase = strtok(phrases, " ");
++			phrasesCounter = 1;
++			while (nextphrase)
++			{
++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
++				nextphrase = strtok(NULL, " ");
++			}
++		}
++	} while (strcmp(phrases, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++	return 0;
++}
++
++
++
++	
+diff --git a/V2/tokenizing/tokenizing.h b/V2/tokenizing/tokenizing.h
+new file mode 100644
+index 0000000..d96fde1
+--- /dev/null
++++ b/V2/tokenizing/tokenizing.h
+@@ -0,0 +1,15 @@
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++int main() {
++    // Call your tokenizing function or include it in your main function
++    tokenizing();
++
++    return 0;
++}
++#endif 
+\ No newline at end of file
+
+commit b3a93cc2072faf105ab22552011b51ace61475d4
+Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
+Date:   Fri Dec 8 23:48:26 2023 -0500
+
+    Add files via upload
+
+diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/Tokenzing/Tokenizing v2 PM-notes.docx
+new file mode 100644
+index 0000000..a9a5ded
+--- /dev/null
++++ b/V2/Tokenzing/Tokenizing v2 PM-notes.docx	
+@@ -0,0 +1,3 @@
++                            Tokenizing v2 PM-notes
++Basically this was the same process as v1 and even the code of the Tokenizing v2 was  basically exactly the same as v1 just changed to every phrase in the sentence instead of every word that's it 
++                                       
+diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
+new file mode 100644
+index 0000000..92459be
+Binary files /dev/null and b/V2/Tokenzing/Tokenizing.zip differ
+diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
+new file mode 100644
+index 0000000..e69de29
+diff --git a/V2/Tokenzing/Tokenzing.c b/V2/Tokenzing/Tokenzing.c
+new file mode 100644
+index 0000000..734c7c6
+--- /dev/null
++++ b/V2/Tokenzing/Tokenzing.c
+@@ -0,0 +1,62 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "Tokenzing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	/*printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while (nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");*/
++
++
++
++
++
++
++
++	/* Version 2 */
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char phrases[BUFFER_SIZE];
++	char* nextphrase = NULL;
++	int phrasesCounter;
++	do
++	{
++		printf("Type a few phrases seperated by space  (q - to quit):\n");
++		fgets(phrases, BUFFER_SIZE, stdin);
++		phrases[strlen(phrases) - 1] = '\0';
++		if (strcmp(phrases, "q") != 0)
++		{
++			nextphrase = strtok(phrases, " ");
++			phrasesCounter = 1;
++			while (nextphrase)
++			{
++				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
++				nextphrase = strtok(NULL, " ");
++			}
++		}
++	} while (strcmp(phrases, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++	return 0;
++}
++
++
++
++	
+diff --git a/V2/Tokenzing/Tokenzing.h b/V2/Tokenzing/Tokenzing.h
+new file mode 100644
+index 0000000..c8bfdb8
+--- /dev/null
++++ b/V2/Tokenzing/Tokenzing.h
+@@ -0,0 +1,15 @@
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++int main() {
++    // Call your tokenizing function or include it in your main function
++    tokenizing();
++
++    return 0;
++}
++#endif 
+\ No newline at end of file
+diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
+new file mode 100644
+index 0000000..cb18ef6
+Binary files /dev/null and b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx differ
+
+commit a59e9df43a0eb5e8a9a56bf396fa2e938c3698ad
+Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
+Date:   Fri Dec 8 23:47:17 2023 -0500
+
+    Add files via upload
+
+diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
+new file mode 100644
+index 0000000..92459be
+Binary files /dev/null and b/V2/Tokenizing.zip differ
+
+commit 91039924c420b1f4e2573bfb2371b23dc5645a4e
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 22:22:30 2023 -0500
+
+    Add manipulations and conversions test cases to Final-Project-Test-Cases.xlsx
+
+diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
+new file mode 100644
+index 0000000..814fb41
+Binary files /dev/null and b/V2/Final-Project-Plan.xlsx differ
+diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
+new file mode 100644
+index 0000000..40e66b0
+Binary files /dev/null and b/V2/Final-Project-Test-Cases.xlsx differ
+diff --git a/V2/conversions/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
+index 43a8d2a..f447878 100644
+Binary files a/V2/conversions/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
+diff --git a/V2/main/converting.c b/V2/main/converting.c
+new file mode 100644
+index 0000000..9f0d0ac
+--- /dev/null
++++ b/V2/main/converting.c
+@@ -0,0 +1,47 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++	printf("*** Start of Converting Strings to double Demo ***\n");
++	char doubleString[BUFFER_SIZE];
++	double doubleNumber;
++	do
++	{
++		printf("Type the double numeric string (q - to quit):\n");
++		fgets(doubleString, BUFFER_SIZE, stdin);
++		doubleString[strlen(doubleString) - 1] = '\0';
++		if ((strcmp(doubleString, "q") != 0))
++		{
++			doubleNumber = atof(doubleString);
++			printf("Converted number is %f\n", doubleNumber);
++		}
++	} while (strcmp(doubleString, "q") != 0);
++	printf("*** End of Converting Strings to double Demo ***\n\n");
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/V2/main/converting.h b/V2/main/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/V2/main/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/main/manipulating.c b/V2/main/manipulating.c
+new file mode 100644
+index 0000000..7ba26cd
+--- /dev/null
++++ b/V2/main/manipulating.c
+@@ -0,0 +1,61 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// V1
++
++void manipulating(void) {
++	printf("*** Start of Concatenating Strings Demo ***\n");
++	char string1[BUFFER_SIZE];
++	char string2[BUFFER_SIZE];
++	do {
++		//Prompt for first string
++		printf("Type the 1st string (q - to quit):\n");
++		fgets(string1, BUFFER_SIZE, stdin);
++		string1[strlen(string1) - 1] = '\0';
++		//if q was entered quit program
++		if ((strcmp(string1, "q") != 0)) {
++			printf("Type the 2nd string:\n");
++			//promt for 2nd string
++			fgets(string2, BUFFER_SIZE, stdin);
++			string2[strlen(string2) - 1] = '\0';
++			//concatenate string
++			strcat(string1, string2);
++			printf("Concatenated string is \'%s\'\n", string1);
++		}
++	} while (strcmp(string1, "q") != 0);
++	printf("*** End of Concatenating Strings Demo ***\n\n");
++
++	//V2
++	printf("***Start of Comparing Strings Demon***\n");
++	char compare1[BUFFER_SIZE];
++	char compare2[BUFFER_SIZE];
++	int result;
++	do {
++		//Receive user input for the 1st string
++		printf("Type the 1st string to compare (q - to quit):\n");
++		fgets(compare1, BUFFER_SIZE, stdin);
++		//Add an ending NULL to the 1st string
++		compare1[strlen(compare1) - 1] = '\0';
++		//Check that the user did not input 'q' to quit
++		if (strcmp(compare1, "q") != 0) {
++			//Receive user input for the 2nd string
++			printf("Type the 2nd string to compare:\n");
++			fgets(compare2, BUFFER_SIZE, stdin);
++			//Add an ending NULL to the 2nd string
++			compare2[strlen(compare2) - 1] = '\0';
++			result = strcmp(compare1, compare2);
++			//Check if the 1st string < than the 2nd string
++			if (result < 0)
++				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
++			//Check if the strings are equal
++			else if (result == 0)
++				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
++			//Check if the first string is greater than the 2nd string
++			else
++				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
++
++		}
++	} while (strcmp(compare1, "q") != 0);
++	printf("*** End of Comparing Strings Demon ***\n\n");
++}
+\ No newline at end of file
+diff --git a/V2/main/manipulating.h b/V2/main/manipulating.h
+new file mode 100644
+index 0000000..434f748
+--- /dev/null
++++ b/V2/main/manipulating.h
+@@ -0,0 +1,6 @@
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++#include <stdio.h>
++#include <string.h>
++void manipulating(void);
++#endif
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
+index 323e377..dc49fc2 100644
+Binary files a/V2/manipulations/manipulation-test-cases.xlsx and b/V2/manipulations/manipulation-test-cases.xlsx differ
+
+commit a43fbc4a9b1fb232cd9c5c46d4bbff26133c5afb
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 22:05:42 2023 -0500
+
+    Add conversions module to V2
+
+diff --git a/V1/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
+deleted file mode 100644
+index ea57e7e..0000000
+Binary files a/V1/conversions/conversionsV1.zip and /dev/null differ
+diff --git a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+deleted file mode 100644
+index dc61b8f..0000000
+--- a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
++++ /dev/null
+@@ -1,4 +0,0 @@
+-Conversion Module
+-This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+-Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+-We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/V1/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
+deleted file mode 100644
+index a2cffb9..0000000
+Binary files a/V1/conversions/conversionsV1/conversions-test-cases.xlsx and /dev/null differ
+diff --git a/V1/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
+deleted file mode 100644
+index dc92171..0000000
+--- a/V1/conversions/conversionsV1/converting.c
++++ /dev/null
+@@ -1,34 +0,0 @@
+-#define _CRT_SECURE_NO_WARNINGS
+-#define BUFFER_SIZE 80
+-
+-#include "converting.h"
+-
+-// User inputs a number as a string, then it is returned as an int
+-void converting() {
+-/* Version 1 */
+-	printf("*** Start of Converting Strings to int Demo ***\n");
+-	char intString[BUFFER_SIZE];
+-	int intNumber;
+-	do
+-	{
+-		printf("Type an int numeric string (q - to quit):\n");
+-		fgets(intString, BUFFER_SIZE, stdin);
+-		intString[strlen(intString) - 1] = '\0';
+-		if (strcmp(intString, "q") != 0)
+-		{
+-			intNumber = atoi(intString);
+-			printf("Converted number is %d\n", intNumber);
+-		}
+-	}
+-	while (strcmp(intString, "q") != 0);
+-	printf("*** End of Converting Strings to int Demo ***\n\n");
+-
+-/* Version 2 */
+-//>> insert here
+-
+-
+-/* Version 3 */
+-//>> insert here
+-
+-
+-}
+diff --git a/V1/conversions/converting.c b/V1/conversions/templates/converting.c
+similarity index 100%
+rename from V1/conversions/converting.c
+rename to V1/conversions/templates/converting.c
+diff --git a/V1/conversions/converting_header.png b/V1/conversions/templates/converting_header.png
+similarity index 100%
+rename from V1/conversions/converting_header.png
+rename to V1/conversions/templates/converting_header.png
+diff --git a/V1/conversions/converting_v1.png b/V1/conversions/templates/converting_v1.png
+similarity index 100%
+rename from V1/conversions/converting_v1.png
+rename to V1/conversions/templates/converting_v1.png
+diff --git a/V1/conversions/converting_v2.png b/V1/conversions/templates/converting_v2.png
+similarity index 100%
+rename from V1/conversions/converting_v2.png
+rename to V1/conversions/templates/converting_v2.png
+diff --git a/V1/conversions/converting_v3.png b/V1/conversions/templates/converting_v3.png
+similarity index 100%
+rename from V1/conversions/converting_v3.png
+rename to V1/conversions/templates/converting_v3.png
+diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/PM-Notes-AxtonSmith.docx
+similarity index 60%
+rename from V2/conversions/V1/PM-Notes-AxtonSmith.docx
+rename to V2/conversions/PM-Notes-AxtonSmith.docx
+index dc61b8f..eb38a98 100644
+--- a/V2/conversions/V1/PM-Notes-AxtonSmith.docx
++++ b/V2/conversions/PM-Notes-AxtonSmith.docx
+@@ -2,3 +2,4 @@ Conversion Module
+ This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+ Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+ We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
++Version 2 of this module will convert the input into double values.
+diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
+deleted file mode 100644
+index 94e86ab..0000000
+--- a/V2/conversions/V1/converting.h
++++ /dev/null
+@@ -1,11 +0,0 @@
+-#ifndef _CONVERTING_H_
+-#define _CONVERTING_H_
+-
+-#include <stdio.h>
+-#include <string.h>
+-#include <stdlib.h>
+-
+-// User inputs a number as a string, then it is returned as an int
+-void converting(void);
+-
+-#endif
+\ No newline at end of file
+diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
+deleted file mode 100644
+index 6a8e436..0000000
+--- a/V2/conversions/V1/main.c
++++ /dev/null
+@@ -1,7 +0,0 @@
+-#include "converting.h"
+-
+-int main(void)
+-{
+-	converting();
+-	return 0;
+-}
+\ No newline at end of file
+diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+deleted file mode 100644
+index dc61b8f..0000000
+--- a/V2/conversions/V2/PM-Notes-AxtonSmith.docx
++++ /dev/null
+@@ -1,4 +0,0 @@
+-Conversion Module
+-This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+-Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+-We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
+deleted file mode 100644
+index a2cffb9..0000000
+Binary files a/V2/conversions/V2/conversions-test-cases.xlsx and /dev/null differ
+diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
+deleted file mode 100644
+index dc92171..0000000
+--- a/V2/conversions/V2/converting.c
++++ /dev/null
+@@ -1,34 +0,0 @@
+-#define _CRT_SECURE_NO_WARNINGS
+-#define BUFFER_SIZE 80
+-
+-#include "converting.h"
+-
+-// User inputs a number as a string, then it is returned as an int
+-void converting() {
+-/* Version 1 */
+-	printf("*** Start of Converting Strings to int Demo ***\n");
+-	char intString[BUFFER_SIZE];
+-	int intNumber;
+-	do
+-	{
+-		printf("Type an int numeric string (q - to quit):\n");
+-		fgets(intString, BUFFER_SIZE, stdin);
+-		intString[strlen(intString) - 1] = '\0';
+-		if (strcmp(intString, "q") != 0)
+-		{
+-			intNumber = atoi(intString);
+-			printf("Converted number is %d\n", intNumber);
+-		}
+-	}
+-	while (strcmp(intString, "q") != 0);
+-	printf("*** End of Converting Strings to int Demo ***\n\n");
+-
+-/* Version 2 */
+-//>> insert here
+-
+-
+-/* Version 3 */
+-//>> insert here
+-
+-
+-}
+diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
+deleted file mode 100644
+index 94e86ab..0000000
+--- a/V2/conversions/V2/converting.h
++++ /dev/null
+@@ -1,11 +0,0 @@
+-#ifndef _CONVERTING_H_
+-#define _CONVERTING_H_
+-
+-#include <stdio.h>
+-#include <string.h>
+-#include <stdlib.h>
+-
+-// User inputs a number as a string, then it is returned as an int
+-void converting(void);
+-
+-#endif
+\ No newline at end of file
+diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
+deleted file mode 100644
+index 6a8e436..0000000
+--- a/V2/conversions/V2/main.c
++++ /dev/null
+@@ -1,7 +0,0 @@
+-#include "converting.h"
+-
+-int main(void)
+-{
+-	converting();
+-	return 0;
+-}
+\ No newline at end of file
+diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
+similarity index 53%
+rename from V2/conversions/V1/conversions-test-cases.xlsx
+rename to V2/conversions/conversions-test-cases.xlsx
+index a2cffb9..43a8d2a 100644
+Binary files a/V2/conversions/V1/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
+diff --git a/V2/conversions/V1/converting.c b/V2/conversions/converting.c
+similarity index 57%
+rename from V2/conversions/V1/converting.c
+rename to V2/conversions/converting.c
+index dc92171..9f0d0ac 100644
+--- a/V2/conversions/V1/converting.c
++++ b/V2/conversions/converting.c
+@@ -24,8 +24,21 @@ void converting() {
+ 	printf("*** End of Converting Strings to int Demo ***\n\n");
+ 
+ /* Version 2 */
+-//>> insert here
+-
++	printf("*** Start of Converting Strings to double Demo ***\n");
++	char doubleString[BUFFER_SIZE];
++	double doubleNumber;
++	do
++	{
++		printf("Type the double numeric string (q - to quit):\n");
++		fgets(doubleString, BUFFER_SIZE, stdin);
++		doubleString[strlen(doubleString) - 1] = '\0';
++		if ((strcmp(doubleString, "q") != 0))
++		{
++			doubleNumber = atof(doubleString);
++			printf("Converted number is %f\n", doubleNumber);
++		}
++	} while (strcmp(doubleString, "q") != 0);
++	printf("*** End of Converting Strings to double Demo ***\n\n");
+ 
+ /* Version 3 */
+ //>> insert here
+diff --git a/V1/conversions/conversionsV1/converting.h b/V2/conversions/converting.h
+similarity index 100%
+rename from V1/conversions/conversionsV1/converting.h
+rename to V2/conversions/converting.h
+diff --git a/V1/conversions/conversionsV1/main.c b/V2/conversions/main.c
+similarity index 100%
+rename from V1/conversions/conversionsV1/main.c
+rename to V2/conversions/main.c
+diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
+deleted file mode 100644
+index 88b340e..0000000
+--- a/V2/conversions/templates/converting.c
++++ /dev/null
+@@ -1,16 +0,0 @@
+-#include "converting.h"
+-
+-void converting() {
+-/* Version 1 */
+->> insert here
+-
+-
+-/* Version 2 */
+->> insert here
+-
+-
+-/* Version 3 */
+->> insert here
+-
+-
+-}
+diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
+deleted file mode 100644
+index 4ffb3a8..0000000
+Binary files a/V2/conversions/templates/converting_header.png and /dev/null differ
+diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
+deleted file mode 100644
+index 50f5734..0000000
+Binary files a/V2/conversions/templates/converting_v1.png and /dev/null differ
+diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
+deleted file mode 100644
+index edcdf1e..0000000
+Binary files a/V2/conversions/templates/converting_v2.png and /dev/null differ
+diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
+deleted file mode 100644
+index 146285f..0000000
+Binary files a/V2/conversions/templates/converting_v3.png and /dev/null differ
+
+commit d381ca2bc9cb411356a214dcb09764517b1b8dba
+Author: brandondoray01 <117381471+brandondoray01@users.noreply.github.com>
+Date:   Fri Dec 8 18:43:36 2023 -0500
+
+    Add manipulations module to V2
+
+diff --git a/V2/manipulations/PM-Notes-Brandon-Doray.docx b/V2/manipulations/PM-Notes-Brandon-Doray.docx
+new file mode 100644
+index 0000000..f3443e8
+--- /dev/null
++++ b/V2/manipulations/PM-Notes-Brandon-Doray.docx
+@@ -0,0 +1,25 @@
++Manipulation Module
++
++//V1
++
++This module concatenates 2 strings sized to a defined macro.
++
++Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
++
++An input of `q' was tested to ensure it would result in ending the program.
++
++A string that is greater than the initialized memory was tested to ensure it would not crash the program.
++
++//V2
++
++V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
++
++This function will only compare strings up until it hits a NULL or a char that does not match.
++
++If it hits a char that does not match, anything after that will not be considered in the comparison.
++
++The chars are evaluated using their ASCII value.
++
++The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
++
++
+diff --git a/V2/manipulations/manipulatemain.c b/V2/manipulations/manipulatemain.c
+new file mode 100644
+index 0000000..1bcc78d
+--- /dev/null
++++ b/V2/manipulations/manipulatemain.c
+@@ -0,0 +1,5 @@
++int main(void) {
++
++	manipulating();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulating.c b/V2/manipulations/manipulating.c
+new file mode 100644
+index 0000000..7ba26cd
+--- /dev/null
++++ b/V2/manipulations/manipulating.c
+@@ -0,0 +1,61 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// V1
++
++void manipulating(void) {
++	printf("*** Start of Concatenating Strings Demo ***\n");
++	char string1[BUFFER_SIZE];
++	char string2[BUFFER_SIZE];
++	do {
++		//Prompt for first string
++		printf("Type the 1st string (q - to quit):\n");
++		fgets(string1, BUFFER_SIZE, stdin);
++		string1[strlen(string1) - 1] = '\0';
++		//if q was entered quit program
++		if ((strcmp(string1, "q") != 0)) {
++			printf("Type the 2nd string:\n");
++			//promt for 2nd string
++			fgets(string2, BUFFER_SIZE, stdin);
++			string2[strlen(string2) - 1] = '\0';
++			//concatenate string
++			strcat(string1, string2);
++			printf("Concatenated string is \'%s\'\n", string1);
++		}
++	} while (strcmp(string1, "q") != 0);
++	printf("*** End of Concatenating Strings Demo ***\n\n");
++
++	//V2
++	printf("***Start of Comparing Strings Demon***\n");
++	char compare1[BUFFER_SIZE];
++	char compare2[BUFFER_SIZE];
++	int result;
++	do {
++		//Receive user input for the 1st string
++		printf("Type the 1st string to compare (q - to quit):\n");
++		fgets(compare1, BUFFER_SIZE, stdin);
++		//Add an ending NULL to the 1st string
++		compare1[strlen(compare1) - 1] = '\0';
++		//Check that the user did not input 'q' to quit
++		if (strcmp(compare1, "q") != 0) {
++			//Receive user input for the 2nd string
++			printf("Type the 2nd string to compare:\n");
++			fgets(compare2, BUFFER_SIZE, stdin);
++			//Add an ending NULL to the 2nd string
++			compare2[strlen(compare2) - 1] = '\0';
++			result = strcmp(compare1, compare2);
++			//Check if the 1st string < than the 2nd string
++			if (result < 0)
++				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
++			//Check if the strings are equal
++			else if (result == 0)
++				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
++			//Check if the first string is greater than the 2nd string
++			else
++				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
++
++		}
++	} while (strcmp(compare1, "q") != 0);
++	printf("*** End of Comparing Strings Demon ***\n\n");
++}
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulating.h b/V2/manipulations/manipulating.h
+new file mode 100644
+index 0000000..434f748
+--- /dev/null
++++ b/V2/manipulations/manipulating.h
+@@ -0,0 +1,6 @@
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++#include <stdio.h>
++#include <string.h>
++void manipulating(void);
++#endif
+\ No newline at end of file
+diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
+new file mode 100644
+index 0000000..323e377
+Binary files /dev/null and b/V2/manipulations/manipulation-test-cases.xlsx differ
+
+commit 762b012570748db01ca39e1b888a916f027f5c43
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 18:02:18 2023 -0500
+
+    Added main and conversions directories to V2
+
+diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..dc61b8f
+--- /dev/null
++++ b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Conversion Module
++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/V1/conversions-test-cases.xlsx
+new file mode 100644
+index 0000000..a2cffb9
+Binary files /dev/null and b/V2/conversions/V1/conversions-test-cases.xlsx differ
+diff --git a/V2/conversions/V1/converting.c b/V2/conversions/V1/converting.c
+new file mode 100644
+index 0000000..dc92171
+--- /dev/null
++++ b/V2/conversions/V1/converting.c
+@@ -0,0 +1,34 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/V2/conversions/V1/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
+new file mode 100644
+index 0000000..6a8e436
+--- /dev/null
++++ b/V2/conversions/V1/main.c
+@@ -0,0 +1,7 @@
++#include "converting.h"
++
++int main(void)
++{
++	converting();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..dc61b8f
+--- /dev/null
++++ b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Conversion Module
++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
+new file mode 100644
+index 0000000..a2cffb9
+Binary files /dev/null and b/V2/conversions/V2/conversions-test-cases.xlsx differ
+diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
+new file mode 100644
+index 0000000..dc92171
+--- /dev/null
++++ b/V2/conversions/V2/converting.c
+@@ -0,0 +1,34 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/V2/conversions/V2/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
+new file mode 100644
+index 0000000..6a8e436
+--- /dev/null
++++ b/V2/conversions/V2/main.c
+@@ -0,0 +1,7 @@
++#include "converting.h"
++
++int main(void)
++{
++	converting();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
+new file mode 100644
+index 0000000..88b340e
+--- /dev/null
++++ b/V2/conversions/templates/converting.c
+@@ -0,0 +1,16 @@
++#include "converting.h"
++
++void converting() {
++/* Version 1 */
++>> insert here
++
++
++/* Version 2 */
++>> insert here
++
++
++/* Version 3 */
++>> insert here
++
++
++}
+diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
+new file mode 100644
+index 0000000..4ffb3a8
+Binary files /dev/null and b/V2/conversions/templates/converting_header.png differ
+diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
+new file mode 100644
+index 0000000..50f5734
+Binary files /dev/null and b/V2/conversions/templates/converting_v1.png differ
+diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
+new file mode 100644
+index 0000000..edcdf1e
+Binary files /dev/null and b/V2/conversions/templates/converting_v2.png differ
+diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
+new file mode 100644
+index 0000000..146285f
+Binary files /dev/null and b/V2/conversions/templates/converting_v3.png differ
+diff --git a/V2/main/main.c b/V2/main/main.c
+new file mode 100644
+index 0000000..5062fbb
+--- /dev/null
++++ b/V2/main/main.c
+@@ -0,0 +1,12 @@
++#include "fundamentals.h"
++#include "manipulating.h"
++#include "tokenizing.h"
++#include "converting.h"
++
++int main(void)
++{
++	fundamentals();
++	manipulating();
++	tokenizing();
++	converting();
++}
+
+commit 71381063066ca1afc0b8ae3b42200293548cf6bd
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 17:55:59 2023 -0500
+
+    Moved all files to V1, Add V2 directory
+
+diff --git a/conversions/PM-Notes-AxtonSmith.docx b/V1/conversions/PM-Notes-AxtonSmith.docx
+similarity index 100%
+rename from conversions/PM-Notes-AxtonSmith.docx
+rename to V1/conversions/PM-Notes-AxtonSmith.docx
+diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+similarity index 100%
+rename from conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+similarity index 100%
+rename from conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+similarity index 100%
+rename from conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+similarity index 100%
+rename from conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+similarity index 100%
+rename from conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+rename to V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+diff --git a/conversions/code/.vs/v1/v17/.suo b/V1/conversions/code/.vs/v1/v17/.suo
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/.suo
+rename to V1/conversions/code/.vs/v1/v17/.suo
+diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/V1/conversions/code/.vs/v1/v17/Browse.VC.db
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/Browse.VC.db
+rename to V1/conversions/code/.vs/v1/v17/Browse.VC.db
+diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/V1/conversions/code/.vs/v1/v17/Solution.VC.db
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/Solution.VC.db
+rename to V1/conversions/code/.vs/v1/v17/Solution.VC.db
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+similarity index 100%
+rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+diff --git a/conversions/code/converting.c b/V1/conversions/code/converting.c
+similarity index 100%
+rename from conversions/code/converting.c
+rename to V1/conversions/code/converting.c
+diff --git a/conversions/code/converting.h b/V1/conversions/code/converting.h
+similarity index 100%
+rename from conversions/code/converting.h
+rename to V1/conversions/code/converting.h
+diff --git a/conversions/code/main.c b/V1/conversions/code/main.c
+similarity index 100%
+rename from conversions/code/main.c
+rename to V1/conversions/code/main.c
+diff --git a/conversions/code/v1.sln b/V1/conversions/code/v1.sln
+similarity index 100%
+rename from conversions/code/v1.sln
+rename to V1/conversions/code/v1.sln
+diff --git a/conversions/code/v1.vcxproj b/V1/conversions/code/v1.vcxproj
+similarity index 100%
+rename from conversions/code/v1.vcxproj
+rename to V1/conversions/code/v1.vcxproj
+diff --git a/conversions/code/v1.vcxproj.filters b/V1/conversions/code/v1.vcxproj.filters
+similarity index 100%
+rename from conversions/code/v1.vcxproj.filters
+rename to V1/conversions/code/v1.vcxproj.filters
+diff --git a/conversions/code/v1.vcxproj.user b/V1/conversions/code/v1.vcxproj.user
+similarity index 100%
+rename from conversions/code/v1.vcxproj.user
+rename to V1/conversions/code/v1.vcxproj.user
+diff --git a/conversions/code/x64/Debug/converting.obj b/V1/conversions/code/x64/Debug/converting.obj
+similarity index 100%
+rename from conversions/code/x64/Debug/converting.obj
+rename to V1/conversions/code/x64/Debug/converting.obj
+diff --git a/conversions/code/x64/Debug/main.obj b/V1/conversions/code/x64/Debug/main.obj
+similarity index 100%
+rename from conversions/code/x64/Debug/main.obj
+rename to V1/conversions/code/x64/Debug/main.obj
+diff --git a/conversions/code/x64/Debug/v1.exe b/V1/conversions/code/x64/Debug/v1.exe
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.exe
+rename to V1/conversions/code/x64/Debug/v1.exe
+diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/V1/conversions/code/x64/Debug/v1.exe.recipe
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.exe.recipe
+rename to V1/conversions/code/x64/Debug/v1.exe.recipe
+diff --git a/conversions/code/x64/Debug/v1.ilk b/V1/conversions/code/x64/Debug/v1.ilk
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.ilk
+rename to V1/conversions/code/x64/Debug/v1.ilk
+diff --git a/conversions/code/x64/Debug/v1.log b/V1/conversions/code/x64/Debug/v1.log
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.log
+rename to V1/conversions/code/x64/Debug/v1.log
+diff --git a/conversions/code/x64/Debug/v1.pdb b/V1/conversions/code/x64/Debug/v1.pdb
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.pdb
+rename to V1/conversions/code/x64/Debug/v1.pdb
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+rename to V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+rename to V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+similarity index 100%
+rename from conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+rename to V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+diff --git a/conversions/code/x64/Debug/vc143.idb b/V1/conversions/code/x64/Debug/vc143.idb
+similarity index 100%
+rename from conversions/code/x64/Debug/vc143.idb
+rename to V1/conversions/code/x64/Debug/vc143.idb
+diff --git a/conversions/code/x64/Debug/vc143.pdb b/V1/conversions/code/x64/Debug/vc143.pdb
+similarity index 100%
+rename from conversions/code/x64/Debug/vc143.pdb
+rename to V1/conversions/code/x64/Debug/vc143.pdb
+diff --git a/conversions/conversions-test-cases.xlsx b/V1/conversions/conversions-test-cases.xlsx
+similarity index 100%
+rename from conversions/conversions-test-cases.xlsx
+rename to V1/conversions/conversions-test-cases.xlsx
+diff --git a/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
+similarity index 100%
+rename from conversions/conversionsV1.zip
+rename to V1/conversions/conversionsV1.zip
+diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+similarity index 100%
+rename from conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+rename to V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
+similarity index 100%
+rename from conversions/conversionsV1/conversions-test-cases.xlsx
+rename to V1/conversions/conversionsV1/conversions-test-cases.xlsx
+diff --git a/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
+similarity index 100%
+rename from conversions/conversionsV1/converting.c
+rename to V1/conversions/conversionsV1/converting.c
+diff --git a/conversions/conversionsV1/converting.h b/V1/conversions/conversionsV1/converting.h
+similarity index 100%
+rename from conversions/conversionsV1/converting.h
+rename to V1/conversions/conversionsV1/converting.h
+diff --git a/conversions/conversionsV1/main.c b/V1/conversions/conversionsV1/main.c
+similarity index 100%
+rename from conversions/conversionsV1/main.c
+rename to V1/conversions/conversionsV1/main.c
+diff --git a/conversions/converting.c b/V1/conversions/converting.c
+similarity index 100%
+rename from conversions/converting.c
+rename to V1/conversions/converting.c
+diff --git a/conversions/converting_header.png b/V1/conversions/converting_header.png
+similarity index 100%
+rename from conversions/converting_header.png
+rename to V1/conversions/converting_header.png
+diff --git a/conversions/converting_v1.png b/V1/conversions/converting_v1.png
+similarity index 100%
+rename from conversions/converting_v1.png
+rename to V1/conversions/converting_v1.png
+diff --git a/conversions/converting_v2.png b/V1/conversions/converting_v2.png
+similarity index 100%
+rename from conversions/converting_v2.png
+rename to V1/conversions/converting_v2.png
+diff --git a/conversions/converting_v3.png b/V1/conversions/converting_v3.png
+similarity index 100%
+rename from conversions/converting_v3.png
+rename to V1/conversions/converting_v3.png
+diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/V1/fundamentals/PM-Notes-AxtonSmith.docx
+similarity index 100%
+rename from fundamentals/PM-Notes-AxtonSmith.docx
+rename to V1/fundamentals/PM-Notes-AxtonSmith.docx
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+similarity index 100%
+rename from fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+rename to V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+similarity index 100%
+rename from fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+rename to V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+similarity index 100%
+rename from fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+rename to V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+diff --git a/fundamentals/code/.vs/project/v17/.suo b/V1/fundamentals/code/.vs/project/v17/.suo
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/.suo
+rename to V1/fundamentals/code/.vs/project/v17/.suo
+diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/V1/fundamentals/code/.vs/project/v17/Browse.VC.db
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/Browse.VC.db
+rename to V1/fundamentals/code/.vs/project/v17/Browse.VC.db
+diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/V1/fundamentals/code/.vs/project/v17/Solution.VC.db
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/Solution.VC.db
+rename to V1/fundamentals/code/.vs/project/v17/Solution.VC.db
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+similarity index 100%
+rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+diff --git a/fundamentals/code/fundamentals.c b/V1/fundamentals/code/fundamentals.c
+similarity index 100%
+rename from fundamentals/code/fundamentals.c
+rename to V1/fundamentals/code/fundamentals.c
+diff --git a/fundamentals/code/fundamentals.h b/V1/fundamentals/code/fundamentals.h
+similarity index 100%
+rename from fundamentals/code/fundamentals.h
+rename to V1/fundamentals/code/fundamentals.h
+diff --git a/fundamentals/code/main.c b/V1/fundamentals/code/main.c
+similarity index 100%
+rename from fundamentals/code/main.c
+rename to V1/fundamentals/code/main.c
+diff --git a/fundamentals/code/project.sln b/V1/fundamentals/code/project.sln
+similarity index 100%
+rename from fundamentals/code/project.sln
+rename to V1/fundamentals/code/project.sln
+diff --git a/fundamentals/code/project.vcxproj b/V1/fundamentals/code/project.vcxproj
+similarity index 100%
+rename from fundamentals/code/project.vcxproj
+rename to V1/fundamentals/code/project.vcxproj
+diff --git a/fundamentals/code/project.vcxproj.filters b/V1/fundamentals/code/project.vcxproj.filters
+similarity index 100%
+rename from fundamentals/code/project.vcxproj.filters
+rename to V1/fundamentals/code/project.vcxproj.filters
+diff --git a/fundamentals/code/project.vcxproj.user b/V1/fundamentals/code/project.vcxproj.user
+similarity index 100%
+rename from fundamentals/code/project.vcxproj.user
+rename to V1/fundamentals/code/project.vcxproj.user
+diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/V1/fundamentals/code/x64/Debug/fundamentals.obj
+similarity index 100%
+rename from fundamentals/code/x64/Debug/fundamentals.obj
+rename to V1/fundamentals/code/x64/Debug/fundamentals.obj
+diff --git a/fundamentals/code/x64/Debug/main.obj b/V1/fundamentals/code/x64/Debug/main.obj
+similarity index 100%
+rename from fundamentals/code/x64/Debug/main.obj
+rename to V1/fundamentals/code/x64/Debug/main.obj
+diff --git a/fundamentals/code/x64/Debug/project.exe b/V1/fundamentals/code/x64/Debug/project.exe
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.exe
+rename to V1/fundamentals/code/x64/Debug/project.exe
+diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/V1/fundamentals/code/x64/Debug/project.exe.recipe
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.exe.recipe
+rename to V1/fundamentals/code/x64/Debug/project.exe.recipe
+diff --git a/fundamentals/code/x64/Debug/project.ilk b/V1/fundamentals/code/x64/Debug/project.ilk
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.ilk
+rename to V1/fundamentals/code/x64/Debug/project.ilk
+diff --git a/fundamentals/code/x64/Debug/project.log b/V1/fundamentals/code/x64/Debug/project.log
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.log
+rename to V1/fundamentals/code/x64/Debug/project.log
+diff --git a/fundamentals/code/x64/Debug/project.pdb b/V1/fundamentals/code/x64/Debug/project.pdb
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.pdb
+rename to V1/fundamentals/code/x64/Debug/project.pdb
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+rename to V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+rename to V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+similarity index 100%
+rename from fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+rename to V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+diff --git a/fundamentals/code/x64/Debug/vc143.idb b/V1/fundamentals/code/x64/Debug/vc143.idb
+similarity index 100%
+rename from fundamentals/code/x64/Debug/vc143.idb
+rename to V1/fundamentals/code/x64/Debug/vc143.idb
+diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/V1/fundamentals/code/x64/Debug/vc143.pdb
+similarity index 100%
+rename from fundamentals/code/x64/Debug/vc143.pdb
+rename to V1/fundamentals/code/x64/Debug/vc143.pdb
+diff --git a/fundamentals/fundamentals-test-cases.xlsx b/V1/fundamentals/fundamentals-test-cases.xlsx
+similarity index 100%
+rename from fundamentals/fundamentals-test-cases.xlsx
+rename to V1/fundamentals/fundamentals-test-cases.xlsx
+diff --git a/fundamentals/fundamentals.c b/V1/fundamentals/fundamentals.c
+similarity index 100%
+rename from fundamentals/fundamentals.c
+rename to V1/fundamentals/fundamentals.c
+diff --git a/fundamentals/fundamentals_header.png b/V1/fundamentals/fundamentals_header.png
+similarity index 100%
+rename from fundamentals/fundamentals_header.png
+rename to V1/fundamentals/fundamentals_header.png
+diff --git a/fundamentals/fundamentals_v1.png b/V1/fundamentals/fundamentals_v1.png
+similarity index 100%
+rename from fundamentals/fundamentals_v1.png
+rename to V1/fundamentals/fundamentals_v1.png
+diff --git a/fundamentals/fundamentals_v2.png b/V1/fundamentals/fundamentals_v2.png
+similarity index 100%
+rename from fundamentals/fundamentals_v2.png
+rename to V1/fundamentals/fundamentals_v2.png
+diff --git a/fundamentals/fundamentals_v3.png b/V1/fundamentals/fundamentals_v3.png
+similarity index 100%
+rename from fundamentals/fundamentals_v3.png
+rename to V1/fundamentals/fundamentals_v3.png
+diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
+similarity index 100%
+rename from fundamentals/v1/PM-Notes-AxtonSmith.docx
+rename to V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
+diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/V1/fundamentals/v1/fundamentals-test-cases.xlsx
+similarity index 100%
+rename from fundamentals/v1/fundamentals-test-cases.xlsx
+rename to V1/fundamentals/v1/fundamentals-test-cases.xlsx
+diff --git a/fundamentals/v1/fundamentals.c b/V1/fundamentals/v1/fundamentals.c
+similarity index 100%
+rename from fundamentals/v1/fundamentals.c
+rename to V1/fundamentals/v1/fundamentals.c
+diff --git a/fundamentals/v1/fundamentals.h b/V1/fundamentals/v1/fundamentals.h
+similarity index 100%
+rename from fundamentals/v1/fundamentals.h
+rename to V1/fundamentals/v1/fundamentals.h
+diff --git a/fundamentals/v1/main.c b/V1/fundamentals/v1/main.c
+similarity index 100%
+rename from fundamentals/v1/main.c
+rename to V1/fundamentals/v1/main.c
+diff --git a/main/converting.c b/V1/main/converting.c
+similarity index 100%
+rename from main/converting.c
+rename to V1/main/converting.c
+diff --git a/main/converting.h b/V1/main/converting.h
+similarity index 100%
+rename from main/converting.h
+rename to V1/main/converting.h
+diff --git a/main/fundamentals.c b/V1/main/fundamentals.c
+similarity index 100%
+rename from main/fundamentals.c
+rename to V1/main/fundamentals.c
+diff --git a/main/fundamentals.h b/V1/main/fundamentals.h
+similarity index 100%
+rename from main/fundamentals.h
+rename to V1/main/fundamentals.h
+diff --git a/main/main.c b/V1/main/main.c
+similarity index 100%
+rename from main/main.c
+rename to V1/main/main.c
+diff --git a/main/manipulating.c b/V1/main/manipulating.c
+similarity index 100%
+rename from main/manipulating.c
+rename to V1/main/manipulating.c
+diff --git a/main/manipulating.h b/V1/main/manipulating.h
+similarity index 100%
+rename from main/manipulating.h
+rename to V1/main/manipulating.h
+diff --git a/main/tokenizing.c b/V1/main/tokenizing.c
+similarity index 100%
+rename from main/tokenizing.c
+rename to V1/main/tokenizing.c
+diff --git a/main/tokenizing.h b/V1/main/tokenizing.h
+similarity index 100%
+rename from main/tokenizing.h
+rename to V1/main/tokenizing.h
+diff --git a/manipulation/PM-Notes-Brandon-Doray.docx b/V1/manipulation/PM-Notes-Brandon-Doray.docx
+similarity index 100%
+rename from manipulation/PM-Notes-Brandon-Doray.docx
+rename to V1/manipulation/PM-Notes-Brandon-Doray.docx
+diff --git a/manipulation/manipulatemain.c b/V1/manipulation/manipulatemain.c
+similarity index 100%
+rename from manipulation/manipulatemain.c
+rename to V1/manipulation/manipulatemain.c
+diff --git a/manipulation/manipulating.c b/V1/manipulation/manipulating.c
+similarity index 100%
+rename from manipulation/manipulating.c
+rename to V1/manipulation/manipulating.c
+diff --git a/manipulation/manipulating.h b/V1/manipulation/manipulating.h
+similarity index 100%
+rename from manipulation/manipulating.h
+rename to V1/manipulation/manipulating.h
+diff --git a/manipulation/manipulation-test-cases.xlsx b/V1/manipulation/manipulation-test-cases.xlsx
+similarity index 100%
+rename from manipulation/manipulation-test-cases.xlsx
+rename to V1/manipulation/manipulation-test-cases.xlsx
+diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/V1/tokenizing/PM-Notes-DarianGrijalba.docx
+similarity index 100%
+rename from tokenizing/PM-Notes-DarianGrijalba.docx
+rename to V1/tokenizing/PM-Notes-DarianGrijalba.docx
+diff --git a/tokenizing/tokenizing.c b/V1/tokenizing/tokenizing.c
+similarity index 100%
+rename from tokenizing/tokenizing.c
+rename to V1/tokenizing/tokenizing.c
+diff --git a/tokenizing/tokenizing.h b/V1/tokenizing/tokenizing.h
+similarity index 100%
+rename from tokenizing/tokenizing.h
+rename to V1/tokenizing/tokenizing.h
+
+commit 0ec0097d57c6a5d87103780c4dc8f8e6d3cc45df
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 17:52:55 2023 -0500
+
+    Fix file path in manipulation directory
+
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
+deleted file mode 100644
+index ce82fd8..0000000
+Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo and /dev/null differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
+deleted file mode 100644
+index 95cfcc7..0000000
+Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db and /dev/null differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
+deleted file mode 100644
+index b2ba1dc..0000000
+Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db and /dev/null differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/PM-Notes-Brandon-Doray.docx
+similarity index 100%
+rename from manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
+rename to manipulation/PM-Notes-Brandon-Doray.docx
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/manipulatemain.c
+similarity index 100%
+rename from manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
+rename to manipulation/manipulatemain.c
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/manipulating.c
+similarity index 100%
+rename from manipulation/Manipulation V1/Manipulation V1/manipulating.c
+rename to manipulation/manipulating.c
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/manipulating.h
+similarity index 100%
+rename from manipulation/Manipulation V1/Manipulation V1/manipulating.h
+rename to manipulation/manipulating.h
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/manipulation-test-cases.xlsx
+similarity index 100%
+rename from manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
+rename to manipulation/manipulation-test-cases.xlsx
+
+commit e40dd3d033d7164d96f9fa0ffe2668ffeb2ccfed
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Fri Dec 8 17:52:00 2023 -0500
+
+    Add V1 files
+
+diff --git a/conversions/PM-Notes-AxtonSmith.docx b/conversions/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..dc61b8f
+--- /dev/null
++++ b/conversions/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Conversion Module
++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx differ
+diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
+new file mode 100644
+index 0000000..2b75f1d
+Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx differ
+diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx differ
+diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx differ
+diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx differ
+diff --git a/conversions/code/.vs/v1/v17/.suo b/conversions/code/.vs/v1/v17/.suo
+new file mode 100644
+index 0000000..218f706
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/.suo differ
+diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/conversions/code/.vs/v1/v17/Browse.VC.db
+new file mode 100644
+index 0000000..086de7c
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/Browse.VC.db differ
+diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/conversions/code/.vs/v1/v17/Solution.VC.db
+new file mode 100644
+index 0000000..da0fe73
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/Solution.VC.db differ
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
+new file mode 100644
+index 0000000..137cd6f
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch differ
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
+new file mode 100644
+index 0000000..e7b304a
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch differ
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
+new file mode 100644
+index 0000000..934be31
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch differ
+diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
+new file mode 100644
+index 0000000..937325b
+Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch differ
+diff --git a/conversions/code/converting.c b/conversions/code/converting.c
+new file mode 100644
+index 0000000..dc92171
+--- /dev/null
++++ b/conversions/code/converting.c
+@@ -0,0 +1,34 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/conversions/code/converting.h b/conversions/code/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/conversions/code/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/conversions/code/main.c b/conversions/code/main.c
+new file mode 100644
+index 0000000..6a8e436
+--- /dev/null
++++ b/conversions/code/main.c
+@@ -0,0 +1,7 @@
++#include "converting.h"
++
++int main(void)
++{
++	converting();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/conversions/code/v1.sln b/conversions/code/v1.sln
+new file mode 100644
+index 0000000..57619b4
+--- /dev/null
++++ b/conversions/code/v1.sln
+@@ -0,0 +1,31 @@
++ï»¿
++Microsoft Visual Studio Solution File, Format Version 12.00
++# Visual Studio Version 17
++VisualStudioVersion = 17.8.34322.80
++MinimumVisualStudioVersion = 10.0.40219.1
++Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "v1", "v1.vcxproj", "{DFCFF08A-27BA-4895-81DE-69DA151B79DB}"
++EndProject
++Global
++	GlobalSection(SolutionConfigurationPlatforms) = preSolution
++		Debug|x64 = Debug|x64
++		Debug|x86 = Debug|x86
++		Release|x64 = Release|x64
++		Release|x86 = Release|x86
++	EndGlobalSection
++	GlobalSection(ProjectConfigurationPlatforms) = postSolution
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.ActiveCfg = Debug|x64
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.Build.0 = Debug|x64
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.ActiveCfg = Debug|Win32
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.Build.0 = Debug|Win32
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.ActiveCfg = Release|x64
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.Build.0 = Release|x64
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.ActiveCfg = Release|Win32
++		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.Build.0 = Release|Win32
++	EndGlobalSection
++	GlobalSection(SolutionProperties) = preSolution
++		HideSolutionNode = FALSE
++	EndGlobalSection
++	GlobalSection(ExtensibilityGlobals) = postSolution
++		SolutionGuid = {FB5DDBE1-4B86-462E-8A71-FBB6C215BD41}
++	EndGlobalSection
++EndGlobal
+diff --git a/conversions/code/v1.vcxproj b/conversions/code/v1.vcxproj
+new file mode 100644
+index 0000000..8a35f16
+--- /dev/null
++++ b/conversions/code/v1.vcxproj
+@@ -0,0 +1,139 @@
++<?xml version="1.0" encoding="utf-8"?>
++<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup Label="ProjectConfigurations">
++    <ProjectConfiguration Include="Debug|Win32">
++      <Configuration>Debug</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|Win32">
++      <Configuration>Release</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Debug|x64">
++      <Configuration>Debug</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|x64">
++      <Configuration>Release</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++  </ItemGroup>
++  <PropertyGroup Label="Globals">
++    <VCProjectVersion>17.0</VCProjectVersion>
++    <Keyword>Win32Proj</Keyword>
++    <ProjectGuid>{dfcff08a-27ba-4895-81de-69da151b79db}</ProjectGuid>
++    <RootNamespace>v1</RootNamespace>
++    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
++  <ImportGroup Label="ExtensionSettings">
++  </ImportGroup>
++  <ImportGroup Label="Shared">
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <PropertyGroup Label="UserMacros" />
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemGroup>
++    <ClCompile Include="converting.c" />
++    <ClCompile Include="main.c" />
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="converting.h" />
++  </ItemGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
++  <ImportGroup Label="ExtensionTargets">
++  </ImportGroup>
++</Project>
+\ No newline at end of file
+diff --git a/conversions/code/v1.vcxproj.filters b/conversions/code/v1.vcxproj.filters
+new file mode 100644
+index 0000000..7ba9ae0
+--- /dev/null
++++ b/conversions/code/v1.vcxproj.filters
+@@ -0,0 +1,30 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup>
++    <Filter Include="Source Files">
++      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
++      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
++    </Filter>
++    <Filter Include="Header Files">
++      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
++      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
++    </Filter>
++    <Filter Include="Resource Files">
++      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
++      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
++    </Filter>
++  </ItemGroup>
++  <ItemGroup>
++    <ClCompile Include="converting.c">
++      <Filter>Source Files</Filter>
++    </ClCompile>
++    <ClCompile Include="main.c">
++      <Filter>Source Files</Filter>
++    </ClCompile>
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="converting.h">
++      <Filter>Header Files</Filter>
++    </ClInclude>
++  </ItemGroup>
++</Project>
+\ No newline at end of file
+diff --git a/conversions/code/v1.vcxproj.user b/conversions/code/v1.vcxproj.user
+new file mode 100644
+index 0000000..88a5509
+--- /dev/null
++++ b/conversions/code/v1.vcxproj.user
+@@ -0,0 +1,4 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <PropertyGroup />
++</Project>
+\ No newline at end of file
+diff --git a/conversions/code/x64/Debug/converting.obj b/conversions/code/x64/Debug/converting.obj
+new file mode 100644
+index 0000000..3c059c8
+Binary files /dev/null and b/conversions/code/x64/Debug/converting.obj differ
+diff --git a/conversions/code/x64/Debug/main.obj b/conversions/code/x64/Debug/main.obj
+new file mode 100644
+index 0000000..752fab6
+Binary files /dev/null and b/conversions/code/x64/Debug/main.obj differ
+diff --git a/conversions/code/x64/Debug/v1.exe b/conversions/code/x64/Debug/v1.exe
+new file mode 100644
+index 0000000..657c946
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.exe differ
+diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/conversions/code/x64/Debug/v1.exe.recipe
+new file mode 100644
+index 0000000..69be474
+--- /dev/null
++++ b/conversions/code/x64/Debug/v1.exe.recipe
+@@ -0,0 +1,11 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project>
++  <ProjectOutputs>
++    <ProjectOutput>
++      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe</FullPath>
++    </ProjectOutput>
++  </ProjectOutputs>
++  <ContentFiles />
++  <SatelliteDlls />
++  <NonRecipeFileRefs />
++</Project>
+\ No newline at end of file
+diff --git a/conversions/code/x64/Debug/v1.ilk b/conversions/code/x64/Debug/v1.ilk
+new file mode 100644
+index 0000000..18b8f11
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.ilk differ
+diff --git a/conversions/code/x64/Debug/v1.log b/conversions/code/x64/Debug/v1.log
+new file mode 100644
+index 0000000..d6ecd4a
+--- /dev/null
++++ b/conversions/code/x64/Debug/v1.log
+@@ -0,0 +1,2 @@
++ï»¿  main.c
++  v1.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
+diff --git a/conversions/code/x64/Debug/v1.pdb b/conversions/code/x64/Debug/v1.pdb
+new file mode 100644
+index 0000000..e2f8b05
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.pdb differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
+new file mode 100644
+index 0000000..0f0f942
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
+new file mode 100644
+index 0000000..54a5e77
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
+new file mode 100644
+index 0000000..c1bc96f
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+new file mode 100644
+index 0000000..8b2c0bc
+--- /dev/null
++++ b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
+@@ -0,0 +1,2 @@
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\converting.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\converting.obj
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\main.obj
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
+new file mode 100644
+index 0000000..a7a084f
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
+new file mode 100644
+index 0000000..3761899
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
+new file mode 100644
+index 0000000..fa10a23
+Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog differ
+diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+new file mode 100644
+index 0000000..fe1494c
+--- /dev/null
++++ b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
+@@ -0,0 +1,2 @@
++PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
++Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\|
+diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+new file mode 100644
+index 0000000..2da24f7
+--- /dev/null
++++ b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
+@@ -0,0 +1 @@
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
+diff --git a/conversions/code/x64/Debug/vc143.idb b/conversions/code/x64/Debug/vc143.idb
+new file mode 100644
+index 0000000..1fcdfe4
+Binary files /dev/null and b/conversions/code/x64/Debug/vc143.idb differ
+diff --git a/conversions/code/x64/Debug/vc143.pdb b/conversions/code/x64/Debug/vc143.pdb
+new file mode 100644
+index 0000000..2e1256c
+Binary files /dev/null and b/conversions/code/x64/Debug/vc143.pdb differ
+diff --git a/conversions/conversions-test-cases.xlsx b/conversions/conversions-test-cases.xlsx
+new file mode 100644
+index 0000000..657486d
+Binary files /dev/null and b/conversions/conversions-test-cases.xlsx differ
+diff --git a/conversions/conversionsV1.zip b/conversions/conversionsV1.zip
+new file mode 100644
+index 0000000..ea57e7e
+Binary files /dev/null and b/conversions/conversionsV1.zip differ
+diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..dc61b8f
+--- /dev/null
++++ b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Conversion Module
++This module takes string inputs that are numeric and converts it to an integer of the number in the string.
++Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
++We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/conversions/conversionsV1/conversions-test-cases.xlsx
+new file mode 100644
+index 0000000..a2cffb9
+Binary files /dev/null and b/conversions/conversionsV1/conversions-test-cases.xlsx differ
+diff --git a/conversions/conversionsV1/converting.c b/conversions/conversionsV1/converting.c
+new file mode 100644
+index 0000000..dc92171
+--- /dev/null
++++ b/conversions/conversionsV1/converting.c
+@@ -0,0 +1,34 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/conversions/conversionsV1/converting.h b/conversions/conversionsV1/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/conversions/conversionsV1/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/conversions/conversionsV1/main.c b/conversions/conversionsV1/main.c
+new file mode 100644
+index 0000000..6a8e436
+--- /dev/null
++++ b/conversions/conversionsV1/main.c
+@@ -0,0 +1,7 @@
++#include "converting.h"
++
++int main(void)
++{
++	converting();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/conversions/converting.c b/conversions/converting.c
+new file mode 100644
+index 0000000..88b340e
+--- /dev/null
++++ b/conversions/converting.c
+@@ -0,0 +1,16 @@
++#include "converting.h"
++
++void converting() {
++/* Version 1 */
++>> insert here
++
++
++/* Version 2 */
++>> insert here
++
++
++/* Version 3 */
++>> insert here
++
++
++}
+diff --git a/conversions/converting_header.png b/conversions/converting_header.png
+new file mode 100644
+index 0000000..4ffb3a8
+Binary files /dev/null and b/conversions/converting_header.png differ
+diff --git a/conversions/converting_v1.png b/conversions/converting_v1.png
+new file mode 100644
+index 0000000..50f5734
+Binary files /dev/null and b/conversions/converting_v1.png differ
+diff --git a/conversions/converting_v2.png b/conversions/converting_v2.png
+new file mode 100644
+index 0000000..edcdf1e
+Binary files /dev/null and b/conversions/converting_v2.png differ
+diff --git a/conversions/converting_v3.png b/conversions/converting_v3.png
+new file mode 100644
+index 0000000..146285f
+Binary files /dev/null and b/conversions/converting_v3.png differ
+diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/fundamentals/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..835d958
+--- /dev/null
++++ b/fundamentals/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Fundamentals Module V1
++The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
++Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
++Negative cases will be any negative index and indexes beyond the max length of the string.
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
+new file mode 100644
+index 0000000..07098b6
+Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx differ
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx differ
+diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
+new file mode 100644
+index 0000000..70aef67
+Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx differ
+diff --git a/fundamentals/code/.vs/project/v17/.suo b/fundamentals/code/.vs/project/v17/.suo
+new file mode 100644
+index 0000000..bcfd53a
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/.suo differ
+diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/fundamentals/code/.vs/project/v17/Browse.VC.db
+new file mode 100644
+index 0000000..bcda23d
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Browse.VC.db differ
+diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/fundamentals/code/.vs/project/v17/Solution.VC.db
+new file mode 100644
+index 0000000..4478989
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Solution.VC.db differ
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
+new file mode 100644
+index 0000000..14c2062
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch differ
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
+new file mode 100644
+index 0000000..eb24263
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch differ
+diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
+new file mode 100644
+index 0000000..1d0afbc
+Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch differ
+diff --git a/fundamentals/code/fundamentals.c b/fundamentals/code/fundamentals.c
+new file mode 100644
+index 0000000..1215375
+--- /dev/null
++++ b/fundamentals/code/fundamentals.c
+@@ -0,0 +1,40 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	//>> insert here
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/fundamentals/code/fundamentals.h b/fundamentals/code/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/fundamentals/code/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/fundamentals/code/main.c b/fundamentals/code/main.c
+new file mode 100644
+index 0000000..1225e71
+--- /dev/null
++++ b/fundamentals/code/main.c
+@@ -0,0 +1,7 @@
++#include "fundamentals.h"
++
++int main(void)
++{
++	fundamentals();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/fundamentals/code/project.sln b/fundamentals/code/project.sln
+new file mode 100644
+index 0000000..0a8bb0d
+--- /dev/null
++++ b/fundamentals/code/project.sln
+@@ -0,0 +1,31 @@
++ï»¿
++Microsoft Visual Studio Solution File, Format Version 12.00
++# Visual Studio Version 17
++VisualStudioVersion = 17.8.34322.80
++MinimumVisualStudioVersion = 10.0.40219.1
++Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "project", "project.vcxproj", "{AF362EDA-E3C1-4C36-9746-825F3A16C279}"
++EndProject
++Global
++	GlobalSection(SolutionConfigurationPlatforms) = preSolution
++		Debug|x64 = Debug|x64
++		Debug|x86 = Debug|x86
++		Release|x64 = Release|x64
++		Release|x86 = Release|x86
++	EndGlobalSection
++	GlobalSection(ProjectConfigurationPlatforms) = postSolution
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.ActiveCfg = Debug|x64
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.Build.0 = Debug|x64
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.ActiveCfg = Debug|Win32
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.Build.0 = Debug|Win32
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.ActiveCfg = Release|x64
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.Build.0 = Release|x64
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.ActiveCfg = Release|Win32
++		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.Build.0 = Release|Win32
++	EndGlobalSection
++	GlobalSection(SolutionProperties) = preSolution
++		HideSolutionNode = FALSE
++	EndGlobalSection
++	GlobalSection(ExtensibilityGlobals) = postSolution
++		SolutionGuid = {189AD194-2992-420A-9AC7-B6C34003EBD9}
++	EndGlobalSection
++EndGlobal
+diff --git a/fundamentals/code/project.vcxproj b/fundamentals/code/project.vcxproj
+new file mode 100644
+index 0000000..b4a7699
+--- /dev/null
++++ b/fundamentals/code/project.vcxproj
+@@ -0,0 +1,139 @@
++<?xml version="1.0" encoding="utf-8"?>
++<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup Label="ProjectConfigurations">
++    <ProjectConfiguration Include="Debug|Win32">
++      <Configuration>Debug</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|Win32">
++      <Configuration>Release</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Debug|x64">
++      <Configuration>Debug</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|x64">
++      <Configuration>Release</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++  </ItemGroup>
++  <PropertyGroup Label="Globals">
++    <VCProjectVersion>17.0</VCProjectVersion>
++    <Keyword>Win32Proj</Keyword>
++    <ProjectGuid>{af362eda-e3c1-4c36-9746-825f3a16c279}</ProjectGuid>
++    <RootNamespace>project</RootNamespace>
++    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
++    <ConfigurationType>Application</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v143</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
++  <ImportGroup Label="ExtensionSettings">
++  </ImportGroup>
++  <ImportGroup Label="Shared">
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <PropertyGroup Label="UserMacros" />
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <SDLCheck>true</SDLCheck>
++      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <ConformanceMode>true</ConformanceMode>
++    </ClCompile>
++    <Link>
++      <SubSystem>Console</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemGroup>
++    <ClCompile Include="fundamentals.c" />
++    <ClCompile Include="main.c" />
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="fundamentals.h" />
++  </ItemGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
++  <ImportGroup Label="ExtensionTargets">
++  </ImportGroup>
++</Project>
+\ No newline at end of file
+diff --git a/fundamentals/code/project.vcxproj.filters b/fundamentals/code/project.vcxproj.filters
+new file mode 100644
+index 0000000..262ef51
+--- /dev/null
++++ b/fundamentals/code/project.vcxproj.filters
+@@ -0,0 +1,30 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup>
++    <Filter Include="Source Files">
++      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
++      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
++    </Filter>
++    <Filter Include="Header Files">
++      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
++      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
++    </Filter>
++    <Filter Include="Resource Files">
++      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
++      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
++    </Filter>
++  </ItemGroup>
++  <ItemGroup>
++    <ClCompile Include="fundamentals.c">
++      <Filter>Source Files</Filter>
++    </ClCompile>
++    <ClCompile Include="main.c">
++      <Filter>Source Files</Filter>
++    </ClCompile>
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="fundamentals.h">
++      <Filter>Source Files</Filter>
++    </ClInclude>
++  </ItemGroup>
++</Project>
+\ No newline at end of file
+diff --git a/fundamentals/code/project.vcxproj.user b/fundamentals/code/project.vcxproj.user
+new file mode 100644
+index 0000000..88a5509
+--- /dev/null
++++ b/fundamentals/code/project.vcxproj.user
+@@ -0,0 +1,4 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <PropertyGroup />
++</Project>
+\ No newline at end of file
+diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/fundamentals/code/x64/Debug/fundamentals.obj
+new file mode 100644
+index 0000000..861a383
+Binary files /dev/null and b/fundamentals/code/x64/Debug/fundamentals.obj differ
+diff --git a/fundamentals/code/x64/Debug/main.obj b/fundamentals/code/x64/Debug/main.obj
+new file mode 100644
+index 0000000..412ddd8
+Binary files /dev/null and b/fundamentals/code/x64/Debug/main.obj differ
+diff --git a/fundamentals/code/x64/Debug/project.exe b/fundamentals/code/x64/Debug/project.exe
+new file mode 100644
+index 0000000..96f3f7c
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.exe differ
+diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/fundamentals/code/x64/Debug/project.exe.recipe
+new file mode 100644
+index 0000000..d15bad6
+--- /dev/null
++++ b/fundamentals/code/x64/Debug/project.exe.recipe
+@@ -0,0 +1,11 @@
++ï»¿<?xml version="1.0" encoding="utf-8"?>
++<Project>
++  <ProjectOutputs>
++    <ProjectOutput>
++      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe</FullPath>
++    </ProjectOutput>
++  </ProjectOutputs>
++  <ContentFiles />
++  <SatelliteDlls />
++  <NonRecipeFileRefs />
++</Project>
+\ No newline at end of file
+diff --git a/fundamentals/code/x64/Debug/project.ilk b/fundamentals/code/x64/Debug/project.ilk
+new file mode 100644
+index 0000000..ca8297e
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.ilk differ
+diff --git a/fundamentals/code/x64/Debug/project.log b/fundamentals/code/x64/Debug/project.log
+new file mode 100644
+index 0000000..46cbcf7
+--- /dev/null
++++ b/fundamentals/code/x64/Debug/project.log
+@@ -0,0 +1,4 @@
++ï»¿  fundamentals.c
++  main.c
++  Generating Code...
++  project.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
+diff --git a/fundamentals/code/x64/Debug/project.pdb b/fundamentals/code/x64/Debug/project.pdb
+new file mode 100644
+index 0000000..f4c9944
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.pdb differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
+new file mode 100644
+index 0000000..8ce9c43
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
+new file mode 100644
+index 0000000..2466d33
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
+new file mode 100644
+index 0000000..a78224f
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+new file mode 100644
+index 0000000..3b8784b
+--- /dev/null
++++ b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
+@@ -0,0 +1,2 @@
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\fundamentals.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\fundamentals.obj
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\main.obj
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
+new file mode 100644
+index 0000000..86df9f0
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
+new file mode 100644
+index 0000000..7a2ed43
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
+new file mode 100644
+index 0000000..a4ba5a7
+Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog differ
+diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+new file mode 100644
+index 0000000..abb6863
+--- /dev/null
++++ b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
+@@ -0,0 +1,2 @@
++PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
++Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\|
+diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+new file mode 100644
+index 0000000..3ccaa35
+--- /dev/null
++++ b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
+@@ -0,0 +1,2 @@
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\fundamentals\v1\project\x64\Debug\project.exe
++C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
+diff --git a/fundamentals/code/x64/Debug/vc143.idb b/fundamentals/code/x64/Debug/vc143.idb
+new file mode 100644
+index 0000000..6700a8c
+Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.idb differ
+diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/fundamentals/code/x64/Debug/vc143.pdb
+new file mode 100644
+index 0000000..88847b7
+Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.pdb differ
+diff --git a/fundamentals/fundamentals-test-cases.xlsx b/fundamentals/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..d625c15
+Binary files /dev/null and b/fundamentals/fundamentals-test-cases.xlsx differ
+diff --git a/fundamentals/fundamentals.c b/fundamentals/fundamentals.c
+new file mode 100644
+index 0000000..172438a
+--- /dev/null
++++ b/fundamentals/fundamentals.c
+@@ -0,0 +1,16 @@
++#include "fundamentals.h"
++
++void fundamentals() {
++/* Version 1 */
++>> insert here
++
++
++/* Version 2 */
++>> insert here
++
++
++/* Version 3 */
++>> insert here
++
++
++}
+\ No newline at end of file
+diff --git a/fundamentals/fundamentals_header.png b/fundamentals/fundamentals_header.png
+new file mode 100644
+index 0000000..aae2842
+Binary files /dev/null and b/fundamentals/fundamentals_header.png differ
+diff --git a/fundamentals/fundamentals_v1.png b/fundamentals/fundamentals_v1.png
+new file mode 100644
+index 0000000..0f519ca
+Binary files /dev/null and b/fundamentals/fundamentals_v1.png differ
+diff --git a/fundamentals/fundamentals_v2.png b/fundamentals/fundamentals_v2.png
+new file mode 100644
+index 0000000..9bc0381
+Binary files /dev/null and b/fundamentals/fundamentals_v2.png differ
+diff --git a/fundamentals/fundamentals_v3.png b/fundamentals/fundamentals_v3.png
+new file mode 100644
+index 0000000..b390188
+Binary files /dev/null and b/fundamentals/fundamentals_v3.png differ
+diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/fundamentals/v1/PM-Notes-AxtonSmith.docx
+new file mode 100644
+index 0000000..acc0ce8
+--- /dev/null
++++ b/fundamentals/v1/PM-Notes-AxtonSmith.docx
+@@ -0,0 +1,4 @@
++Fundamentals Module V1
++The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
++Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
++Negative cases will be any indexes beyond the max length of the string.
+diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/fundamentals/v1/fundamentals-test-cases.xlsx
+new file mode 100644
+index 0000000..35c1eda
+Binary files /dev/null and b/fundamentals/v1/fundamentals-test-cases.xlsx differ
+diff --git a/fundamentals/v1/fundamentals.c b/fundamentals/v1/fundamentals.c
+new file mode 100644
+index 0000000..1215375
+--- /dev/null
++++ b/fundamentals/v1/fundamentals.c
+@@ -0,0 +1,40 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	//>> insert here
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/fundamentals/v1/fundamentals.h b/fundamentals/v1/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/fundamentals/v1/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/fundamentals/v1/main.c b/fundamentals/v1/main.c
+new file mode 100644
+index 0000000..1225e71
+--- /dev/null
++++ b/fundamentals/v1/main.c
+@@ -0,0 +1,7 @@
++#include "fundamentals.h"
++
++int main(void)
++{
++	fundamentals();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/main/converting.c b/main/converting.c
+new file mode 100644
+index 0000000..dc92171
+--- /dev/null
++++ b/main/converting.c
+@@ -0,0 +1,34 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++
++#include "converting.h"
++
++// User inputs a number as a string, then it is returned as an int
++void converting() {
++/* Version 1 */
++	printf("*** Start of Converting Strings to int Demo ***\n");
++	char intString[BUFFER_SIZE];
++	int intNumber;
++	do
++	{
++		printf("Type an int numeric string (q - to quit):\n");
++		fgets(intString, BUFFER_SIZE, stdin);
++		intString[strlen(intString) - 1] = '\0';
++		if (strcmp(intString, "q") != 0)
++		{
++			intNumber = atoi(intString);
++			printf("Converted number is %d\n", intNumber);
++		}
++	}
++	while (strcmp(intString, "q") != 0);
++	printf("*** End of Converting Strings to int Demo ***\n\n");
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+diff --git a/main/converting.h b/main/converting.h
+new file mode 100644
+index 0000000..94e86ab
+--- /dev/null
++++ b/main/converting.h
+@@ -0,0 +1,11 @@
++#ifndef _CONVERTING_H_
++#define _CONVERTING_H_
++
++#include <stdio.h>
++#include <string.h>
++#include <stdlib.h>
++
++// User inputs a number as a string, then it is returned as an int
++void converting(void);
++
++#endif
+\ No newline at end of file
+diff --git a/main/fundamentals.c b/main/fundamentals.c
+new file mode 100644
+index 0000000..1215375
+--- /dev/null
++++ b/main/fundamentals.c
+@@ -0,0 +1,40 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#define NUM_INPUT_SIZE 10
++
++#include "fundamentals.h"
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals() {
++/* Version 1 */
++	printf("*** Start of Indexing Strings Demo ***\n");
++	char buffer1[BUFFER_SIZE];
++	char numInput[NUM_INPUT_SIZE];
++	size_t position;
++	do
++	{
++		printf("Type not empty string (q - to quit):\n");
++		fgets(buffer1, BUFFER_SIZE, stdin);
++		buffer1[strlen(buffer1) - 1] = '\0';
++		if (strcmp(buffer1, "q") != 0)
++		{
++			printf("Type the character position within the string:\n");
++			fgets(numInput, NUM_INPUT_SIZE, stdin);
++			numInput[strlen(numInput) - 1] = '\0';
++			position = atoi(numInput);
++			if (position >= strlen(buffer1))
++			{
++				position = strlen(buffer1) - 1;
++				printf("Too big... Position reduced to max. available\n");
++			}
++			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
++		}
++	} while (strcmp(buffer1, "q") != 0);
++	printf("*** End of Indexing Strings Demo ***\n\n");
++
++	/* Version 2 */
++	//>> insert here
++
++	/* Version 3 */
++	//>> insert here
++}
+\ No newline at end of file
+diff --git a/main/fundamentals.h b/main/fundamentals.h
+new file mode 100644
+index 0000000..14a6f4f
+--- /dev/null
++++ b/main/fundamentals.h
+@@ -0,0 +1,11 @@
++#ifndef _FUNDAMENTALS_H_
++#define _FUNDAMENTALS_H_
++
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++// Takes a string input from user, then an index number and returns the character at that index of the string
++void fundamentals(void);
++
++#endif
+\ No newline at end of file
+diff --git a/main/main.c b/main/main.c
+new file mode 100644
+index 0000000..5062fbb
+--- /dev/null
++++ b/main/main.c
+@@ -0,0 +1,12 @@
++#include "fundamentals.h"
++#include "manipulating.h"
++#include "tokenizing.h"
++#include "converting.h"
++
++int main(void)
++{
++	fundamentals();
++	manipulating();
++	tokenizing();
++	converting();
++}
+diff --git a/main/manipulating.c b/main/manipulating.c
+new file mode 100644
+index 0000000..3de4a55
+--- /dev/null
++++ b/main/manipulating.c
+@@ -0,0 +1,28 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// V1
++
++void manipulating(void) {
++	printf("*** Start if Concatenating Strings Demo ***\n");
++	char string1[BUFFER_SIZE];
++	char string2[BUFFER_SIZE];
++	do {
++		//Prompt for first string
++		printf("Type the 1st string (q - to quit):\n");
++		fgets(string1, BUFFER_SIZE, stdin);
++		string1[strlen(string1) - 1] = '\0';
++		//if q was entered quit program
++		if ((strcmp(string1, "q") != 0)) {
++			printf("Type the 2nd string:\n");
++			//promt for 2nd string
++			fgets(string2, BUFFER_SIZE, stdin);
++			string2[strlen(string2) - 1] = '\0';
++			//concatenate string
++			strcat(string1, string2);
++			printf("Concatenated string is \'%s\'\n", string1);
++		}
++	} while (strcmp(string1, "q") != 0);
++	printf("*** End of Concatenating Strings Demo ***\n\n");
++}
+\ No newline at end of file
+diff --git a/main/manipulating.h b/main/manipulating.h
+new file mode 100644
+index 0000000..434f748
+--- /dev/null
++++ b/main/manipulating.h
+@@ -0,0 +1,6 @@
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++#include <stdio.h>
++#include <string.h>
++void manipulating(void);
++#endif
+\ No newline at end of file
+diff --git a/main/tokenizing.c b/main/tokenizing.c
+new file mode 100644
+index 0000000..97680d4
+--- /dev/null
++++ b/main/tokenizing.c
+@@ -0,0 +1,42 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "tokenizing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while(nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++}
++
++
++
++
++
++/* Version 2 */
++
++
++
++/* Version 3 */
++
++
++
++
+diff --git a/main/tokenizing.h b/main/tokenizing.h
+new file mode 100644
+index 0000000..d377740
+--- /dev/null
++++ b/main/tokenizing.h
+@@ -0,0 +1,10 @@
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++#endif 
++
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
+new file mode 100644
+index 0000000..ce82fd8
+Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
+new file mode 100644
+index 0000000..95cfcc7
+Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
+new file mode 100644
+index 0000000..b2ba1dc
+Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db differ
+diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
+new file mode 100644
+index 0000000..6a221a6
+--- /dev/null
++++ b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx	
+@@ -0,0 +1,9 @@
++Manipulation Module
++
++This module concatenates 2 strings sized to a defined macro.
++
++Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
++
++An input of `q' was tested to ensure it would result in ending the program.
++
++A string that is greater than the initialized memory was tested to ensure it would not crash the program.
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
+new file mode 100644
+index 0000000..1bcc78d
+--- /dev/null
++++ b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c	
+@@ -0,0 +1,5 @@
++int main(void) {
++
++	manipulating();
++	return 0;
++}
+\ No newline at end of file
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/Manipulation V1/Manipulation V1/manipulating.c
+new file mode 100644
+index 0000000..3de4a55
+--- /dev/null
++++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.c	
+@@ -0,0 +1,28 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 80
++#include "manipulating.h"
++
++// V1
++
++void manipulating(void) {
++	printf("*** Start if Concatenating Strings Demo ***\n");
++	char string1[BUFFER_SIZE];
++	char string2[BUFFER_SIZE];
++	do {
++		//Prompt for first string
++		printf("Type the 1st string (q - to quit):\n");
++		fgets(string1, BUFFER_SIZE, stdin);
++		string1[strlen(string1) - 1] = '\0';
++		//if q was entered quit program
++		if ((strcmp(string1, "q") != 0)) {
++			printf("Type the 2nd string:\n");
++			//promt for 2nd string
++			fgets(string2, BUFFER_SIZE, stdin);
++			string2[strlen(string2) - 1] = '\0';
++			//concatenate string
++			strcat(string1, string2);
++			printf("Concatenated string is \'%s\'\n", string1);
++		}
++	} while (strcmp(string1, "q") != 0);
++	printf("*** End of Concatenating Strings Demo ***\n\n");
++}
+\ No newline at end of file
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/Manipulation V1/Manipulation V1/manipulating.h
+new file mode 100644
+index 0000000..434f748
+--- /dev/null
++++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.h	
+@@ -0,0 +1,6 @@
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++#include <stdio.h>
++#include <string.h>
++void manipulating(void);
++#endif
+\ No newline at end of file
+diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
+new file mode 100644
+index 0000000..de4db70
+Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx differ
+diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/tokenizing/PM-Notes-DarianGrijalba.docx
+new file mode 100644
+index 0000000..79615b7
+--- /dev/null
++++ b/tokenizing/PM-Notes-DarianGrijalba.docx
+@@ -0,0 +1,35 @@
++                                 Tokenizing v1
++Test Cases
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space  (q - to quit):
++Inputs: "The"
++Outputs: Word #1 is The
++Type a few words separated by space  (q - to quit):
++Inputs: "q"
++*** End of Tokenizing Words Demo ***
++
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space  (q - to quit):
++Inputs: "Have A Good Day"
++Outputs: Word #1 is Have
++	   Word #2 is A
++	   Word #3 is Good
++	   Word #4 is Day
++Type a few words separated by space  (q - to quit):
++Inputs: "q"
++*** End of Tokenizing Words Demo ***
++
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space  (q - to quit):
++Inputs: "HaveA                                Gooooooooooooood                               Day"
++Outputs: Word #1 is HaveA
++	   Word #2 is Goooooooooooooood
++	   Word #3 is Day
++Type a few words separated by space  (q - to quit):
++Inputs: "q"
++*** End of Tokenizing Words Demo ***
++
++Basically will calculate the amount of words the user inputted and list them out one by one 
++
++
++
+diff --git a/tokenizing/tokenizing.c b/tokenizing/tokenizing.c
+new file mode 100644
+index 0000000..cd11fd7
+--- /dev/null
++++ b/tokenizing/tokenizing.c
+@@ -0,0 +1,42 @@
++#define _CRT_SECURE_NO_WARNINGS
++#define BUFFER_SIZE 300
++#include "Tokenzing.h"
++
++/* Version 1 */
++void tokenizing(void)
++{
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];
++	char* nextWord = NULL;
++	int wordsCounter;
++	do {
++		printf("Type a few words seperated by space  (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);
++		words[strlen(words) - 1] = '\0';
++		if (strcmp(words, "q") != 0) {
++			nextWord = strtok(words, " ");
++			wordsCounter = 1;
++			while(nextWord) {
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
++				nextWord = strtok(NULL, " ");
++
++			}
++		}
++	} while (strcmp(words, "q") != 0);
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++}
++
++
++
++
++
++/* Version 2 */
++
++
++
++/* Version 3 */
++
++
++
++
+diff --git a/tokenizing/tokenizing.h b/tokenizing/tokenizing.h
+new file mode 100644
+index 0000000..c136582
+--- /dev/null
++++ b/tokenizing/tokenizing.h
+@@ -0,0 +1,16 @@
++#ifndef _TOKENIZING_H
++#define _TOKENIZING_H
++
++#include <stdio.h>
++#include <string.h>
++
++void tokenizing(void);
++
++int main() {
++    // Call your tokenizing function or include it in your main function
++    tokenizing();
++
++    return 0;
++}
++#endif 
++
+
+commit 306f1ee35754c5c7e56bc11fb2c61f66956b2f9f
+Author: Axton Smith <axtonsmith@gmail.com>
+Date:   Wed Dec 6 21:02:16 2023 -0500
+
+    Initial commit
+
+diff --git a/README.md b/README.md
+new file mode 100644
+index 0000000..ec7a918
+--- /dev/null
++++ b/README.md
+@@ -0,0 +1,2 @@
++# CPR101group3
++Final project for a computer principles for programmers course

commit 01f89458ddc774511e45d502a67641a170760617
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Sat Dec 9 00:03:26 2023 -0500

    Add fundamentals module and add to main

diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
index 814fb41..b26bd94 100644
Binary files a/V2/Final-Project-Plan.xlsx and b/V2/Final-Project-Plan.xlsx differ
diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
index 40e66b0..d7fe3d1 100644
Binary files a/V2/Final-Project-Test-Cases.xlsx and b/V2/Final-Project-Test-Cases.xlsx differ
diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
deleted file mode 100644
index 92459be..0000000
Binary files a/V2/Tokenizing.zip and /dev/null differ
diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
deleted file mode 100644
index 92459be..0000000
Binary files a/V2/Tokenzing/Tokenizing.zip and /dev/null differ
diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
deleted file mode 100644
index e69de29..0000000
diff --git a/V2/fundamentals/Fundamentals Module V2.docx b/V2/fundamentals/Fundamentals Module V2.docx
new file mode 100644
index 0000000..f98ecba
--- /dev/null
+++ b/V2/fundamentals/Fundamentals Module V2.docx	
@@ -0,0 +1,3 @@
+Fundamentals Module V2
+This module tells you the length of an input string.
+Testing: To test the module, I will use varying lengths of string with and without spaces, as well as an empty string.
diff --git a/V2/fundamentals/fundamentals-test-cases.xlsx b/V2/fundamentals/fundamentals-test-cases.xlsx
new file mode 100644
index 0000000..5ee1fc1
Binary files /dev/null and b/V2/fundamentals/fundamentals-test-cases.xlsx differ
diff --git a/V2/fundamentals/fundamentals.c b/V2/fundamentals/fundamentals.c
new file mode 100644
index 0000000..4596c8d
--- /dev/null
+++ b/V2/fundamentals/fundamentals.c
@@ -0,0 +1,49 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#define NUM_INPUT_SIZE 10
+
+#include "fundamentals.h"
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals() {
+/* Version 1 */
+	printf("*** Start of Indexing Strings Demo ***\n");
+	char buffer1[BUFFER_SIZE];
+	char numInput[NUM_INPUT_SIZE];
+	size_t position;
+	do
+	{
+		printf("Type not empty string (q - to quit):\n");
+		fgets(buffer1, BUFFER_SIZE, stdin);
+		buffer1[strlen(buffer1) - 1] = '\0';
+		if (strcmp(buffer1, "q") != 0)
+		{
+			printf("Type the character position within the string:\n");
+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+			numInput[strlen(numInput) - 1] = '\0';
+			position = atoi(numInput);
+			if (position >= strlen(buffer1))
+			{
+				position = strlen(buffer1) - 1;
+				printf("Too big... Position reduced to max. available\n");
+			}
+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+		}
+	} while (strcmp(buffer1, "q") != 0);
+	printf("*** End of Indexing Strings Demo ***\n\n");
+
+	/* Version 2 */
+	printf("*** Start of Measuring Strings Demo ***\n");
+	char buffer2[BUFFER_SIZE];
+	do {
+		printf("Type a string (q - to quit):\n");
+		fgets(buffer2, BUFFER_SIZE, stdin);
+		buffer2[strlen(buffer2) - 1] = '\0';
+		if (strcmp(buffer2, "q") != 0)
+			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+	} while (strcmp(buffer2, "q") != 0);
+	printf("*** End of Measuring Strings Demo ***\n\n");
+
+	/* Version 3 */
+	//>> insert here
+}
\ No newline at end of file
diff --git a/V2/fundamentals/fundamentals.h b/V2/fundamentals/fundamentals.h
new file mode 100644
index 0000000..14a6f4f
--- /dev/null
+++ b/V2/fundamentals/fundamentals.h
@@ -0,0 +1,11 @@
+#ifndef _FUNDAMENTALS_H_
+#define _FUNDAMENTALS_H_
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals(void);
+
+#endif
\ No newline at end of file
diff --git a/V2/fundamentals/main.c b/V2/fundamentals/main.c
new file mode 100644
index 0000000..1225e71
--- /dev/null
+++ b/V2/fundamentals/main.c
@@ -0,0 +1,7 @@
+#include "fundamentals.h"
+
+int main(void)
+{
+	fundamentals();
+	return 0;
+}
\ No newline at end of file
diff --git a/V2/main/fundamentals.c b/V2/main/fundamentals.c
new file mode 100644
index 0000000..4596c8d
--- /dev/null
+++ b/V2/main/fundamentals.c
@@ -0,0 +1,49 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#define NUM_INPUT_SIZE 10
+
+#include "fundamentals.h"
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals() {
+/* Version 1 */
+	printf("*** Start of Indexing Strings Demo ***\n");
+	char buffer1[BUFFER_SIZE];
+	char numInput[NUM_INPUT_SIZE];
+	size_t position;
+	do
+	{
+		printf("Type not empty string (q - to quit):\n");
+		fgets(buffer1, BUFFER_SIZE, stdin);
+		buffer1[strlen(buffer1) - 1] = '\0';
+		if (strcmp(buffer1, "q") != 0)
+		{
+			printf("Type the character position within the string:\n");
+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+			numInput[strlen(numInput) - 1] = '\0';
+			position = atoi(numInput);
+			if (position >= strlen(buffer1))
+			{
+				position = strlen(buffer1) - 1;
+				printf("Too big... Position reduced to max. available\n");
+			}
+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+		}
+	} while (strcmp(buffer1, "q") != 0);
+	printf("*** End of Indexing Strings Demo ***\n\n");
+
+	/* Version 2 */
+	printf("*** Start of Measuring Strings Demo ***\n");
+	char buffer2[BUFFER_SIZE];
+	do {
+		printf("Type a string (q - to quit):\n");
+		fgets(buffer2, BUFFER_SIZE, stdin);
+		buffer2[strlen(buffer2) - 1] = '\0';
+		if (strcmp(buffer2, "q") != 0)
+			printf("The length of \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+	} while (strcmp(buffer2, "q") != 0);
+	printf("*** End of Measuring Strings Demo ***\n\n");
+
+	/* Version 3 */
+	//>> insert here
+}
\ No newline at end of file
diff --git a/V2/main/fundamentals.h b/V2/main/fundamentals.h
new file mode 100644
index 0000000..14a6f4f
--- /dev/null
+++ b/V2/main/fundamentals.h
@@ -0,0 +1,11 @@
+#ifndef _FUNDAMENTALS_H_
+#define _FUNDAMENTALS_H_
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals(void);
+
+#endif
\ No newline at end of file
diff --git a/V2/Tokenzing/Tokenzing.c b/V2/main/tokenizing.c
similarity index 95%
rename from V2/Tokenzing/Tokenzing.c
rename to V2/main/tokenizing.c
index 734c7c6..aa1e13a 100644
--- a/V2/Tokenzing/Tokenzing.c
+++ b/V2/main/tokenizing.c
@@ -1,62 +1,62 @@
-#define _CRT_SECURE_NO_WARNINGS
-#define BUFFER_SIZE 300
-#include "Tokenzing.h"
-
-/* Version 1 */
-void tokenizing(void)
-{
-	/*printf("*** Start of Tokenizing Words Demo ***\n");
-	char words[BUFFER_SIZE];
-	char* nextWord = NULL;
-	int wordsCounter;
-	do {
-		printf("Type a few words seperated by space  (q - to quit):\n");
-		fgets(words, BUFFER_SIZE, stdin);
-		words[strlen(words) - 1] = '\0';
-		if (strcmp(words, "q") != 0) {
-			nextWord = strtok(words, " ");
-			wordsCounter = 1;
-			while (nextWord) {
-				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
-				nextWord = strtok(NULL, " ");
-
-			}
-		}
-	} while (strcmp(words, "q") != 0);
-	printf("*** End of Tokenizing Words Demo ***\n\n");*/
-
-
-
-
-
-
-
-	/* Version 2 */
-	printf("*** Start of Tokenizing Words Demo ***\n");
-	char phrases[BUFFER_SIZE];
-	char* nextphrase = NULL;
-	int phrasesCounter;
-	do
-	{
-		printf("Type a few phrases seperated by space  (q - to quit):\n");
-		fgets(phrases, BUFFER_SIZE, stdin);
-		phrases[strlen(phrases) - 1] = '\0';
-		if (strcmp(phrases, "q") != 0)
-		{
-			nextphrase = strtok(phrases, " ");
-			phrasesCounter = 1;
-			while (nextphrase)
-			{
-				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
-				nextphrase = strtok(NULL, " ");
-			}
-		}
-	} while (strcmp(phrases, "q") != 0);
-	printf("*** End of Tokenizing Words Demo ***\n\n");
-
-	return 0;
-}
-
-
-
-	
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 300
+#include "Tokenzing.h"
+
+/* Version 1 */
+void tokenizing(void)
+{
+	/*printf("*** Start of Tokenizing Words Demo ***\n");
+	char words[BUFFER_SIZE];
+	char* nextWord = NULL;
+	int wordsCounter;
+	do {
+		printf("Type a few words seperated by space  (q - to quit):\n");
+		fgets(words, BUFFER_SIZE, stdin);
+		words[strlen(words) - 1] = '\0';
+		if (strcmp(words, "q") != 0) {
+			nextWord = strtok(words, " ");
+			wordsCounter = 1;
+			while (nextWord) {
+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+				nextWord = strtok(NULL, " ");
+
+			}
+		}
+	} while (strcmp(words, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+
+
+
+
+
+
+
+	/* Version 2 */
+	printf("*** Start of Tokenizing Words Demo ***\n");
+	char phrases[BUFFER_SIZE];
+	char* nextphrase = NULL;
+	int phrasesCounter;
+	do
+	{
+		printf("Type a few phrases seperated by space  (q - to quit):\n");
+		fgets(phrases, BUFFER_SIZE, stdin);
+		phrases[strlen(phrases) - 1] = '\0';
+		if (strcmp(phrases, "q") != 0)
+		{
+			nextphrase = strtok(phrases, " ");
+			phrasesCounter = 1;
+			while (nextphrase)
+			{
+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+				nextphrase = strtok(NULL, " ");
+			}
+		}
+	} while (strcmp(phrases, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");
+
+	return 0;
+}
+
+
+
+	
diff --git a/V2/Tokenzing/Tokenzing.h b/V2/main/tokenizing.h
similarity index 91%
rename from V2/Tokenzing/Tokenzing.h
rename to V2/main/tokenizing.h
index c8bfdb8..d96fde1 100644
--- a/V2/Tokenzing/Tokenzing.h
+++ b/V2/main/tokenizing.h
@@ -1,15 +1,15 @@
-#ifndef _TOKENIZING_H
-#define _TOKENIZING_H
-
-#include <stdio.h>
-#include <string.h>
-
-void tokenizing(void);
-
-int main() {
-    // Call your tokenizing function or include it in your main function
-    tokenizing();
-
-    return 0;
-}
+#ifndef _TOKENIZING_H
+#define _TOKENIZING_H
+
+#include <stdio.h>
+#include <string.h>
+
+void tokenizing(void);
+
+int main() {
+    // Call your tokenizing function or include it in your main function
+    tokenizing();
+
+    return 0;
+}
 #endif 
\ No newline at end of file
diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/tokenizing/Tokenizing v2 PM-notes.docx
similarity index 100%
rename from V2/Tokenzing/Tokenizing v2 PM-notes.docx
rename to V2/tokenizing/Tokenizing v2 PM-notes.docx
diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/tokenizing/Tokenzing_v2_test-cases.xlsx
similarity index 100%
rename from V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
rename to V2/tokenizing/Tokenzing_v2_test-cases.xlsx
diff --git a/V2/tokenizing/tokenizing.c b/V2/tokenizing/tokenizing.c
new file mode 100644
index 0000000..aa1e13a
--- /dev/null
+++ b/V2/tokenizing/tokenizing.c
@@ -0,0 +1,62 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 300
+#include "Tokenzing.h"
+
+/* Version 1 */
+void tokenizing(void)
+{
+	/*printf("*** Start of Tokenizing Words Demo ***\n");
+	char words[BUFFER_SIZE];
+	char* nextWord = NULL;
+	int wordsCounter;
+	do {
+		printf("Type a few words seperated by space  (q - to quit):\n");
+		fgets(words, BUFFER_SIZE, stdin);
+		words[strlen(words) - 1] = '\0';
+		if (strcmp(words, "q") != 0) {
+			nextWord = strtok(words, " ");
+			wordsCounter = 1;
+			while (nextWord) {
+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+				nextWord = strtok(NULL, " ");
+
+			}
+		}
+	} while (strcmp(words, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+
+
+
+
+
+
+
+	/* Version 2 */
+	printf("*** Start of Tokenizing Words Demo ***\n");
+	char phrases[BUFFER_SIZE];
+	char* nextphrase = NULL;
+	int phrasesCounter;
+	do
+	{
+		printf("Type a few phrases seperated by space  (q - to quit):\n");
+		fgets(phrases, BUFFER_SIZE, stdin);
+		phrases[strlen(phrases) - 1] = '\0';
+		if (strcmp(phrases, "q") != 0)
+		{
+			nextphrase = strtok(phrases, " ");
+			phrasesCounter = 1;
+			while (nextphrase)
+			{
+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+				nextphrase = strtok(NULL, " ");
+			}
+		}
+	} while (strcmp(phrases, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");
+
+	return 0;
+}
+
+
+
+	
diff --git a/V2/tokenizing/tokenizing.h b/V2/tokenizing/tokenizing.h
new file mode 100644
index 0000000..d96fde1
--- /dev/null
+++ b/V2/tokenizing/tokenizing.h
@@ -0,0 +1,15 @@
+#ifndef _TOKENIZING_H
+#define _TOKENIZING_H
+
+#include <stdio.h>
+#include <string.h>
+
+void tokenizing(void);
+
+int main() {
+    // Call your tokenizing function or include it in your main function
+    tokenizing();
+
+    return 0;
+}
+#endif 
\ No newline at end of file

commit b3a93cc2072faf105ab22552011b51ace61475d4
Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
Date:   Fri Dec 8 23:48:26 2023 -0500

    Add files via upload

diff --git a/V2/Tokenzing/Tokenizing v2 PM-notes.docx b/V2/Tokenzing/Tokenizing v2 PM-notes.docx
new file mode 100644
index 0000000..a9a5ded
--- /dev/null
+++ b/V2/Tokenzing/Tokenizing v2 PM-notes.docx	
@@ -0,0 +1,3 @@
+                            Tokenizing v2 PM-notes
+Basically this was the same process as v1 and even the code of the Tokenizing v2 was  basically exactly the same as v1 just changed to every phrase in the sentence instead of every word that's it 
+                                       
diff --git a/V2/Tokenzing/Tokenizing.zip b/V2/Tokenzing/Tokenizing.zip
new file mode 100644
index 0000000..92459be
Binary files /dev/null and b/V2/Tokenzing/Tokenizing.zip differ
diff --git a/V2/Tokenzing/Tokenizingmain.c b/V2/Tokenzing/Tokenizingmain.c
new file mode 100644
index 0000000..e69de29
diff --git a/V2/Tokenzing/Tokenzing.c b/V2/Tokenzing/Tokenzing.c
new file mode 100644
index 0000000..734c7c6
--- /dev/null
+++ b/V2/Tokenzing/Tokenzing.c
@@ -0,0 +1,62 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 300
+#include "Tokenzing.h"
+
+/* Version 1 */
+void tokenizing(void)
+{
+	/*printf("*** Start of Tokenizing Words Demo ***\n");
+	char words[BUFFER_SIZE];
+	char* nextWord = NULL;
+	int wordsCounter;
+	do {
+		printf("Type a few words seperated by space  (q - to quit):\n");
+		fgets(words, BUFFER_SIZE, stdin);
+		words[strlen(words) - 1] = '\0';
+		if (strcmp(words, "q") != 0) {
+			nextWord = strtok(words, " ");
+			wordsCounter = 1;
+			while (nextWord) {
+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+				nextWord = strtok(NULL, " ");
+
+			}
+		}
+	} while (strcmp(words, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");*/
+
+
+
+
+
+
+
+	/* Version 2 */
+	printf("*** Start of Tokenizing Words Demo ***\n");
+	char phrases[BUFFER_SIZE];
+	char* nextphrase = NULL;
+	int phrasesCounter;
+	do
+	{
+		printf("Type a few phrases seperated by space  (q - to quit):\n");
+		fgets(phrases, BUFFER_SIZE, stdin);
+		phrases[strlen(phrases) - 1] = '\0';
+		if (strcmp(phrases, "q") != 0)
+		{
+			nextphrase = strtok(phrases, " ");
+			phrasesCounter = 1;
+			while (nextphrase)
+			{
+				printf("phrase #%d is \'%s\'\n", phrasesCounter++, nextphrase);
+				nextphrase = strtok(NULL, " ");
+			}
+		}
+	} while (strcmp(phrases, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");
+
+	return 0;
+}
+
+
+
+	
diff --git a/V2/Tokenzing/Tokenzing.h b/V2/Tokenzing/Tokenzing.h
new file mode 100644
index 0000000..c8bfdb8
--- /dev/null
+++ b/V2/Tokenzing/Tokenzing.h
@@ -0,0 +1,15 @@
+#ifndef _TOKENIZING_H
+#define _TOKENIZING_H
+
+#include <stdio.h>
+#include <string.h>
+
+void tokenizing(void);
+
+int main() {
+    // Call your tokenizing function or include it in your main function
+    tokenizing();
+
+    return 0;
+}
+#endif 
\ No newline at end of file
diff --git a/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx
new file mode 100644
index 0000000..cb18ef6
Binary files /dev/null and b/V2/Tokenzing/Tokenzing_v2_test-cases.xlsx differ

commit a59e9df43a0eb5e8a9a56bf396fa2e938c3698ad
Author: YoungMaple55 <152197093+YoungMaple55@users.noreply.github.com>
Date:   Fri Dec 8 23:47:17 2023 -0500

    Add files via upload

diff --git a/V2/Tokenizing.zip b/V2/Tokenizing.zip
new file mode 100644
index 0000000..92459be
Binary files /dev/null and b/V2/Tokenizing.zip differ

commit 91039924c420b1f4e2573bfb2371b23dc5645a4e
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Fri Dec 8 22:22:30 2023 -0500

    Add manipulations and conversions test cases to Final-Project-Test-Cases.xlsx

diff --git a/V2/Final-Project-Plan.xlsx b/V2/Final-Project-Plan.xlsx
new file mode 100644
index 0000000..814fb41
Binary files /dev/null and b/V2/Final-Project-Plan.xlsx differ
diff --git a/V2/Final-Project-Test-Cases.xlsx b/V2/Final-Project-Test-Cases.xlsx
new file mode 100644
index 0000000..40e66b0
Binary files /dev/null and b/V2/Final-Project-Test-Cases.xlsx differ
diff --git a/V2/conversions/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
index 43a8d2a..f447878 100644
Binary files a/V2/conversions/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
diff --git a/V2/main/converting.c b/V2/main/converting.c
new file mode 100644
index 0000000..9f0d0ac
--- /dev/null
+++ b/V2/main/converting.c
@@ -0,0 +1,47 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+
+#include "converting.h"
+
+// User inputs a number as a string, then it is returned as an int
+void converting() {
+/* Version 1 */
+	printf("*** Start of Converting Strings to int Demo ***\n");
+	char intString[BUFFER_SIZE];
+	int intNumber;
+	do
+	{
+		printf("Type an int numeric string (q - to quit):\n");
+		fgets(intString, BUFFER_SIZE, stdin);
+		intString[strlen(intString) - 1] = '\0';
+		if (strcmp(intString, "q") != 0)
+		{
+			intNumber = atoi(intString);
+			printf("Converted number is %d\n", intNumber);
+		}
+	}
+	while (strcmp(intString, "q") != 0);
+	printf("*** End of Converting Strings to int Demo ***\n\n");
+
+/* Version 2 */
+	printf("*** Start of Converting Strings to double Demo ***\n");
+	char doubleString[BUFFER_SIZE];
+	double doubleNumber;
+	do
+	{
+		printf("Type the double numeric string (q - to quit):\n");
+		fgets(doubleString, BUFFER_SIZE, stdin);
+		doubleString[strlen(doubleString) - 1] = '\0';
+		if ((strcmp(doubleString, "q") != 0))
+		{
+			doubleNumber = atof(doubleString);
+			printf("Converted number is %f\n", doubleNumber);
+		}
+	} while (strcmp(doubleString, "q") != 0);
+	printf("*** End of Converting Strings to double Demo ***\n\n");
+
+/* Version 3 */
+//>> insert here
+
+
+}
diff --git a/V2/main/converting.h b/V2/main/converting.h
new file mode 100644
index 0000000..94e86ab
--- /dev/null
+++ b/V2/main/converting.h
@@ -0,0 +1,11 @@
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+// User inputs a number as a string, then it is returned as an int
+void converting(void);
+
+#endif
\ No newline at end of file
diff --git a/V2/main/manipulating.c b/V2/main/manipulating.c
new file mode 100644
index 0000000..7ba26cd
--- /dev/null
+++ b/V2/main/manipulating.c
@@ -0,0 +1,61 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "manipulating.h"
+
+// V1
+
+void manipulating(void) {
+	printf("*** Start of Concatenating Strings Demo ***\n");
+	char string1[BUFFER_SIZE];
+	char string2[BUFFER_SIZE];
+	do {
+		//Prompt for first string
+		printf("Type the 1st string (q - to quit):\n");
+		fgets(string1, BUFFER_SIZE, stdin);
+		string1[strlen(string1) - 1] = '\0';
+		//if q was entered quit program
+		if ((strcmp(string1, "q") != 0)) {
+			printf("Type the 2nd string:\n");
+			//promt for 2nd string
+			fgets(string2, BUFFER_SIZE, stdin);
+			string2[strlen(string2) - 1] = '\0';
+			//concatenate string
+			strcat(string1, string2);
+			printf("Concatenated string is \'%s\'\n", string1);
+		}
+	} while (strcmp(string1, "q") != 0);
+	printf("*** End of Concatenating Strings Demo ***\n\n");
+
+	//V2
+	printf("***Start of Comparing Strings Demon***\n");
+	char compare1[BUFFER_SIZE];
+	char compare2[BUFFER_SIZE];
+	int result;
+	do {
+		//Receive user input for the 1st string
+		printf("Type the 1st string to compare (q - to quit):\n");
+		fgets(compare1, BUFFER_SIZE, stdin);
+		//Add an ending NULL to the 1st string
+		compare1[strlen(compare1) - 1] = '\0';
+		//Check that the user did not input 'q' to quit
+		if (strcmp(compare1, "q") != 0) {
+			//Receive user input for the 2nd string
+			printf("Type the 2nd string to compare:\n");
+			fgets(compare2, BUFFER_SIZE, stdin);
+			//Add an ending NULL to the 2nd string
+			compare2[strlen(compare2) - 1] = '\0';
+			result = strcmp(compare1, compare2);
+			//Check if the 1st string < than the 2nd string
+			if (result < 0)
+				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
+			//Check if the strings are equal
+			else if (result == 0)
+				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
+			//Check if the first string is greater than the 2nd string
+			else
+				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
+
+		}
+	} while (strcmp(compare1, "q") != 0);
+	printf("*** End of Comparing Strings Demon ***\n\n");
+}
\ No newline at end of file
diff --git a/V2/main/manipulating.h b/V2/main/manipulating.h
new file mode 100644
index 0000000..434f748
--- /dev/null
+++ b/V2/main/manipulating.h
@@ -0,0 +1,6 @@
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+#include <stdio.h>
+#include <string.h>
+void manipulating(void);
+#endif
\ No newline at end of file
diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
index 323e377..dc49fc2 100644
Binary files a/V2/manipulations/manipulation-test-cases.xlsx and b/V2/manipulations/manipulation-test-cases.xlsx differ

commit a43fbc4a9b1fb232cd9c5c46d4bbff26133c5afb
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Fri Dec 8 22:05:42 2023 -0500

    Add conversions module to V2

diff --git a/V1/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
deleted file mode 100644
index ea57e7e..0000000
Binary files a/V1/conversions/conversionsV1.zip and /dev/null differ
diff --git a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
deleted file mode 100644
index dc61b8f..0000000
--- a/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
+++ /dev/null
@@ -1,4 +0,0 @@
-Conversion Module
-This module takes string inputs that are numeric and converts it to an integer of the number in the string.
-Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
-We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
diff --git a/V1/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
deleted file mode 100644
index a2cffb9..0000000
Binary files a/V1/conversions/conversionsV1/conversions-test-cases.xlsx and /dev/null differ
diff --git a/V1/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
deleted file mode 100644
index dc92171..0000000
--- a/V1/conversions/conversionsV1/converting.c
+++ /dev/null
@@ -1,34 +0,0 @@
-#define _CRT_SECURE_NO_WARNINGS
-#define BUFFER_SIZE 80
-
-#include "converting.h"
-
-// User inputs a number as a string, then it is returned as an int
-void converting() {
-/* Version 1 */
-	printf("*** Start of Converting Strings to int Demo ***\n");
-	char intString[BUFFER_SIZE];
-	int intNumber;
-	do
-	{
-		printf("Type an int numeric string (q - to quit):\n");
-		fgets(intString, BUFFER_SIZE, stdin);
-		intString[strlen(intString) - 1] = '\0';
-		if (strcmp(intString, "q") != 0)
-		{
-			intNumber = atoi(intString);
-			printf("Converted number is %d\n", intNumber);
-		}
-	}
-	while (strcmp(intString, "q") != 0);
-	printf("*** End of Converting Strings to int Demo ***\n\n");
-
-/* Version 2 */
-//>> insert here
-
-
-/* Version 3 */
-//>> insert here
-
-
-}
diff --git a/V1/conversions/converting.c b/V1/conversions/templates/converting.c
similarity index 100%
rename from V1/conversions/converting.c
rename to V1/conversions/templates/converting.c
diff --git a/V1/conversions/converting_header.png b/V1/conversions/templates/converting_header.png
similarity index 100%
rename from V1/conversions/converting_header.png
rename to V1/conversions/templates/converting_header.png
diff --git a/V1/conversions/converting_v1.png b/V1/conversions/templates/converting_v1.png
similarity index 100%
rename from V1/conversions/converting_v1.png
rename to V1/conversions/templates/converting_v1.png
diff --git a/V1/conversions/converting_v2.png b/V1/conversions/templates/converting_v2.png
similarity index 100%
rename from V1/conversions/converting_v2.png
rename to V1/conversions/templates/converting_v2.png
diff --git a/V1/conversions/converting_v3.png b/V1/conversions/templates/converting_v3.png
similarity index 100%
rename from V1/conversions/converting_v3.png
rename to V1/conversions/templates/converting_v3.png
diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/PM-Notes-AxtonSmith.docx
similarity index 60%
rename from V2/conversions/V1/PM-Notes-AxtonSmith.docx
rename to V2/conversions/PM-Notes-AxtonSmith.docx
index dc61b8f..eb38a98 100644
--- a/V2/conversions/V1/PM-Notes-AxtonSmith.docx
+++ b/V2/conversions/PM-Notes-AxtonSmith.docx
@@ -2,3 +2,4 @@ Conversion Module
 This module takes string inputs that are numeric and converts it to an integer of the number in the string.
 Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
 We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
+Version 2 of this module will convert the input into double values.
diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
deleted file mode 100644
index 94e86ab..0000000
--- a/V2/conversions/V1/converting.h
+++ /dev/null
@@ -1,11 +0,0 @@
-#ifndef _CONVERTING_H_
-#define _CONVERTING_H_
-
-#include <stdio.h>
-#include <string.h>
-#include <stdlib.h>
-
-// User inputs a number as a string, then it is returned as an int
-void converting(void);
-
-#endif
\ No newline at end of file
diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
deleted file mode 100644
index 6a8e436..0000000
--- a/V2/conversions/V1/main.c
+++ /dev/null
@@ -1,7 +0,0 @@
-#include "converting.h"
-
-int main(void)
-{
-	converting();
-	return 0;
-}
\ No newline at end of file
diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
deleted file mode 100644
index dc61b8f..0000000
--- a/V2/conversions/V2/PM-Notes-AxtonSmith.docx
+++ /dev/null
@@ -1,4 +0,0 @@
-Conversion Module
-This module takes string inputs that are numeric and converts it to an integer of the number in the string.
-Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
-We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
deleted file mode 100644
index a2cffb9..0000000
Binary files a/V2/conversions/V2/conversions-test-cases.xlsx and /dev/null differ
diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
deleted file mode 100644
index dc92171..0000000
--- a/V2/conversions/V2/converting.c
+++ /dev/null
@@ -1,34 +0,0 @@
-#define _CRT_SECURE_NO_WARNINGS
-#define BUFFER_SIZE 80
-
-#include "converting.h"
-
-// User inputs a number as a string, then it is returned as an int
-void converting() {
-/* Version 1 */
-	printf("*** Start of Converting Strings to int Demo ***\n");
-	char intString[BUFFER_SIZE];
-	int intNumber;
-	do
-	{
-		printf("Type an int numeric string (q - to quit):\n");
-		fgets(intString, BUFFER_SIZE, stdin);
-		intString[strlen(intString) - 1] = '\0';
-		if (strcmp(intString, "q") != 0)
-		{
-			intNumber = atoi(intString);
-			printf("Converted number is %d\n", intNumber);
-		}
-	}
-	while (strcmp(intString, "q") != 0);
-	printf("*** End of Converting Strings to int Demo ***\n\n");
-
-/* Version 2 */
-//>> insert here
-
-
-/* Version 3 */
-//>> insert here
-
-
-}
diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
deleted file mode 100644
index 94e86ab..0000000
--- a/V2/conversions/V2/converting.h
+++ /dev/null
@@ -1,11 +0,0 @@
-#ifndef _CONVERTING_H_
-#define _CONVERTING_H_
-
-#include <stdio.h>
-#include <string.h>
-#include <stdlib.h>
-
-// User inputs a number as a string, then it is returned as an int
-void converting(void);
-
-#endif
\ No newline at end of file
diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
deleted file mode 100644
index 6a8e436..0000000
--- a/V2/conversions/V2/main.c
+++ /dev/null
@@ -1,7 +0,0 @@
-#include "converting.h"
-
-int main(void)
-{
-	converting();
-	return 0;
-}
\ No newline at end of file
diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/conversions-test-cases.xlsx
similarity index 53%
rename from V2/conversions/V1/conversions-test-cases.xlsx
rename to V2/conversions/conversions-test-cases.xlsx
index a2cffb9..43a8d2a 100644
Binary files a/V2/conversions/V1/conversions-test-cases.xlsx and b/V2/conversions/conversions-test-cases.xlsx differ
diff --git a/V2/conversions/V1/converting.c b/V2/conversions/converting.c
similarity index 57%
rename from V2/conversions/V1/converting.c
rename to V2/conversions/converting.c
index dc92171..9f0d0ac 100644
--- a/V2/conversions/V1/converting.c
+++ b/V2/conversions/converting.c
@@ -24,8 +24,21 @@ void converting() {
 	printf("*** End of Converting Strings to int Demo ***\n\n");
 
 /* Version 2 */
-//>> insert here
-
+	printf("*** Start of Converting Strings to double Demo ***\n");
+	char doubleString[BUFFER_SIZE];
+	double doubleNumber;
+	do
+	{
+		printf("Type the double numeric string (q - to quit):\n");
+		fgets(doubleString, BUFFER_SIZE, stdin);
+		doubleString[strlen(doubleString) - 1] = '\0';
+		if ((strcmp(doubleString, "q") != 0))
+		{
+			doubleNumber = atof(doubleString);
+			printf("Converted number is %f\n", doubleNumber);
+		}
+	} while (strcmp(doubleString, "q") != 0);
+	printf("*** End of Converting Strings to double Demo ***\n\n");
 
 /* Version 3 */
 //>> insert here
diff --git a/V1/conversions/conversionsV1/converting.h b/V2/conversions/converting.h
similarity index 100%
rename from V1/conversions/conversionsV1/converting.h
rename to V2/conversions/converting.h
diff --git a/V1/conversions/conversionsV1/main.c b/V2/conversions/main.c
similarity index 100%
rename from V1/conversions/conversionsV1/main.c
rename to V2/conversions/main.c
diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
deleted file mode 100644
index 88b340e..0000000
--- a/V2/conversions/templates/converting.c
+++ /dev/null
@@ -1,16 +0,0 @@
-#include "converting.h"
-
-void converting() {
-/* Version 1 */
->> insert here
-
-
-/* Version 2 */
->> insert here
-
-
-/* Version 3 */
->> insert here
-
-
-}
diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
deleted file mode 100644
index 4ffb3a8..0000000
Binary files a/V2/conversions/templates/converting_header.png and /dev/null differ
diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
deleted file mode 100644
index 50f5734..0000000
Binary files a/V2/conversions/templates/converting_v1.png and /dev/null differ
diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
deleted file mode 100644
index edcdf1e..0000000
Binary files a/V2/conversions/templates/converting_v2.png and /dev/null differ
diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
deleted file mode 100644
index 146285f..0000000
Binary files a/V2/conversions/templates/converting_v3.png and /dev/null differ

commit d381ca2bc9cb411356a214dcb09764517b1b8dba
Author: brandondoray01 <117381471+brandondoray01@users.noreply.github.com>
Date:   Fri Dec 8 18:43:36 2023 -0500

    Add manipulations module to V2

diff --git a/V2/manipulations/PM-Notes-Brandon-Doray.docx b/V2/manipulations/PM-Notes-Brandon-Doray.docx
new file mode 100644
index 0000000..f3443e8
--- /dev/null
+++ b/V2/manipulations/PM-Notes-Brandon-Doray.docx
@@ -0,0 +1,25 @@
+Manipulation Module
+
+//V1
+
+This module concatenates 2 strings sized to a defined macro.
+
+Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
+
+An input of `q' was tested to ensure it would result in ending the program.
+
+A string that is greater than the initialized memory was tested to ensure it would not crash the program.
+
+//V2
+
+V2 of the program is able to compare strings received from user input, using the "strcmp" function. 
+
+This function will only compare strings up until it hits a NULL or a char that does not match.
+
+If it hits a char that does not match, anything after that will not be considered in the comparison.
+
+The chars are evaluated using their ASCII value.
+
+The test cases included values where string1 was less, greater, and equal to string2, as well as cases to test if the program would crash if the user input was greater than the initialized memory from string1. 
+
+
diff --git a/V2/manipulations/manipulatemain.c b/V2/manipulations/manipulatemain.c
new file mode 100644
index 0000000..1bcc78d
--- /dev/null
+++ b/V2/manipulations/manipulatemain.c
@@ -0,0 +1,5 @@
+int main(void) {
+
+	manipulating();
+	return 0;
+}
\ No newline at end of file
diff --git a/V2/manipulations/manipulating.c b/V2/manipulations/manipulating.c
new file mode 100644
index 0000000..7ba26cd
--- /dev/null
+++ b/V2/manipulations/manipulating.c
@@ -0,0 +1,61 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "manipulating.h"
+
+// V1
+
+void manipulating(void) {
+	printf("*** Start of Concatenating Strings Demo ***\n");
+	char string1[BUFFER_SIZE];
+	char string2[BUFFER_SIZE];
+	do {
+		//Prompt for first string
+		printf("Type the 1st string (q - to quit):\n");
+		fgets(string1, BUFFER_SIZE, stdin);
+		string1[strlen(string1) - 1] = '\0';
+		//if q was entered quit program
+		if ((strcmp(string1, "q") != 0)) {
+			printf("Type the 2nd string:\n");
+			//promt for 2nd string
+			fgets(string2, BUFFER_SIZE, stdin);
+			string2[strlen(string2) - 1] = '\0';
+			//concatenate string
+			strcat(string1, string2);
+			printf("Concatenated string is \'%s\'\n", string1);
+		}
+	} while (strcmp(string1, "q") != 0);
+	printf("*** End of Concatenating Strings Demo ***\n\n");
+
+	//V2
+	printf("***Start of Comparing Strings Demon***\n");
+	char compare1[BUFFER_SIZE];
+	char compare2[BUFFER_SIZE];
+	int result;
+	do {
+		//Receive user input for the 1st string
+		printf("Type the 1st string to compare (q - to quit):\n");
+		fgets(compare1, BUFFER_SIZE, stdin);
+		//Add an ending NULL to the 1st string
+		compare1[strlen(compare1) - 1] = '\0';
+		//Check that the user did not input 'q' to quit
+		if (strcmp(compare1, "q") != 0) {
+			//Receive user input for the 2nd string
+			printf("Type the 2nd string to compare:\n");
+			fgets(compare2, BUFFER_SIZE, stdin);
+			//Add an ending NULL to the 2nd string
+			compare2[strlen(compare2) - 1] = '\0';
+			result = strcmp(compare1, compare2);
+			//Check if the 1st string < than the 2nd string
+			if (result < 0)
+				printf("\'%s\' string is less than \'%s\'\n", compare1, compare2);
+			//Check if the strings are equal
+			else if (result == 0)
+				printf("\'%s\' string is equal to \'%s\'\n", compare1, compare2);
+			//Check if the first string is greater than the 2nd string
+			else
+				printf("\'%s\' string is greater than \'%s\'\n", compare1, compare2);
+
+		}
+	} while (strcmp(compare1, "q") != 0);
+	printf("*** End of Comparing Strings Demon ***\n\n");
+}
\ No newline at end of file
diff --git a/V2/manipulations/manipulating.h b/V2/manipulations/manipulating.h
new file mode 100644
index 0000000..434f748
--- /dev/null
+++ b/V2/manipulations/manipulating.h
@@ -0,0 +1,6 @@
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+#include <stdio.h>
+#include <string.h>
+void manipulating(void);
+#endif
\ No newline at end of file
diff --git a/V2/manipulations/manipulation-test-cases.xlsx b/V2/manipulations/manipulation-test-cases.xlsx
new file mode 100644
index 0000000..323e377
Binary files /dev/null and b/V2/manipulations/manipulation-test-cases.xlsx differ

commit 762b012570748db01ca39e1b888a916f027f5c43
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Fri Dec 8 18:02:18 2023 -0500

    Added main and conversions directories to V2

diff --git a/V2/conversions/V1/PM-Notes-AxtonSmith.docx b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
new file mode 100644
index 0000000..dc61b8f
--- /dev/null
+++ b/V2/conversions/V1/PM-Notes-AxtonSmith.docx
@@ -0,0 +1,4 @@
+Conversion Module
+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
diff --git a/V2/conversions/V1/conversions-test-cases.xlsx b/V2/conversions/V1/conversions-test-cases.xlsx
new file mode 100644
index 0000000..a2cffb9
Binary files /dev/null and b/V2/conversions/V1/conversions-test-cases.xlsx differ
diff --git a/V2/conversions/V1/converting.c b/V2/conversions/V1/converting.c
new file mode 100644
index 0000000..dc92171
--- /dev/null
+++ b/V2/conversions/V1/converting.c
@@ -0,0 +1,34 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+
+#include "converting.h"
+
+// User inputs a number as a string, then it is returned as an int
+void converting() {
+/* Version 1 */
+	printf("*** Start of Converting Strings to int Demo ***\n");
+	char intString[BUFFER_SIZE];
+	int intNumber;
+	do
+	{
+		printf("Type an int numeric string (q - to quit):\n");
+		fgets(intString, BUFFER_SIZE, stdin);
+		intString[strlen(intString) - 1] = '\0';
+		if (strcmp(intString, "q") != 0)
+		{
+			intNumber = atoi(intString);
+			printf("Converted number is %d\n", intNumber);
+		}
+	}
+	while (strcmp(intString, "q") != 0);
+	printf("*** End of Converting Strings to int Demo ***\n\n");
+
+/* Version 2 */
+//>> insert here
+
+
+/* Version 3 */
+//>> insert here
+
+
+}
diff --git a/V2/conversions/V1/converting.h b/V2/conversions/V1/converting.h
new file mode 100644
index 0000000..94e86ab
--- /dev/null
+++ b/V2/conversions/V1/converting.h
@@ -0,0 +1,11 @@
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+// User inputs a number as a string, then it is returned as an int
+void converting(void);
+
+#endif
\ No newline at end of file
diff --git a/V2/conversions/V1/main.c b/V2/conversions/V1/main.c
new file mode 100644
index 0000000..6a8e436
--- /dev/null
+++ b/V2/conversions/V1/main.c
@@ -0,0 +1,7 @@
+#include "converting.h"
+
+int main(void)
+{
+	converting();
+	return 0;
+}
\ No newline at end of file
diff --git a/V2/conversions/V2/PM-Notes-AxtonSmith.docx b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
new file mode 100644
index 0000000..dc61b8f
--- /dev/null
+++ b/V2/conversions/V2/PM-Notes-AxtonSmith.docx
@@ -0,0 +1,4 @@
+Conversion Module
+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
diff --git a/V2/conversions/V2/conversions-test-cases.xlsx b/V2/conversions/V2/conversions-test-cases.xlsx
new file mode 100644
index 0000000..a2cffb9
Binary files /dev/null and b/V2/conversions/V2/conversions-test-cases.xlsx differ
diff --git a/V2/conversions/V2/converting.c b/V2/conversions/V2/converting.c
new file mode 100644
index 0000000..dc92171
--- /dev/null
+++ b/V2/conversions/V2/converting.c
@@ -0,0 +1,34 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+
+#include "converting.h"
+
+// User inputs a number as a string, then it is returned as an int
+void converting() {
+/* Version 1 */
+	printf("*** Start of Converting Strings to int Demo ***\n");
+	char intString[BUFFER_SIZE];
+	int intNumber;
+	do
+	{
+		printf("Type an int numeric string (q - to quit):\n");
+		fgets(intString, BUFFER_SIZE, stdin);
+		intString[strlen(intString) - 1] = '\0';
+		if (strcmp(intString, "q") != 0)
+		{
+			intNumber = atoi(intString);
+			printf("Converted number is %d\n", intNumber);
+		}
+	}
+	while (strcmp(intString, "q") != 0);
+	printf("*** End of Converting Strings to int Demo ***\n\n");
+
+/* Version 2 */
+//>> insert here
+
+
+/* Version 3 */
+//>> insert here
+
+
+}
diff --git a/V2/conversions/V2/converting.h b/V2/conversions/V2/converting.h
new file mode 100644
index 0000000..94e86ab
--- /dev/null
+++ b/V2/conversions/V2/converting.h
@@ -0,0 +1,11 @@
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+// User inputs a number as a string, then it is returned as an int
+void converting(void);
+
+#endif
\ No newline at end of file
diff --git a/V2/conversions/V2/main.c b/V2/conversions/V2/main.c
new file mode 100644
index 0000000..6a8e436
--- /dev/null
+++ b/V2/conversions/V2/main.c
@@ -0,0 +1,7 @@
+#include "converting.h"
+
+int main(void)
+{
+	converting();
+	return 0;
+}
\ No newline at end of file
diff --git a/V2/conversions/templates/converting.c b/V2/conversions/templates/converting.c
new file mode 100644
index 0000000..88b340e
--- /dev/null
+++ b/V2/conversions/templates/converting.c
@@ -0,0 +1,16 @@
+#include "converting.h"
+
+void converting() {
+/* Version 1 */
+>> insert here
+
+
+/* Version 2 */
+>> insert here
+
+
+/* Version 3 */
+>> insert here
+
+
+}
diff --git a/V2/conversions/templates/converting_header.png b/V2/conversions/templates/converting_header.png
new file mode 100644
index 0000000..4ffb3a8
Binary files /dev/null and b/V2/conversions/templates/converting_header.png differ
diff --git a/V2/conversions/templates/converting_v1.png b/V2/conversions/templates/converting_v1.png
new file mode 100644
index 0000000..50f5734
Binary files /dev/null and b/V2/conversions/templates/converting_v1.png differ
diff --git a/V2/conversions/templates/converting_v2.png b/V2/conversions/templates/converting_v2.png
new file mode 100644
index 0000000..edcdf1e
Binary files /dev/null and b/V2/conversions/templates/converting_v2.png differ
diff --git a/V2/conversions/templates/converting_v3.png b/V2/conversions/templates/converting_v3.png
new file mode 100644
index 0000000..146285f
Binary files /dev/null and b/V2/conversions/templates/converting_v3.png differ
diff --git a/V2/main/main.c b/V2/main/main.c
new file mode 100644
index 0000000..5062fbb
--- /dev/null
+++ b/V2/main/main.c
@@ -0,0 +1,12 @@
+#include "fundamentals.h"
+#include "manipulating.h"
+#include "tokenizing.h"
+#include "converting.h"
+
+int main(void)
+{
+	fundamentals();
+	manipulating();
+	tokenizing();
+	converting();
+}

commit 71381063066ca1afc0b8ae3b42200293548cf6bd
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Fri Dec 8 17:55:59 2023 -0500

    Moved all files to V1, Add V2 directory

diff --git a/conversions/PM-Notes-AxtonSmith.docx b/V1/conversions/PM-Notes-AxtonSmith.docx
similarity index 100%
rename from conversions/PM-Notes-AxtonSmith.docx
rename to V1/conversions/PM-Notes-AxtonSmith.docx
diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
similarity index 100%
rename from conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
rename to V1/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
similarity index 100%
rename from conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
rename to V1/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
similarity index 100%
rename from conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
rename to V1/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
similarity index 100%
rename from conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
rename to V1/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
similarity index 100%
rename from conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
rename to V1/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
diff --git a/conversions/code/.vs/v1/v17/.suo b/V1/conversions/code/.vs/v1/v17/.suo
similarity index 100%
rename from conversions/code/.vs/v1/v17/.suo
rename to V1/conversions/code/.vs/v1/v17/.suo
diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/V1/conversions/code/.vs/v1/v17/Browse.VC.db
similarity index 100%
rename from conversions/code/.vs/v1/v17/Browse.VC.db
rename to V1/conversions/code/.vs/v1/v17/Browse.VC.db
diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/V1/conversions/code/.vs/v1/v17/Solution.VC.db
similarity index 100%
rename from conversions/code/.vs/v1/v17/Solution.VC.db
rename to V1/conversions/code/.vs/v1/v17/Solution.VC.db
diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
similarity index 100%
rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
similarity index 100%
rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
similarity index 100%
rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
similarity index 100%
rename from conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
rename to V1/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
diff --git a/conversions/code/converting.c b/V1/conversions/code/converting.c
similarity index 100%
rename from conversions/code/converting.c
rename to V1/conversions/code/converting.c
diff --git a/conversions/code/converting.h b/V1/conversions/code/converting.h
similarity index 100%
rename from conversions/code/converting.h
rename to V1/conversions/code/converting.h
diff --git a/conversions/code/main.c b/V1/conversions/code/main.c
similarity index 100%
rename from conversions/code/main.c
rename to V1/conversions/code/main.c
diff --git a/conversions/code/v1.sln b/V1/conversions/code/v1.sln
similarity index 100%
rename from conversions/code/v1.sln
rename to V1/conversions/code/v1.sln
diff --git a/conversions/code/v1.vcxproj b/V1/conversions/code/v1.vcxproj
similarity index 100%
rename from conversions/code/v1.vcxproj
rename to V1/conversions/code/v1.vcxproj
diff --git a/conversions/code/v1.vcxproj.filters b/V1/conversions/code/v1.vcxproj.filters
similarity index 100%
rename from conversions/code/v1.vcxproj.filters
rename to V1/conversions/code/v1.vcxproj.filters
diff --git a/conversions/code/v1.vcxproj.user b/V1/conversions/code/v1.vcxproj.user
similarity index 100%
rename from conversions/code/v1.vcxproj.user
rename to V1/conversions/code/v1.vcxproj.user
diff --git a/conversions/code/x64/Debug/converting.obj b/V1/conversions/code/x64/Debug/converting.obj
similarity index 100%
rename from conversions/code/x64/Debug/converting.obj
rename to V1/conversions/code/x64/Debug/converting.obj
diff --git a/conversions/code/x64/Debug/main.obj b/V1/conversions/code/x64/Debug/main.obj
similarity index 100%
rename from conversions/code/x64/Debug/main.obj
rename to V1/conversions/code/x64/Debug/main.obj
diff --git a/conversions/code/x64/Debug/v1.exe b/V1/conversions/code/x64/Debug/v1.exe
similarity index 100%
rename from conversions/code/x64/Debug/v1.exe
rename to V1/conversions/code/x64/Debug/v1.exe
diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/V1/conversions/code/x64/Debug/v1.exe.recipe
similarity index 100%
rename from conversions/code/x64/Debug/v1.exe.recipe
rename to V1/conversions/code/x64/Debug/v1.exe.recipe
diff --git a/conversions/code/x64/Debug/v1.ilk b/V1/conversions/code/x64/Debug/v1.ilk
similarity index 100%
rename from conversions/code/x64/Debug/v1.ilk
rename to V1/conversions/code/x64/Debug/v1.ilk
diff --git a/conversions/code/x64/Debug/v1.log b/V1/conversions/code/x64/Debug/v1.log
similarity index 100%
rename from conversions/code/x64/Debug/v1.log
rename to V1/conversions/code/x64/Debug/v1.log
diff --git a/conversions/code/x64/Debug/v1.pdb b/V1/conversions/code/x64/Debug/v1.pdb
similarity index 100%
rename from conversions/code/x64/Debug/v1.pdb
rename to V1/conversions/code/x64/Debug/v1.pdb
diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
similarity index 100%
rename from conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
rename to V1/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
similarity index 100%
rename from conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
rename to V1/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
similarity index 100%
rename from conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
rename to V1/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
similarity index 100%
rename from conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
rename to V1/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
similarity index 100%
rename from conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
rename to V1/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
similarity index 100%
rename from conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
rename to V1/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
similarity index 100%
rename from conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
rename to V1/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
similarity index 100%
rename from conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
rename to V1/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
similarity index 100%
rename from conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
rename to V1/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
diff --git a/conversions/code/x64/Debug/vc143.idb b/V1/conversions/code/x64/Debug/vc143.idb
similarity index 100%
rename from conversions/code/x64/Debug/vc143.idb
rename to V1/conversions/code/x64/Debug/vc143.idb
diff --git a/conversions/code/x64/Debug/vc143.pdb b/V1/conversions/code/x64/Debug/vc143.pdb
similarity index 100%
rename from conversions/code/x64/Debug/vc143.pdb
rename to V1/conversions/code/x64/Debug/vc143.pdb
diff --git a/conversions/conversions-test-cases.xlsx b/V1/conversions/conversions-test-cases.xlsx
similarity index 100%
rename from conversions/conversions-test-cases.xlsx
rename to V1/conversions/conversions-test-cases.xlsx
diff --git a/conversions/conversionsV1.zip b/V1/conversions/conversionsV1.zip
similarity index 100%
rename from conversions/conversionsV1.zip
rename to V1/conversions/conversionsV1.zip
diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
similarity index 100%
rename from conversions/conversionsV1/PM-Notes-AxtonSmith.docx
rename to V1/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/V1/conversions/conversionsV1/conversions-test-cases.xlsx
similarity index 100%
rename from conversions/conversionsV1/conversions-test-cases.xlsx
rename to V1/conversions/conversionsV1/conversions-test-cases.xlsx
diff --git a/conversions/conversionsV1/converting.c b/V1/conversions/conversionsV1/converting.c
similarity index 100%
rename from conversions/conversionsV1/converting.c
rename to V1/conversions/conversionsV1/converting.c
diff --git a/conversions/conversionsV1/converting.h b/V1/conversions/conversionsV1/converting.h
similarity index 100%
rename from conversions/conversionsV1/converting.h
rename to V1/conversions/conversionsV1/converting.h
diff --git a/conversions/conversionsV1/main.c b/V1/conversions/conversionsV1/main.c
similarity index 100%
rename from conversions/conversionsV1/main.c
rename to V1/conversions/conversionsV1/main.c
diff --git a/conversions/converting.c b/V1/conversions/converting.c
similarity index 100%
rename from conversions/converting.c
rename to V1/conversions/converting.c
diff --git a/conversions/converting_header.png b/V1/conversions/converting_header.png
similarity index 100%
rename from conversions/converting_header.png
rename to V1/conversions/converting_header.png
diff --git a/conversions/converting_v1.png b/V1/conversions/converting_v1.png
similarity index 100%
rename from conversions/converting_v1.png
rename to V1/conversions/converting_v1.png
diff --git a/conversions/converting_v2.png b/V1/conversions/converting_v2.png
similarity index 100%
rename from conversions/converting_v2.png
rename to V1/conversions/converting_v2.png
diff --git a/conversions/converting_v3.png b/V1/conversions/converting_v3.png
similarity index 100%
rename from conversions/converting_v3.png
rename to V1/conversions/converting_v3.png
diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/V1/fundamentals/PM-Notes-AxtonSmith.docx
similarity index 100%
rename from fundamentals/PM-Notes-AxtonSmith.docx
rename to V1/fundamentals/PM-Notes-AxtonSmith.docx
diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
similarity index 100%
rename from fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
rename to V1/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
similarity index 100%
rename from fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
rename to V1/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
similarity index 100%
rename from fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
rename to V1/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
diff --git a/fundamentals/code/.vs/project/v17/.suo b/V1/fundamentals/code/.vs/project/v17/.suo
similarity index 100%
rename from fundamentals/code/.vs/project/v17/.suo
rename to V1/fundamentals/code/.vs/project/v17/.suo
diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/V1/fundamentals/code/.vs/project/v17/Browse.VC.db
similarity index 100%
rename from fundamentals/code/.vs/project/v17/Browse.VC.db
rename to V1/fundamentals/code/.vs/project/v17/Browse.VC.db
diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/V1/fundamentals/code/.vs/project/v17/Solution.VC.db
similarity index 100%
rename from fundamentals/code/.vs/project/v17/Solution.VC.db
rename to V1/fundamentals/code/.vs/project/v17/Solution.VC.db
diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
similarity index 100%
rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
similarity index 100%
rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
similarity index 100%
rename from fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
rename to V1/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
diff --git a/fundamentals/code/fundamentals.c b/V1/fundamentals/code/fundamentals.c
similarity index 100%
rename from fundamentals/code/fundamentals.c
rename to V1/fundamentals/code/fundamentals.c
diff --git a/fundamentals/code/fundamentals.h b/V1/fundamentals/code/fundamentals.h
similarity index 100%
rename from fundamentals/code/fundamentals.h
rename to V1/fundamentals/code/fundamentals.h
diff --git a/fundamentals/code/main.c b/V1/fundamentals/code/main.c
similarity index 100%
rename from fundamentals/code/main.c
rename to V1/fundamentals/code/main.c
diff --git a/fundamentals/code/project.sln b/V1/fundamentals/code/project.sln
similarity index 100%
rename from fundamentals/code/project.sln
rename to V1/fundamentals/code/project.sln
diff --git a/fundamentals/code/project.vcxproj b/V1/fundamentals/code/project.vcxproj
similarity index 100%
rename from fundamentals/code/project.vcxproj
rename to V1/fundamentals/code/project.vcxproj
diff --git a/fundamentals/code/project.vcxproj.filters b/V1/fundamentals/code/project.vcxproj.filters
similarity index 100%
rename from fundamentals/code/project.vcxproj.filters
rename to V1/fundamentals/code/project.vcxproj.filters
diff --git a/fundamentals/code/project.vcxproj.user b/V1/fundamentals/code/project.vcxproj.user
similarity index 100%
rename from fundamentals/code/project.vcxproj.user
rename to V1/fundamentals/code/project.vcxproj.user
diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/V1/fundamentals/code/x64/Debug/fundamentals.obj
similarity index 100%
rename from fundamentals/code/x64/Debug/fundamentals.obj
rename to V1/fundamentals/code/x64/Debug/fundamentals.obj
diff --git a/fundamentals/code/x64/Debug/main.obj b/V1/fundamentals/code/x64/Debug/main.obj
similarity index 100%
rename from fundamentals/code/x64/Debug/main.obj
rename to V1/fundamentals/code/x64/Debug/main.obj
diff --git a/fundamentals/code/x64/Debug/project.exe b/V1/fundamentals/code/x64/Debug/project.exe
similarity index 100%
rename from fundamentals/code/x64/Debug/project.exe
rename to V1/fundamentals/code/x64/Debug/project.exe
diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/V1/fundamentals/code/x64/Debug/project.exe.recipe
similarity index 100%
rename from fundamentals/code/x64/Debug/project.exe.recipe
rename to V1/fundamentals/code/x64/Debug/project.exe.recipe
diff --git a/fundamentals/code/x64/Debug/project.ilk b/V1/fundamentals/code/x64/Debug/project.ilk
similarity index 100%
rename from fundamentals/code/x64/Debug/project.ilk
rename to V1/fundamentals/code/x64/Debug/project.ilk
diff --git a/fundamentals/code/x64/Debug/project.log b/V1/fundamentals/code/x64/Debug/project.log
similarity index 100%
rename from fundamentals/code/x64/Debug/project.log
rename to V1/fundamentals/code/x64/Debug/project.log
diff --git a/fundamentals/code/x64/Debug/project.pdb b/V1/fundamentals/code/x64/Debug/project.pdb
similarity index 100%
rename from fundamentals/code/x64/Debug/project.pdb
rename to V1/fundamentals/code/x64/Debug/project.pdb
diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
similarity index 100%
rename from fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
similarity index 100%
rename from fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
similarity index 100%
rename from fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
rename to V1/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
similarity index 100%
rename from fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
rename to V1/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
similarity index 100%
rename from fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
rename to V1/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
similarity index 100%
rename from fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
rename to V1/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
similarity index 100%
rename from fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
rename to V1/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
similarity index 100%
rename from fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
rename to V1/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
similarity index 100%
rename from fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
rename to V1/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
diff --git a/fundamentals/code/x64/Debug/vc143.idb b/V1/fundamentals/code/x64/Debug/vc143.idb
similarity index 100%
rename from fundamentals/code/x64/Debug/vc143.idb
rename to V1/fundamentals/code/x64/Debug/vc143.idb
diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/V1/fundamentals/code/x64/Debug/vc143.pdb
similarity index 100%
rename from fundamentals/code/x64/Debug/vc143.pdb
rename to V1/fundamentals/code/x64/Debug/vc143.pdb
diff --git a/fundamentals/fundamentals-test-cases.xlsx b/V1/fundamentals/fundamentals-test-cases.xlsx
similarity index 100%
rename from fundamentals/fundamentals-test-cases.xlsx
rename to V1/fundamentals/fundamentals-test-cases.xlsx
diff --git a/fundamentals/fundamentals.c b/V1/fundamentals/fundamentals.c
similarity index 100%
rename from fundamentals/fundamentals.c
rename to V1/fundamentals/fundamentals.c
diff --git a/fundamentals/fundamentals_header.png b/V1/fundamentals/fundamentals_header.png
similarity index 100%
rename from fundamentals/fundamentals_header.png
rename to V1/fundamentals/fundamentals_header.png
diff --git a/fundamentals/fundamentals_v1.png b/V1/fundamentals/fundamentals_v1.png
similarity index 100%
rename from fundamentals/fundamentals_v1.png
rename to V1/fundamentals/fundamentals_v1.png
diff --git a/fundamentals/fundamentals_v2.png b/V1/fundamentals/fundamentals_v2.png
similarity index 100%
rename from fundamentals/fundamentals_v2.png
rename to V1/fundamentals/fundamentals_v2.png
diff --git a/fundamentals/fundamentals_v3.png b/V1/fundamentals/fundamentals_v3.png
similarity index 100%
rename from fundamentals/fundamentals_v3.png
rename to V1/fundamentals/fundamentals_v3.png
diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
similarity index 100%
rename from fundamentals/v1/PM-Notes-AxtonSmith.docx
rename to V1/fundamentals/v1/PM-Notes-AxtonSmith.docx
diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/V1/fundamentals/v1/fundamentals-test-cases.xlsx
similarity index 100%
rename from fundamentals/v1/fundamentals-test-cases.xlsx
rename to V1/fundamentals/v1/fundamentals-test-cases.xlsx
diff --git a/fundamentals/v1/fundamentals.c b/V1/fundamentals/v1/fundamentals.c
similarity index 100%
rename from fundamentals/v1/fundamentals.c
rename to V1/fundamentals/v1/fundamentals.c
diff --git a/fundamentals/v1/fundamentals.h b/V1/fundamentals/v1/fundamentals.h
similarity index 100%
rename from fundamentals/v1/fundamentals.h
rename to V1/fundamentals/v1/fundamentals.h
diff --git a/fundamentals/v1/main.c b/V1/fundamentals/v1/main.c
similarity index 100%
rename from fundamentals/v1/main.c
rename to V1/fundamentals/v1/main.c
diff --git a/main/converting.c b/V1/main/converting.c
similarity index 100%
rename from main/converting.c
rename to V1/main/converting.c
diff --git a/main/converting.h b/V1/main/converting.h
similarity index 100%
rename from main/converting.h
rename to V1/main/converting.h
diff --git a/main/fundamentals.c b/V1/main/fundamentals.c
similarity index 100%
rename from main/fundamentals.c
rename to V1/main/fundamentals.c
diff --git a/main/fundamentals.h b/V1/main/fundamentals.h
similarity index 100%
rename from main/fundamentals.h
rename to V1/main/fundamentals.h
diff --git a/main/main.c b/V1/main/main.c
similarity index 100%
rename from main/main.c
rename to V1/main/main.c
diff --git a/main/manipulating.c b/V1/main/manipulating.c
similarity index 100%
rename from main/manipulating.c
rename to V1/main/manipulating.c
diff --git a/main/manipulating.h b/V1/main/manipulating.h
similarity index 100%
rename from main/manipulating.h
rename to V1/main/manipulating.h
diff --git a/main/tokenizing.c b/V1/main/tokenizing.c
similarity index 100%
rename from main/tokenizing.c
rename to V1/main/tokenizing.c
diff --git a/main/tokenizing.h b/V1/main/tokenizing.h
similarity index 100%
rename from main/tokenizing.h
rename to V1/main/tokenizing.h
diff --git a/manipulation/PM-Notes-Brandon-Doray.docx b/V1/manipulation/PM-Notes-Brandon-Doray.docx
similarity index 100%
rename from manipulation/PM-Notes-Brandon-Doray.docx
rename to V1/manipulation/PM-Notes-Brandon-Doray.docx
diff --git a/manipulation/manipulatemain.c b/V1/manipulation/manipulatemain.c
similarity index 100%
rename from manipulation/manipulatemain.c
rename to V1/manipulation/manipulatemain.c
diff --git a/manipulation/manipulating.c b/V1/manipulation/manipulating.c
similarity index 100%
rename from manipulation/manipulating.c
rename to V1/manipulation/manipulating.c
diff --git a/manipulation/manipulating.h b/V1/manipulation/manipulating.h
similarity index 100%
rename from manipulation/manipulating.h
rename to V1/manipulation/manipulating.h
diff --git a/manipulation/manipulation-test-cases.xlsx b/V1/manipulation/manipulation-test-cases.xlsx
similarity index 100%
rename from manipulation/manipulation-test-cases.xlsx
rename to V1/manipulation/manipulation-test-cases.xlsx
diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/V1/tokenizing/PM-Notes-DarianGrijalba.docx
similarity index 100%
rename from tokenizing/PM-Notes-DarianGrijalba.docx
rename to V1/tokenizing/PM-Notes-DarianGrijalba.docx
diff --git a/tokenizing/tokenizing.c b/V1/tokenizing/tokenizing.c
similarity index 100%
rename from tokenizing/tokenizing.c
rename to V1/tokenizing/tokenizing.c
diff --git a/tokenizing/tokenizing.h b/V1/tokenizing/tokenizing.h
similarity index 100%
rename from tokenizing/tokenizing.h
rename to V1/tokenizing/tokenizing.h

commit 0ec0097d57c6a5d87103780c4dc8f8e6d3cc45df
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Fri Dec 8 17:52:55 2023 -0500

    Fix file path in manipulation directory

diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
deleted file mode 100644
index ce82fd8..0000000
Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo and /dev/null differ
diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
deleted file mode 100644
index 95cfcc7..0000000
Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db and /dev/null differ
diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
deleted file mode 100644
index b2ba1dc..0000000
Binary files a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db and /dev/null differ
diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/PM-Notes-Brandon-Doray.docx
similarity index 100%
rename from manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
rename to manipulation/PM-Notes-Brandon-Doray.docx
diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/manipulatemain.c
similarity index 100%
rename from manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
rename to manipulation/manipulatemain.c
diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/manipulating.c
similarity index 100%
rename from manipulation/Manipulation V1/Manipulation V1/manipulating.c
rename to manipulation/manipulating.c
diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/manipulating.h
similarity index 100%
rename from manipulation/Manipulation V1/Manipulation V1/manipulating.h
rename to manipulation/manipulating.h
diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/manipulation-test-cases.xlsx
similarity index 100%
rename from manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
rename to manipulation/manipulation-test-cases.xlsx

commit e40dd3d033d7164d96f9fa0ffe2668ffeb2ccfed
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Fri Dec 8 17:52:00 2023 -0500

    Add V1 files

diff --git a/conversions/PM-Notes-AxtonSmith.docx b/conversions/PM-Notes-AxtonSmith.docx
new file mode 100644
index 0000000..dc61b8f
--- /dev/null
+++ b/conversions/PM-Notes-AxtonSmith.docx
@@ -0,0 +1,4 @@
+Conversion Module
+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
diff --git a/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx
new file mode 100644
index 0000000..70aef67
Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/184d6d47-d342-4324-af1d-33804d184019.vsidx differ
diff --git a/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx
new file mode 100644
index 0000000..2b75f1d
Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/66a2e546-494c-447f-b1e5-b7c2afad6a85.vsidx differ
diff --git a/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx
new file mode 100644
index 0000000..70aef67
Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/a80f2286-9090-47b8-ada1-117d6187c786.vsidx differ
diff --git a/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx
new file mode 100644
index 0000000..70aef67
Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/d34cf99f-157c-42d8-92b5-9c57772d75c3.vsidx differ
diff --git a/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx
new file mode 100644
index 0000000..70aef67
Binary files /dev/null and b/conversions/code/.vs/v1/FileContentIndex/f6ec9a71-61c5-470a-9fac-f5953514f51b.vsidx differ
diff --git a/conversions/code/.vs/v1/v17/.suo b/conversions/code/.vs/v1/v17/.suo
new file mode 100644
index 0000000..218f706
Binary files /dev/null and b/conversions/code/.vs/v1/v17/.suo differ
diff --git a/conversions/code/.vs/v1/v17/Browse.VC.db b/conversions/code/.vs/v1/v17/Browse.VC.db
new file mode 100644
index 0000000..086de7c
Binary files /dev/null and b/conversions/code/.vs/v1/v17/Browse.VC.db differ
diff --git a/conversions/code/.vs/v1/v17/Solution.VC.db b/conversions/code/.vs/v1/v17/Solution.VC.db
new file mode 100644
index 0000000..da0fe73
Binary files /dev/null and b/conversions/code/.vs/v1/v17/Solution.VC.db differ
diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch
new file mode 100644
index 0000000..137cd6f
Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/105d2ee1d312e759/MAIN.ipch differ
diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch
new file mode 100644
index 0000000..e7b304a
Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/144e765bfd3afde1/CONVERTING.ipch differ
diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch
new file mode 100644
index 0000000..934be31
Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/bc81ee7f4c622171/MAIN.ipch differ
diff --git a/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch
new file mode 100644
index 0000000..937325b
Binary files /dev/null and b/conversions/code/.vs/v1/v17/ipch/AutoPCH/fccc76d167385bc9/CONVERTING.ipch differ
diff --git a/conversions/code/converting.c b/conversions/code/converting.c
new file mode 100644
index 0000000..dc92171
--- /dev/null
+++ b/conversions/code/converting.c
@@ -0,0 +1,34 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+
+#include "converting.h"
+
+// User inputs a number as a string, then it is returned as an int
+void converting() {
+/* Version 1 */
+	printf("*** Start of Converting Strings to int Demo ***\n");
+	char intString[BUFFER_SIZE];
+	int intNumber;
+	do
+	{
+		printf("Type an int numeric string (q - to quit):\n");
+		fgets(intString, BUFFER_SIZE, stdin);
+		intString[strlen(intString) - 1] = '\0';
+		if (strcmp(intString, "q") != 0)
+		{
+			intNumber = atoi(intString);
+			printf("Converted number is %d\n", intNumber);
+		}
+	}
+	while (strcmp(intString, "q") != 0);
+	printf("*** End of Converting Strings to int Demo ***\n\n");
+
+/* Version 2 */
+//>> insert here
+
+
+/* Version 3 */
+//>> insert here
+
+
+}
diff --git a/conversions/code/converting.h b/conversions/code/converting.h
new file mode 100644
index 0000000..94e86ab
--- /dev/null
+++ b/conversions/code/converting.h
@@ -0,0 +1,11 @@
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+// User inputs a number as a string, then it is returned as an int
+void converting(void);
+
+#endif
\ No newline at end of file
diff --git a/conversions/code/main.c b/conversions/code/main.c
new file mode 100644
index 0000000..6a8e436
--- /dev/null
+++ b/conversions/code/main.c
@@ -0,0 +1,7 @@
+#include "converting.h"
+
+int main(void)
+{
+	converting();
+	return 0;
+}
\ No newline at end of file
diff --git a/conversions/code/v1.sln b/conversions/code/v1.sln
new file mode 100644
index 0000000..57619b4
--- /dev/null
+++ b/conversions/code/v1.sln
@@ -0,0 +1,31 @@
+ï»¿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 17
+VisualStudioVersion = 17.8.34322.80
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "v1", "v1.vcxproj", "{DFCFF08A-27BA-4895-81DE-69DA151B79DB}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|x64 = Debug|x64
+		Debug|x86 = Debug|x86
+		Release|x64 = Release|x64
+		Release|x86 = Release|x86
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.ActiveCfg = Debug|x64
+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x64.Build.0 = Debug|x64
+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.ActiveCfg = Debug|Win32
+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Debug|x86.Build.0 = Debug|Win32
+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.ActiveCfg = Release|x64
+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x64.Build.0 = Release|x64
+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.ActiveCfg = Release|Win32
+		{DFCFF08A-27BA-4895-81DE-69DA151B79DB}.Release|x86.Build.0 = Release|Win32
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {FB5DDBE1-4B86-462E-8A71-FBB6C215BD41}
+	EndGlobalSection
+EndGlobal
diff --git a/conversions/code/v1.vcxproj b/conversions/code/v1.vcxproj
new file mode 100644
index 0000000..8a35f16
--- /dev/null
+++ b/conversions/code/v1.vcxproj
@@ -0,0 +1,139 @@
+<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Debug|Win32">
+      <Configuration>Debug</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|Win32">
+      <Configuration>Release</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|x64">
+      <Configuration>Debug</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <VCProjectVersion>17.0</VCProjectVersion>
+    <Keyword>Win32Proj</Keyword>
+    <ProjectGuid>{dfcff08a-27ba-4895-81de-69da151b79db}</ProjectGuid>
+    <RootNamespace>v1</RootNamespace>
+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <UseDebugLibraries>true</UseDebugLibraries>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <PlatformToolset>v143</PlatformToolset>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <UseDebugLibraries>true</UseDebugLibraries>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <PlatformToolset>v143</PlatformToolset>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Label="Shared">
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <SDLCheck>true</SDLCheck>
+      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ConformanceMode>true</ConformanceMode>
+    </ClCompile>
+    <Link>
+      <SubSystem>Console</SubSystem>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <SDLCheck>true</SDLCheck>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ConformanceMode>true</ConformanceMode>
+    </ClCompile>
+    <Link>
+      <SubSystem>Console</SubSystem>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <SDLCheck>true</SDLCheck>
+      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ConformanceMode>true</ConformanceMode>
+    </ClCompile>
+    <Link>
+      <SubSystem>Console</SubSystem>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <SDLCheck>true</SDLCheck>
+      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ConformanceMode>true</ConformanceMode>
+    </ClCompile>
+    <Link>
+      <SubSystem>Console</SubSystem>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="converting.c" />
+    <ClCompile Include="main.c" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="converting.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/conversions/code/v1.vcxproj.filters b/conversions/code/v1.vcxproj.filters
new file mode 100644
index 0000000..7ba9ae0
--- /dev/null
+++ b/conversions/code/v1.vcxproj.filters
@@ -0,0 +1,30 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
+    </Filter>
+    <Filter Include="Resource Files">
+      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
+      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="converting.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="main.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="converting.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/conversions/code/v1.vcxproj.user b/conversions/code/v1.vcxproj.user
new file mode 100644
index 0000000..88a5509
--- /dev/null
+++ b/conversions/code/v1.vcxproj.user
@@ -0,0 +1,4 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup />
+</Project>
\ No newline at end of file
diff --git a/conversions/code/x64/Debug/converting.obj b/conversions/code/x64/Debug/converting.obj
new file mode 100644
index 0000000..3c059c8
Binary files /dev/null and b/conversions/code/x64/Debug/converting.obj differ
diff --git a/conversions/code/x64/Debug/main.obj b/conversions/code/x64/Debug/main.obj
new file mode 100644
index 0000000..752fab6
Binary files /dev/null and b/conversions/code/x64/Debug/main.obj differ
diff --git a/conversions/code/x64/Debug/v1.exe b/conversions/code/x64/Debug/v1.exe
new file mode 100644
index 0000000..657c946
Binary files /dev/null and b/conversions/code/x64/Debug/v1.exe differ
diff --git a/conversions/code/x64/Debug/v1.exe.recipe b/conversions/code/x64/Debug/v1.exe.recipe
new file mode 100644
index 0000000..69be474
--- /dev/null
+++ b/conversions/code/x64/Debug/v1.exe.recipe
@@ -0,0 +1,11 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project>
+  <ProjectOutputs>
+    <ProjectOutput>
+      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe</FullPath>
+    </ProjectOutput>
+  </ProjectOutputs>
+  <ContentFiles />
+  <SatelliteDlls />
+  <NonRecipeFileRefs />
+</Project>
\ No newline at end of file
diff --git a/conversions/code/x64/Debug/v1.ilk b/conversions/code/x64/Debug/v1.ilk
new file mode 100644
index 0000000..18b8f11
Binary files /dev/null and b/conversions/code/x64/Debug/v1.ilk differ
diff --git a/conversions/code/x64/Debug/v1.log b/conversions/code/x64/Debug/v1.log
new file mode 100644
index 0000000..d6ecd4a
--- /dev/null
+++ b/conversions/code/x64/Debug/v1.log
@@ -0,0 +1,2 @@
+ï»¿  main.c
+  v1.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
diff --git a/conversions/code/x64/Debug/v1.pdb b/conversions/code/x64/Debug/v1.pdb
new file mode 100644
index 0000000..e2f8b05
Binary files /dev/null and b/conversions/code/x64/Debug/v1.pdb differ
diff --git a/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog
new file mode 100644
index 0000000..0f0f942
Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.command.1.tlog differ
diff --git a/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog
new file mode 100644
index 0000000..54a5e77
Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.read.1.tlog differ
diff --git a/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog
new file mode 100644
index 0000000..c1bc96f
Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/CL.write.1.tlog differ
diff --git a/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
new file mode 100644
index 0000000..8b2c0bc
--- /dev/null
+++ b/conversions/code/x64/Debug/v1.tlog/Cl.items.tlog
@@ -0,0 +1,2 @@
+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\converting.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\converting.obj
+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\main.obj
diff --git a/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog
new file mode 100644
index 0000000..a7a084f
Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.command.1.tlog differ
diff --git a/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog
new file mode 100644
index 0000000..3761899
Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.read.1.tlog differ
diff --git a/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog
new file mode 100644
index 0000000..fa10a23
Binary files /dev/null and b/conversions/code/x64/Debug/v1.tlog/link.write.1.tlog differ
diff --git a/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
new file mode 100644
index 0000000..fe1494c
--- /dev/null
+++ b/conversions/code/x64/Debug/v1.tlog/v1.lastbuildstate
@@ -0,0 +1,2 @@
+PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
+Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\|
diff --git a/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
new file mode 100644
index 0000000..2da24f7
--- /dev/null
+++ b/conversions/code/x64/Debug/v1.vcxproj.FileListAbsolute.txt
@@ -0,0 +1 @@
+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\conversions\v1\x64\Debug\v1.exe
diff --git a/conversions/code/x64/Debug/vc143.idb b/conversions/code/x64/Debug/vc143.idb
new file mode 100644
index 0000000..1fcdfe4
Binary files /dev/null and b/conversions/code/x64/Debug/vc143.idb differ
diff --git a/conversions/code/x64/Debug/vc143.pdb b/conversions/code/x64/Debug/vc143.pdb
new file mode 100644
index 0000000..2e1256c
Binary files /dev/null and b/conversions/code/x64/Debug/vc143.pdb differ
diff --git a/conversions/conversions-test-cases.xlsx b/conversions/conversions-test-cases.xlsx
new file mode 100644
index 0000000..657486d
Binary files /dev/null and b/conversions/conversions-test-cases.xlsx differ
diff --git a/conversions/conversionsV1.zip b/conversions/conversionsV1.zip
new file mode 100644
index 0000000..ea57e7e
Binary files /dev/null and b/conversions/conversionsV1.zip differ
diff --git a/conversions/conversionsV1/PM-Notes-AxtonSmith.docx b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
new file mode 100644
index 0000000..dc61b8f
--- /dev/null
+++ b/conversions/conversionsV1/PM-Notes-AxtonSmith.docx
@@ -0,0 +1,4 @@
+Conversion Module
+This module takes string inputs that are numeric and converts it to an integer of the number in the string.
+Test of edge cases will be negative and positive numbers, single digit, and then large numbers.
+We will also test that q will quit the program and that extraordinarily large numbers are fitted to the size storable on int.
diff --git a/conversions/conversionsV1/conversions-test-cases.xlsx b/conversions/conversionsV1/conversions-test-cases.xlsx
new file mode 100644
index 0000000..a2cffb9
Binary files /dev/null and b/conversions/conversionsV1/conversions-test-cases.xlsx differ
diff --git a/conversions/conversionsV1/converting.c b/conversions/conversionsV1/converting.c
new file mode 100644
index 0000000..dc92171
--- /dev/null
+++ b/conversions/conversionsV1/converting.c
@@ -0,0 +1,34 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+
+#include "converting.h"
+
+// User inputs a number as a string, then it is returned as an int
+void converting() {
+/* Version 1 */
+	printf("*** Start of Converting Strings to int Demo ***\n");
+	char intString[BUFFER_SIZE];
+	int intNumber;
+	do
+	{
+		printf("Type an int numeric string (q - to quit):\n");
+		fgets(intString, BUFFER_SIZE, stdin);
+		intString[strlen(intString) - 1] = '\0';
+		if (strcmp(intString, "q") != 0)
+		{
+			intNumber = atoi(intString);
+			printf("Converted number is %d\n", intNumber);
+		}
+	}
+	while (strcmp(intString, "q") != 0);
+	printf("*** End of Converting Strings to int Demo ***\n\n");
+
+/* Version 2 */
+//>> insert here
+
+
+/* Version 3 */
+//>> insert here
+
+
+}
diff --git a/conversions/conversionsV1/converting.h b/conversions/conversionsV1/converting.h
new file mode 100644
index 0000000..94e86ab
--- /dev/null
+++ b/conversions/conversionsV1/converting.h
@@ -0,0 +1,11 @@
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+// User inputs a number as a string, then it is returned as an int
+void converting(void);
+
+#endif
\ No newline at end of file
diff --git a/conversions/conversionsV1/main.c b/conversions/conversionsV1/main.c
new file mode 100644
index 0000000..6a8e436
--- /dev/null
+++ b/conversions/conversionsV1/main.c
@@ -0,0 +1,7 @@
+#include "converting.h"
+
+int main(void)
+{
+	converting();
+	return 0;
+}
\ No newline at end of file
diff --git a/conversions/converting.c b/conversions/converting.c
new file mode 100644
index 0000000..88b340e
--- /dev/null
+++ b/conversions/converting.c
@@ -0,0 +1,16 @@
+#include "converting.h"
+
+void converting() {
+/* Version 1 */
+>> insert here
+
+
+/* Version 2 */
+>> insert here
+
+
+/* Version 3 */
+>> insert here
+
+
+}
diff --git a/conversions/converting_header.png b/conversions/converting_header.png
new file mode 100644
index 0000000..4ffb3a8
Binary files /dev/null and b/conversions/converting_header.png differ
diff --git a/conversions/converting_v1.png b/conversions/converting_v1.png
new file mode 100644
index 0000000..50f5734
Binary files /dev/null and b/conversions/converting_v1.png differ
diff --git a/conversions/converting_v2.png b/conversions/converting_v2.png
new file mode 100644
index 0000000..edcdf1e
Binary files /dev/null and b/conversions/converting_v2.png differ
diff --git a/conversions/converting_v3.png b/conversions/converting_v3.png
new file mode 100644
index 0000000..146285f
Binary files /dev/null and b/conversions/converting_v3.png differ
diff --git a/fundamentals/PM-Notes-AxtonSmith.docx b/fundamentals/PM-Notes-AxtonSmith.docx
new file mode 100644
index 0000000..835d958
--- /dev/null
+++ b/fundamentals/PM-Notes-AxtonSmith.docx
@@ -0,0 +1,4 @@
+Fundamentals Module V1
+The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
+Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
+Negative cases will be any negative index and indexes beyond the max length of the string.
diff --git a/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx
new file mode 100644
index 0000000..07098b6
Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/653535c4-38f0-4389-aafb-73ff93ea901c.vsidx differ
diff --git a/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx
new file mode 100644
index 0000000..70aef67
Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/a40f3ef3-0819-4d32-89d4-869144e085d8.vsidx differ
diff --git a/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx
new file mode 100644
index 0000000..70aef67
Binary files /dev/null and b/fundamentals/code/.vs/project/FileContentIndex/d6d43df5-23b9-46ca-bf99-3bc8045e3965.vsidx differ
diff --git a/fundamentals/code/.vs/project/v17/.suo b/fundamentals/code/.vs/project/v17/.suo
new file mode 100644
index 0000000..bcfd53a
Binary files /dev/null and b/fundamentals/code/.vs/project/v17/.suo differ
diff --git a/fundamentals/code/.vs/project/v17/Browse.VC.db b/fundamentals/code/.vs/project/v17/Browse.VC.db
new file mode 100644
index 0000000..bcda23d
Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Browse.VC.db differ
diff --git a/fundamentals/code/.vs/project/v17/Solution.VC.db b/fundamentals/code/.vs/project/v17/Solution.VC.db
new file mode 100644
index 0000000..4478989
Binary files /dev/null and b/fundamentals/code/.vs/project/v17/Solution.VC.db differ
diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch
new file mode 100644
index 0000000..14c2062
Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/28a6919c88152f05/MAIN.ipch differ
diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch
new file mode 100644
index 0000000..eb24263
Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/5eb17cae54518874/FUNDAMENTALS.ipch differ
diff --git a/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch
new file mode 100644
index 0000000..1d0afbc
Binary files /dev/null and b/fundamentals/code/.vs/project/v17/ipch/AutoPCH/7773d1128b9c810/FUNDAMENTALS.ipch differ
diff --git a/fundamentals/code/fundamentals.c b/fundamentals/code/fundamentals.c
new file mode 100644
index 0000000..1215375
--- /dev/null
+++ b/fundamentals/code/fundamentals.c
@@ -0,0 +1,40 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#define NUM_INPUT_SIZE 10
+
+#include "fundamentals.h"
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals() {
+/* Version 1 */
+	printf("*** Start of Indexing Strings Demo ***\n");
+	char buffer1[BUFFER_SIZE];
+	char numInput[NUM_INPUT_SIZE];
+	size_t position;
+	do
+	{
+		printf("Type not empty string (q - to quit):\n");
+		fgets(buffer1, BUFFER_SIZE, stdin);
+		buffer1[strlen(buffer1) - 1] = '\0';
+		if (strcmp(buffer1, "q") != 0)
+		{
+			printf("Type the character position within the string:\n");
+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+			numInput[strlen(numInput) - 1] = '\0';
+			position = atoi(numInput);
+			if (position >= strlen(buffer1))
+			{
+				position = strlen(buffer1) - 1;
+				printf("Too big... Position reduced to max. available\n");
+			}
+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+		}
+	} while (strcmp(buffer1, "q") != 0);
+	printf("*** End of Indexing Strings Demo ***\n\n");
+
+	/* Version 2 */
+	//>> insert here
+
+	/* Version 3 */
+	//>> insert here
+}
\ No newline at end of file
diff --git a/fundamentals/code/fundamentals.h b/fundamentals/code/fundamentals.h
new file mode 100644
index 0000000..14a6f4f
--- /dev/null
+++ b/fundamentals/code/fundamentals.h
@@ -0,0 +1,11 @@
+#ifndef _FUNDAMENTALS_H_
+#define _FUNDAMENTALS_H_
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals(void);
+
+#endif
\ No newline at end of file
diff --git a/fundamentals/code/main.c b/fundamentals/code/main.c
new file mode 100644
index 0000000..1225e71
--- /dev/null
+++ b/fundamentals/code/main.c
@@ -0,0 +1,7 @@
+#include "fundamentals.h"
+
+int main(void)
+{
+	fundamentals();
+	return 0;
+}
\ No newline at end of file
diff --git a/fundamentals/code/project.sln b/fundamentals/code/project.sln
new file mode 100644
index 0000000..0a8bb0d
--- /dev/null
+++ b/fundamentals/code/project.sln
@@ -0,0 +1,31 @@
+ï»¿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 17
+VisualStudioVersion = 17.8.34322.80
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "project", "project.vcxproj", "{AF362EDA-E3C1-4C36-9746-825F3A16C279}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|x64 = Debug|x64
+		Debug|x86 = Debug|x86
+		Release|x64 = Release|x64
+		Release|x86 = Release|x86
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.ActiveCfg = Debug|x64
+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x64.Build.0 = Debug|x64
+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.ActiveCfg = Debug|Win32
+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Debug|x86.Build.0 = Debug|Win32
+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.ActiveCfg = Release|x64
+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x64.Build.0 = Release|x64
+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.ActiveCfg = Release|Win32
+		{AF362EDA-E3C1-4C36-9746-825F3A16C279}.Release|x86.Build.0 = Release|Win32
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {189AD194-2992-420A-9AC7-B6C34003EBD9}
+	EndGlobalSection
+EndGlobal
diff --git a/fundamentals/code/project.vcxproj b/fundamentals/code/project.vcxproj
new file mode 100644
index 0000000..b4a7699
--- /dev/null
+++ b/fundamentals/code/project.vcxproj
@@ -0,0 +1,139 @@
+<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Debug|Win32">
+      <Configuration>Debug</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|Win32">
+      <Configuration>Release</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|x64">
+      <Configuration>Debug</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <VCProjectVersion>17.0</VCProjectVersion>
+    <Keyword>Win32Proj</Keyword>
+    <ProjectGuid>{af362eda-e3c1-4c36-9746-825f3a16c279}</ProjectGuid>
+    <RootNamespace>project</RootNamespace>
+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <UseDebugLibraries>true</UseDebugLibraries>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <PlatformToolset>v143</PlatformToolset>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <UseDebugLibraries>true</UseDebugLibraries>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <PlatformToolset>v143</PlatformToolset>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Label="Shared">
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <SDLCheck>true</SDLCheck>
+      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ConformanceMode>true</ConformanceMode>
+    </ClCompile>
+    <Link>
+      <SubSystem>Console</SubSystem>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <SDLCheck>true</SDLCheck>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ConformanceMode>true</ConformanceMode>
+    </ClCompile>
+    <Link>
+      <SubSystem>Console</SubSystem>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <SDLCheck>true</SDLCheck>
+      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ConformanceMode>true</ConformanceMode>
+    </ClCompile>
+    <Link>
+      <SubSystem>Console</SubSystem>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <SDLCheck>true</SDLCheck>
+      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ConformanceMode>true</ConformanceMode>
+    </ClCompile>
+    <Link>
+      <SubSystem>Console</SubSystem>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="fundamentals.c" />
+    <ClCompile Include="main.c" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="fundamentals.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/fundamentals/code/project.vcxproj.filters b/fundamentals/code/project.vcxproj.filters
new file mode 100644
index 0000000..262ef51
--- /dev/null
+++ b/fundamentals/code/project.vcxproj.filters
@@ -0,0 +1,30 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
+    </Filter>
+    <Filter Include="Resource Files">
+      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
+      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="fundamentals.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="main.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="fundamentals.h">
+      <Filter>Source Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/fundamentals/code/project.vcxproj.user b/fundamentals/code/project.vcxproj.user
new file mode 100644
index 0000000..88a5509
--- /dev/null
+++ b/fundamentals/code/project.vcxproj.user
@@ -0,0 +1,4 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup />
+</Project>
\ No newline at end of file
diff --git a/fundamentals/code/x64/Debug/fundamentals.obj b/fundamentals/code/x64/Debug/fundamentals.obj
new file mode 100644
index 0000000..861a383
Binary files /dev/null and b/fundamentals/code/x64/Debug/fundamentals.obj differ
diff --git a/fundamentals/code/x64/Debug/main.obj b/fundamentals/code/x64/Debug/main.obj
new file mode 100644
index 0000000..412ddd8
Binary files /dev/null and b/fundamentals/code/x64/Debug/main.obj differ
diff --git a/fundamentals/code/x64/Debug/project.exe b/fundamentals/code/x64/Debug/project.exe
new file mode 100644
index 0000000..96f3f7c
Binary files /dev/null and b/fundamentals/code/x64/Debug/project.exe differ
diff --git a/fundamentals/code/x64/Debug/project.exe.recipe b/fundamentals/code/x64/Debug/project.exe.recipe
new file mode 100644
index 0000000..d15bad6
--- /dev/null
+++ b/fundamentals/code/x64/Debug/project.exe.recipe
@@ -0,0 +1,11 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project>
+  <ProjectOutputs>
+    <ProjectOutput>
+      <FullPath>C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe</FullPath>
+    </ProjectOutput>
+  </ProjectOutputs>
+  <ContentFiles />
+  <SatelliteDlls />
+  <NonRecipeFileRefs />
+</Project>
\ No newline at end of file
diff --git a/fundamentals/code/x64/Debug/project.ilk b/fundamentals/code/x64/Debug/project.ilk
new file mode 100644
index 0000000..ca8297e
Binary files /dev/null and b/fundamentals/code/x64/Debug/project.ilk differ
diff --git a/fundamentals/code/x64/Debug/project.log b/fundamentals/code/x64/Debug/project.log
new file mode 100644
index 0000000..46cbcf7
--- /dev/null
+++ b/fundamentals/code/x64/Debug/project.log
@@ -0,0 +1,4 @@
+ï»¿  fundamentals.c
+  main.c
+  Generating Code...
+  project.vcxproj -> C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
diff --git a/fundamentals/code/x64/Debug/project.pdb b/fundamentals/code/x64/Debug/project.pdb
new file mode 100644
index 0000000..f4c9944
Binary files /dev/null and b/fundamentals/code/x64/Debug/project.pdb differ
diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog
new file mode 100644
index 0000000..8ce9c43
Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.command.1.tlog differ
diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog
new file mode 100644
index 0000000..2466d33
Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.read.1.tlog differ
diff --git a/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog
new file mode 100644
index 0000000..a78224f
Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/CL.write.1.tlog differ
diff --git a/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
new file mode 100644
index 0000000..3b8784b
--- /dev/null
+++ b/fundamentals/code/x64/Debug/project.tlog/Cl.items.tlog
@@ -0,0 +1,2 @@
+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\fundamentals.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\fundamentals.obj
+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\main.c;C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\main.obj
diff --git a/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog
new file mode 100644
index 0000000..86df9f0
Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.command.1.tlog differ
diff --git a/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog
new file mode 100644
index 0000000..7a2ed43
Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.read.1.tlog differ
diff --git a/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog
new file mode 100644
index 0000000..a4ba5a7
Binary files /dev/null and b/fundamentals/code/x64/Debug/project.tlog/link.write.1.tlog differ
diff --git a/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
new file mode 100644
index 0000000..abb6863
--- /dev/null
+++ b/fundamentals/code/x64/Debug/project.tlog/project.lastbuildstate
@@ -0,0 +1,2 @@
+PlatformToolSet=v143:VCToolArchitecture=Native64Bit:VCToolsVersion=14.38.33130:TargetPlatformVersion=10.0.22621.0:
+Debug|x64|C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\|
diff --git a/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
new file mode 100644
index 0000000..3ccaa35
--- /dev/null
+++ b/fundamentals/code/x64/Debug/project.vcxproj.FileListAbsolute.txt
@@ -0,0 +1,2 @@
+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\fundamentals\v1\project\x64\Debug\project.exe
+C:\Users\axton\OneDrive - Seneca\CPR101\finalProject\Project Source Code\project\fundamentals\code\x64\Debug\project.exe
diff --git a/fundamentals/code/x64/Debug/vc143.idb b/fundamentals/code/x64/Debug/vc143.idb
new file mode 100644
index 0000000..6700a8c
Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.idb differ
diff --git a/fundamentals/code/x64/Debug/vc143.pdb b/fundamentals/code/x64/Debug/vc143.pdb
new file mode 100644
index 0000000..88847b7
Binary files /dev/null and b/fundamentals/code/x64/Debug/vc143.pdb differ
diff --git a/fundamentals/fundamentals-test-cases.xlsx b/fundamentals/fundamentals-test-cases.xlsx
new file mode 100644
index 0000000..d625c15
Binary files /dev/null and b/fundamentals/fundamentals-test-cases.xlsx differ
diff --git a/fundamentals/fundamentals.c b/fundamentals/fundamentals.c
new file mode 100644
index 0000000..172438a
--- /dev/null
+++ b/fundamentals/fundamentals.c
@@ -0,0 +1,16 @@
+#include "fundamentals.h"
+
+void fundamentals() {
+/* Version 1 */
+>> insert here
+
+
+/* Version 2 */
+>> insert here
+
+
+/* Version 3 */
+>> insert here
+
+
+}
\ No newline at end of file
diff --git a/fundamentals/fundamentals_header.png b/fundamentals/fundamentals_header.png
new file mode 100644
index 0000000..aae2842
Binary files /dev/null and b/fundamentals/fundamentals_header.png differ
diff --git a/fundamentals/fundamentals_v1.png b/fundamentals/fundamentals_v1.png
new file mode 100644
index 0000000..0f519ca
Binary files /dev/null and b/fundamentals/fundamentals_v1.png differ
diff --git a/fundamentals/fundamentals_v2.png b/fundamentals/fundamentals_v2.png
new file mode 100644
index 0000000..9bc0381
Binary files /dev/null and b/fundamentals/fundamentals_v2.png differ
diff --git a/fundamentals/fundamentals_v3.png b/fundamentals/fundamentals_v3.png
new file mode 100644
index 0000000..b390188
Binary files /dev/null and b/fundamentals/fundamentals_v3.png differ
diff --git a/fundamentals/v1/PM-Notes-AxtonSmith.docx b/fundamentals/v1/PM-Notes-AxtonSmith.docx
new file mode 100644
index 0000000..acc0ce8
--- /dev/null
+++ b/fundamentals/v1/PM-Notes-AxtonSmith.docx
@@ -0,0 +1,4 @@
+Fundamentals Module V1
+The fundamentals module version one is used to allow user to input a string and then check which character is stored at a given index in the string.
+Testing: To test edge cases I will input a string and then check the 0 index and then the last index the string should have. The typical case will be any index in between these points. 
+Negative cases will be any indexes beyond the max length of the string.
diff --git a/fundamentals/v1/fundamentals-test-cases.xlsx b/fundamentals/v1/fundamentals-test-cases.xlsx
new file mode 100644
index 0000000..35c1eda
Binary files /dev/null and b/fundamentals/v1/fundamentals-test-cases.xlsx differ
diff --git a/fundamentals/v1/fundamentals.c b/fundamentals/v1/fundamentals.c
new file mode 100644
index 0000000..1215375
--- /dev/null
+++ b/fundamentals/v1/fundamentals.c
@@ -0,0 +1,40 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#define NUM_INPUT_SIZE 10
+
+#include "fundamentals.h"
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals() {
+/* Version 1 */
+	printf("*** Start of Indexing Strings Demo ***\n");
+	char buffer1[BUFFER_SIZE];
+	char numInput[NUM_INPUT_SIZE];
+	size_t position;
+	do
+	{
+		printf("Type not empty string (q - to quit):\n");
+		fgets(buffer1, BUFFER_SIZE, stdin);
+		buffer1[strlen(buffer1) - 1] = '\0';
+		if (strcmp(buffer1, "q") != 0)
+		{
+			printf("Type the character position within the string:\n");
+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+			numInput[strlen(numInput) - 1] = '\0';
+			position = atoi(numInput);
+			if (position >= strlen(buffer1))
+			{
+				position = strlen(buffer1) - 1;
+				printf("Too big... Position reduced to max. available\n");
+			}
+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+		}
+	} while (strcmp(buffer1, "q") != 0);
+	printf("*** End of Indexing Strings Demo ***\n\n");
+
+	/* Version 2 */
+	//>> insert here
+
+	/* Version 3 */
+	//>> insert here
+}
\ No newline at end of file
diff --git a/fundamentals/v1/fundamentals.h b/fundamentals/v1/fundamentals.h
new file mode 100644
index 0000000..14a6f4f
--- /dev/null
+++ b/fundamentals/v1/fundamentals.h
@@ -0,0 +1,11 @@
+#ifndef _FUNDAMENTALS_H_
+#define _FUNDAMENTALS_H_
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals(void);
+
+#endif
\ No newline at end of file
diff --git a/fundamentals/v1/main.c b/fundamentals/v1/main.c
new file mode 100644
index 0000000..1225e71
--- /dev/null
+++ b/fundamentals/v1/main.c
@@ -0,0 +1,7 @@
+#include "fundamentals.h"
+
+int main(void)
+{
+	fundamentals();
+	return 0;
+}
\ No newline at end of file
diff --git a/main/converting.c b/main/converting.c
new file mode 100644
index 0000000..dc92171
--- /dev/null
+++ b/main/converting.c
@@ -0,0 +1,34 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+
+#include "converting.h"
+
+// User inputs a number as a string, then it is returned as an int
+void converting() {
+/* Version 1 */
+	printf("*** Start of Converting Strings to int Demo ***\n");
+	char intString[BUFFER_SIZE];
+	int intNumber;
+	do
+	{
+		printf("Type an int numeric string (q - to quit):\n");
+		fgets(intString, BUFFER_SIZE, stdin);
+		intString[strlen(intString) - 1] = '\0';
+		if (strcmp(intString, "q") != 0)
+		{
+			intNumber = atoi(intString);
+			printf("Converted number is %d\n", intNumber);
+		}
+	}
+	while (strcmp(intString, "q") != 0);
+	printf("*** End of Converting Strings to int Demo ***\n\n");
+
+/* Version 2 */
+//>> insert here
+
+
+/* Version 3 */
+//>> insert here
+
+
+}
diff --git a/main/converting.h b/main/converting.h
new file mode 100644
index 0000000..94e86ab
--- /dev/null
+++ b/main/converting.h
@@ -0,0 +1,11 @@
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+// User inputs a number as a string, then it is returned as an int
+void converting(void);
+
+#endif
\ No newline at end of file
diff --git a/main/fundamentals.c b/main/fundamentals.c
new file mode 100644
index 0000000..1215375
--- /dev/null
+++ b/main/fundamentals.c
@@ -0,0 +1,40 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#define NUM_INPUT_SIZE 10
+
+#include "fundamentals.h"
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals() {
+/* Version 1 */
+	printf("*** Start of Indexing Strings Demo ***\n");
+	char buffer1[BUFFER_SIZE];
+	char numInput[NUM_INPUT_SIZE];
+	size_t position;
+	do
+	{
+		printf("Type not empty string (q - to quit):\n");
+		fgets(buffer1, BUFFER_SIZE, stdin);
+		buffer1[strlen(buffer1) - 1] = '\0';
+		if (strcmp(buffer1, "q") != 0)
+		{
+			printf("Type the character position within the string:\n");
+			fgets(numInput, NUM_INPUT_SIZE, stdin);
+			numInput[strlen(numInput) - 1] = '\0';
+			position = atoi(numInput);
+			if (position >= strlen(buffer1))
+			{
+				position = strlen(buffer1) - 1;
+				printf("Too big... Position reduced to max. available\n");
+			}
+			printf("The character found at %d position is \'%c\'\n", (int)position, buffer1[position]);
+		}
+	} while (strcmp(buffer1, "q") != 0);
+	printf("*** End of Indexing Strings Demo ***\n\n");
+
+	/* Version 2 */
+	//>> insert here
+
+	/* Version 3 */
+	//>> insert here
+}
\ No newline at end of file
diff --git a/main/fundamentals.h b/main/fundamentals.h
new file mode 100644
index 0000000..14a6f4f
--- /dev/null
+++ b/main/fundamentals.h
@@ -0,0 +1,11 @@
+#ifndef _FUNDAMENTALS_H_
+#define _FUNDAMENTALS_H_
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+// Takes a string input from user, then an index number and returns the character at that index of the string
+void fundamentals(void);
+
+#endif
\ No newline at end of file
diff --git a/main/main.c b/main/main.c
new file mode 100644
index 0000000..5062fbb
--- /dev/null
+++ b/main/main.c
@@ -0,0 +1,12 @@
+#include "fundamentals.h"
+#include "manipulating.h"
+#include "tokenizing.h"
+#include "converting.h"
+
+int main(void)
+{
+	fundamentals();
+	manipulating();
+	tokenizing();
+	converting();
+}
diff --git a/main/manipulating.c b/main/manipulating.c
new file mode 100644
index 0000000..3de4a55
--- /dev/null
+++ b/main/manipulating.c
@@ -0,0 +1,28 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "manipulating.h"
+
+// V1
+
+void manipulating(void) {
+	printf("*** Start if Concatenating Strings Demo ***\n");
+	char string1[BUFFER_SIZE];
+	char string2[BUFFER_SIZE];
+	do {
+		//Prompt for first string
+		printf("Type the 1st string (q - to quit):\n");
+		fgets(string1, BUFFER_SIZE, stdin);
+		string1[strlen(string1) - 1] = '\0';
+		//if q was entered quit program
+		if ((strcmp(string1, "q") != 0)) {
+			printf("Type the 2nd string:\n");
+			//promt for 2nd string
+			fgets(string2, BUFFER_SIZE, stdin);
+			string2[strlen(string2) - 1] = '\0';
+			//concatenate string
+			strcat(string1, string2);
+			printf("Concatenated string is \'%s\'\n", string1);
+		}
+	} while (strcmp(string1, "q") != 0);
+	printf("*** End of Concatenating Strings Demo ***\n\n");
+}
\ No newline at end of file
diff --git a/main/manipulating.h b/main/manipulating.h
new file mode 100644
index 0000000..434f748
--- /dev/null
+++ b/main/manipulating.h
@@ -0,0 +1,6 @@
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+#include <stdio.h>
+#include <string.h>
+void manipulating(void);
+#endif
\ No newline at end of file
diff --git a/main/tokenizing.c b/main/tokenizing.c
new file mode 100644
index 0000000..97680d4
--- /dev/null
+++ b/main/tokenizing.c
@@ -0,0 +1,42 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 300
+#include "tokenizing.h"
+
+/* Version 1 */
+void tokenizing(void)
+{
+	printf("*** Start of Tokenizing Words Demo ***\n");
+	char words[BUFFER_SIZE];
+	char* nextWord = NULL;
+	int wordsCounter;
+	do {
+		printf("Type a few words seperated by space  (q - to quit):\n");
+		fgets(words, BUFFER_SIZE, stdin);
+		words[strlen(words) - 1] = '\0';
+		if (strcmp(words, "q") != 0) {
+			nextWord = strtok(words, " ");
+			wordsCounter = 1;
+			while(nextWord) {
+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+				nextWord = strtok(NULL, " ");
+
+			}
+		}
+	} while (strcmp(words, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");
+
+}
+
+
+
+
+
+/* Version 2 */
+
+
+
+/* Version 3 */
+
+
+
+
diff --git a/main/tokenizing.h b/main/tokenizing.h
new file mode 100644
index 0000000..d377740
--- /dev/null
+++ b/main/tokenizing.h
@@ -0,0 +1,10 @@
+#ifndef _TOKENIZING_H
+#define _TOKENIZING_H
+
+#include <stdio.h>
+#include <string.h>
+
+void tokenizing(void);
+
+#endif 
+
diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo
new file mode 100644
index 0000000..ce82fd8
Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/.suo differ
diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db
new file mode 100644
index 0000000..95cfcc7
Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Browse.VC.db differ
diff --git a/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db
new file mode 100644
index 0000000..b2ba1dc
Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/.vs/CPR_MANIPULATION/v17/Solution.VC.db differ
diff --git a/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx
new file mode 100644
index 0000000..6a221a6
--- /dev/null
+++ b/manipulation/Manipulation V1/Manipulation V1/PM-Notes-Brandon-Doray.docx	
@@ -0,0 +1,9 @@
+Manipulation Module
+
+This module concatenates 2 strings sized to a defined macro.
+
+Edge cases tested the smallest possible strings, empty strings, and strings that together, take up all available memory.
+
+An input of `q' was tested to ensure it would result in ending the program.
+
+A string that is greater than the initialized memory was tested to ensure it would not crash the program.
diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c
new file mode 100644
index 0000000..1bcc78d
--- /dev/null
+++ b/manipulation/Manipulation V1/Manipulation V1/manipulatemain.c	
@@ -0,0 +1,5 @@
+int main(void) {
+
+	manipulating();
+	return 0;
+}
\ No newline at end of file
diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.c b/manipulation/Manipulation V1/Manipulation V1/manipulating.c
new file mode 100644
index 0000000..3de4a55
--- /dev/null
+++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.c	
@@ -0,0 +1,28 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "manipulating.h"
+
+// V1
+
+void manipulating(void) {
+	printf("*** Start if Concatenating Strings Demo ***\n");
+	char string1[BUFFER_SIZE];
+	char string2[BUFFER_SIZE];
+	do {
+		//Prompt for first string
+		printf("Type the 1st string (q - to quit):\n");
+		fgets(string1, BUFFER_SIZE, stdin);
+		string1[strlen(string1) - 1] = '\0';
+		//if q was entered quit program
+		if ((strcmp(string1, "q") != 0)) {
+			printf("Type the 2nd string:\n");
+			//promt for 2nd string
+			fgets(string2, BUFFER_SIZE, stdin);
+			string2[strlen(string2) - 1] = '\0';
+			//concatenate string
+			strcat(string1, string2);
+			printf("Concatenated string is \'%s\'\n", string1);
+		}
+	} while (strcmp(string1, "q") != 0);
+	printf("*** End of Concatenating Strings Demo ***\n\n");
+}
\ No newline at end of file
diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulating.h b/manipulation/Manipulation V1/Manipulation V1/manipulating.h
new file mode 100644
index 0000000..434f748
--- /dev/null
+++ b/manipulation/Manipulation V1/Manipulation V1/manipulating.h	
@@ -0,0 +1,6 @@
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+#include <stdio.h>
+#include <string.h>
+void manipulating(void);
+#endif
\ No newline at end of file
diff --git a/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx
new file mode 100644
index 0000000..de4db70
Binary files /dev/null and b/manipulation/Manipulation V1/Manipulation V1/manipulation-test-cases.xlsx differ
diff --git a/tokenizing/PM-Notes-DarianGrijalba.docx b/tokenizing/PM-Notes-DarianGrijalba.docx
new file mode 100644
index 0000000..79615b7
--- /dev/null
+++ b/tokenizing/PM-Notes-DarianGrijalba.docx
@@ -0,0 +1,35 @@
+                                 Tokenizing v1
+Test Cases
+*** Start of Tokenizing Words Demo ***
+Type a few words separated by space  (q - to quit):
+Inputs: "The"
+Outputs: Word #1 is The
+Type a few words separated by space  (q - to quit):
+Inputs: "q"
+*** End of Tokenizing Words Demo ***
+
+*** Start of Tokenizing Words Demo ***
+Type a few words separated by space  (q - to quit):
+Inputs: "Have A Good Day"
+Outputs: Word #1 is Have
+	   Word #2 is A
+	   Word #3 is Good
+	   Word #4 is Day
+Type a few words separated by space  (q - to quit):
+Inputs: "q"
+*** End of Tokenizing Words Demo ***
+
+*** Start of Tokenizing Words Demo ***
+Type a few words separated by space  (q - to quit):
+Inputs: "HaveA                                Gooooooooooooood                               Day"
+Outputs: Word #1 is HaveA
+	   Word #2 is Goooooooooooooood
+	   Word #3 is Day
+Type a few words separated by space  (q - to quit):
+Inputs: "q"
+*** End of Tokenizing Words Demo ***
+
+Basically will calculate the amount of words the user inputted and list them out one by one 
+
+
+
diff --git a/tokenizing/tokenizing.c b/tokenizing/tokenizing.c
new file mode 100644
index 0000000..cd11fd7
--- /dev/null
+++ b/tokenizing/tokenizing.c
@@ -0,0 +1,42 @@
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 300
+#include "Tokenzing.h"
+
+/* Version 1 */
+void tokenizing(void)
+{
+	printf("*** Start of Tokenizing Words Demo ***\n");
+	char words[BUFFER_SIZE];
+	char* nextWord = NULL;
+	int wordsCounter;
+	do {
+		printf("Type a few words seperated by space  (q - to quit):\n");
+		fgets(words, BUFFER_SIZE, stdin);
+		words[strlen(words) - 1] = '\0';
+		if (strcmp(words, "q") != 0) {
+			nextWord = strtok(words, " ");
+			wordsCounter = 1;
+			while(nextWord) {
+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+				nextWord = strtok(NULL, " ");
+
+			}
+		}
+	} while (strcmp(words, "q") != 0);
+	printf("*** End of Tokenizing Words Demo ***\n\n");
+
+}
+
+
+
+
+
+/* Version 2 */
+
+
+
+/* Version 3 */
+
+
+
+
diff --git a/tokenizing/tokenizing.h b/tokenizing/tokenizing.h
new file mode 100644
index 0000000..c136582
--- /dev/null
+++ b/tokenizing/tokenizing.h
@@ -0,0 +1,16 @@
+#ifndef _TOKENIZING_H
+#define _TOKENIZING_H
+
+#include <stdio.h>
+#include <string.h>
+
+void tokenizing(void);
+
+int main() {
+    // Call your tokenizing function or include it in your main function
+    tokenizing();
+
+    return 0;
+}
+#endif 
+

commit 306f1ee35754c5c7e56bc11fb2c61f66956b2f9f
Author: Axton Smith <axtonsmith@gmail.com>
Date:   Wed Dec 6 21:02:16 2023 -0500

    Initial commit

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..ec7a918
--- /dev/null
+++ b/README.md
@@ -0,0 +1,2 @@
+# CPR101group3
+Final project for a computer principles for programmers course
